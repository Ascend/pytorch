diff -Nur '--exclude=.git*' '--exclude=OWNERS' '--exclude=access_control_test.py' '--exclude=third_party' '--exclude=README*' -Nur pytorch-v1.8.1/build.sh patch/build.sh
--- pytorch-v1.8.1/build.sh	1970-01-01 08:00:00.000000000 +0800
+++ patch/build.sh	2022-05-10 16:41:28.213285304 +0800
@@ -0,0 +1,124 @@
+CUR_DIR=$(dirname $(readlink -f $0))
+SUPPORTED_PY_VERSION=(3.7 3.8 3.9)
+PY_VERSION='3.7'                     # Default supported python version is 3.7
+DEFAULT_SCRIPT_ARGS_NUM=1            # Default supported input parameters
+
+# Parse arguments inside script
+function parse_script_args() {
+    local args_num=0
+    if [[ "x${1}" = "x" ]]; then
+        # default: bash build.sh (python3.7)
+        return 0
+    fi
+
+    while true; do
+        if [[ "x${1}" = "x" ]]; then
+            break
+        fi
+        if [[ "$(echo "${1}"|cut -b1-|cut -b-2)" == "--" ]]; then
+            args_num=$((args_num+1))
+        fi
+        if [[ ${args_num} -eq ${DEFAULT_SCRIPT_ARGS_NUM} ]]; then
+            break
+        fi
+        shift
+    done
+
+    # if num of args are not fully parsed, throw an error.
+    if [[ ${args_num} -lt ${DEFAULT_SCRIPT_ARGS_NUM} ]]; then
+        return 1
+    fi
+
+    while true; do
+        case "${1}" in
+        --python=*)
+            PY_VERSION=$(echo "${1}"|cut -d"=" -f2)
+            args_num=$((args_num-1))
+            shift
+            ;;
+        -*)
+            echo "ERROR Unsupported parameters: ${1}"
+            return 1
+            ;;
+        *)
+            if [ "x${1}" != "x" ]; then
+                echo "ERROR Unsupported parameters: ${1}"
+                return 1
+            fi
+            break
+            ;;
+        esac
+    done
+
+    # if some "--param=value" are not parsed correctly, throw an error.
+    if [[ ${args_num} -ne 0 ]]; then
+        return 1
+    fi
+}
+
+function check_python_version() {
+    matched_py_version='false'
+    for ver in ${SUPPORTED_PY_VERSION[*]}; do
+        if [ "${PY_VERSION}" = "${ver}" ]; then
+            matched_py_version='true'
+            return 0
+        fi
+    done
+    if [ "${matched_py_version}" = 'false' ]; then
+        echo "${PY_VERSION} is an unsupported python version, we suggest ${SUPPORTED_PY_VERSION[*]}"
+        exit 1
+    fi
+}
+
+function main()
+{
+    if ! parse_script_args "$@"; then
+        echo "Failed to parse script args. Please check your inputs."
+        exit 1
+    fi
+    check_python_version
+
+    # Find matched dependent Python libraries to current Python version in HCCL compiling
+    hccl_file2=${CUR_DIR}/third_party/acl/libs/build_stub.sh
+    if [[ ${PY_VERSION} = '3.7' ]]; then
+        dst_py_ver='3.7m'
+    else
+        dst_py_ver=${PY_VERSION}
+    fi
+    for src_py_ver in ${SUPPORTED_PY_VERSION[*]}; do
+        if [[ ${src_py_ver} = '3.7' ]]; then
+            src_py_ver='3.7m'
+        fi
+
+        if [[ $(grep -c "${src_py_ver}" ${hccl_file2}) -ne 0 && ${src_py_ver} != ${dst_py_ver} ]]; then
+            sed -i "s/libpython${src_py_ver}/libpython${dst_py_ver}/g" ${hccl_file2}
+        fi
+    done
+
+    cd ${CUR_DIR}/third_party/acl/libs
+    # stub
+    dos2unix build_stub.sh
+    chmod +x build_stub.sh
+    ./build_stub.sh
+
+    cd ${CUR_DIR}
+    # if you add or delete file/files in the project, you need to remove the following comment
+    # make clean
+    export TORCH_PACKAGE_NAME=torch
+    export PYTORCH_BUILD_VERSION='1.8.1+ascend'
+    export PYTORCH_BUILD_NUMBER=2
+
+    USE_FBGEMM=0 DEBUG=0 USE_DISTRIBUTED=1 USE_QNNPACK=0 USE_HCCL=1 USE_MKLDNN=0 USE_CUDA=0 USE_NPU=1 BUILD_TEST=0 USE_NNPACK=0 USE_XNNPACK=0 python"${PY_VERSION}" setup.py build bdist_wheel
+    if [ $? != 0 ]; then
+        USE_FBGEMM=0 DEBUG=0 USE_DISTRIBUTED=1 USE_QNNPACK=0 USE_HCCL=1 USE_MKLDNN=0 USE_CUDA=0 USE_NPU=1 BUILD_TEST=0 USE_NNPACK=0 USE_XNNPACK=0 python"${PY_VERSION}" setup.py build bdist_wheel
+        if [ $? != 0 ]; then
+            echo "Failed to compile the wheel file. Please check the source code by yourself."
+            exit 1
+        fi
+        exit 0
+    fi
+
+    exit 0
+}
+
+main "$@"
\ No newline at end of file
diff -Nur '--exclude=.git*' '--exclude=OWNERS' '--exclude=access_control_test.py' '--exclude=third_party' '--exclude=README*' -Nur pytorch-v1.8.1/c10/core/DispatchKey.cpp patch/c10/core/DispatchKey.cpp
--- pytorch-v1.8.1/c10/core/DispatchKey.cpp	2022-03-05 10:10:10.000000000 +0800
+++ patch/c10/core/DispatchKey.cpp	2022-05-16 21:11:39.431429640 +0800
@@ -6,7 +6,6 @@
   switch (t) {
     case DispatchKey::Undefined:
       return "Undefined";
-
     case DispatchKey::CPU:
       return "CPU";
     case DispatchKey::CUDA:
diff -Nur '--exclude=.git*' '--exclude=OWNERS' '--exclude=access_control_test.py' '--exclude=third_party' '--exclude=README*' -Nur pytorch-v1.8.1/c10/core/StorageImpl.h patch/c10/core/StorageImpl.h
--- pytorch-v1.8.1/c10/core/StorageImpl.h	2022-03-05 10:10:10.000000000 +0800
+++ patch/c10/core/StorageImpl.h	2022-04-28 18:51:47.202663489 +0800
@@ -7,7 +7,7 @@
 
 namespace c10 {
 
-struct C10_API StorageImpl final : public c10::intrusive_ptr_target {
+struct C10_API StorageImpl : public c10::intrusive_ptr_target {
  public:
   struct use_byte_size_t {};
 
diff -Nur '--exclude=.git*' '--exclude=OWNERS' '--exclude=access_control_test.py' '--exclude=third_party' '--exclude=README*' -Nur pytorch-v1.8.1/tools/generate_torch_version.py patch/tools/generate_torch_version.py
--- pytorch-v1.8.1/tools/generate_torch_version.py	2022-03-05 10:10:10.000000000 +0800
+++ patch/tools/generate_torch_version.py	2022-03-07 18:32:03.076343192 +0800
@@ -17,10 +17,10 @@
 
     if os.getenv('PYTORCH_BUILD_VERSION'):
         assert os.getenv('PYTORCH_BUILD_NUMBER') is not None
-        build_number = int(os.getenv('PYTORCH_BUILD_NUMBER', ""))
+        build_number = int(os.getenv('PYTORCH_BUILD_NUMBER', "0"))
         version = os.getenv('PYTORCH_BUILD_VERSION', "")
-        if build_number > 1:
-            version += '.post' + str(build_number)
+        if build_number > 0:
+            version += '.rc' + str(build_number)
     elif sha != 'Unknown':
         if sha is None:
             sha = get_sha(pytorch_root)
diff -Nur '--exclude=.git*' '--exclude=OWNERS' '--exclude=access_control_test.py' '--exclude=third_party' '--exclude=README*' -Nur pytorch-v1.8.1/torch/csrc/autograd/VariableTypeManual.cpp patch/torch/csrc/autograd/VariableTypeManual.cpp
--- pytorch-v1.8.1/torch/csrc/autograd/VariableTypeManual.cpp	2022-03-05 10:10:10.000000000 +0800
+++ patch/torch/csrc/autograd/VariableTypeManual.cpp	2022-05-16 21:11:39.431429640 +0800
@@ -396,7 +396,6 @@
 }
 
 TORCH_LIBRARY_IMPL(aten, Math, m) {
-  m.impl("set_data", torch::dispatch(DispatchKey::Math, TORCH_FN(VariableType::set_data)));
   m.impl("data", torch::dispatch(DispatchKey::Math, TORCH_FN(VariableType::data)));
   m.impl("is_leaf", torch::dispatch(DispatchKey::Math, TORCH_FN(VariableType::is_leaf)));
   m.impl("output_nr", torch::dispatch(DispatchKey::Math, TORCH_FN(VariableType::output_nr)));
diff -Nur '--exclude=.git*' '--exclude=OWNERS' '--exclude=access_control_test.py' '--exclude=third_party' '--exclude=README*' -Nur pytorch-v1.8.1/torch/csrc/DynamicTypes.cpp patch/torch/csrc/DynamicTypes.cpp
--- pytorch-v1.8.1/torch/csrc/DynamicTypes.cpp	2022-03-05 10:10:10.000000000 +0800
+++ patch/torch/csrc/DynamicTypes.cpp	2022-05-16 21:11:39.431429640 +0800
@@ -61,9 +61,11 @@
     const at::Storage& storage,
     const caffe2::TypeMeta dtype) {
   at::ScalarType scalarType = at::typeMetaToScalarType(dtype);
-  auto attype = &at::getDeprecatedTypeProperties(
-      at::dispatchKeyToBackend(c10::computeDispatchKey(scalarType, c10::nullopt, storage.device_type())),
-      scalarType);
+  auto backend = at::dispatchKeyToBackend(c10::computeDispatchKey(scalarType, c10::nullopt, storage.device_type()));
+  if (backend == c10::Backend::XLA) {
+    backend = c10::Backend::CPU;
+  }
+  auto attype = &at::getDeprecatedTypeProperties(backend, scalarType);
   auto it = attype_to_py_storage_type.find(attype);
   if (it != attype_to_py_storage_type.end()) {
     return it->second;
