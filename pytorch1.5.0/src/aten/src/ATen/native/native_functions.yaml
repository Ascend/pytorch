# See README.md in this directory for more guidance

# Temporary type cast operators. These are needed to trace type-casts now since
# Type's are not supported in the IR. Instead, we call down to these
# specialized operators for each datatype.
# TODO: remove when we have Type support in the IR
- func: _cast_Byte(Tensor self, bool non_blocking=False) -> Tensor
  use_c10_dispatcher: full
  variants: function

- func: _cast_Char(Tensor self, bool non_blocking=False) -> Tensor
  use_c10_dispatcher: full
  variants: function

- func: _cast_Double(Tensor self, bool non_blocking=False) -> Tensor
  use_c10_dispatcher: full
  variants: function

- func: _cast_Float(Tensor self, bool non_blocking=False) -> Tensor
  use_c10_dispatcher: full
  variants: function

- func: _cast_Int(Tensor self, bool non_blocking=False) -> Tensor
  use_c10_dispatcher: full
  variants: function

- func: _cast_Long(Tensor self, bool non_blocking=False) -> Tensor
  use_c10_dispatcher: full
  variants: function

- func: _cast_Short(Tensor self, bool non_blocking=False) -> Tensor
  use_c10_dispatcher: full
  variants: function

- func: _cast_Half(Tensor self, bool non_blocking=False) -> Tensor
  use_c10_dispatcher: full
  variants: function

# Computes the gradient of current tensor w.r.t. graph leaves.
- func: backward(Tensor self, Tensor? gradient=None, bool keep_graph=False, bool create_graph=False) -> ()
  manual_kernel_registration: True
  variants: method

# DEPRECATED. Sets the tensor data held by this `Variable` to be the same as
# `new_data`.  It requires that `new_data` and `Variable` have compatible tensor
# type, by checking `_has_compatible_shallow_copy_type(this, new_data)`.
#
# This function is deprecated because it doesn't really make sense in a world
# where Variables *are* Tensors (as opposed to them containing tensors, which
# is what the previous interpretation was.)
- func: set_data(Tensor(a!) self, Tensor new_data) -> ()
  use_c10_dispatcher: full
  manual_kernel_registration: True
  variants: method

- func: data(Tensor self) -> Tensor
  use_c10_dispatcher: full
  manual_kernel_registration: True
  variants: method

# True if this `Variable` is a leaf and thus does not have a `grad_fn`.
- func: is_leaf(Tensor self) -> bool
  use_c10_dispatcher: full
  manual_kernel_registration: True
  variants: method

# Returns the output index of this variable from the forward operation that
# produced it.  Conversely, it returns the input index of the gradient `Node` to
# which this `Variable` is connected (because in the gradient computation,
# inputs and outputs switch meaning).  For example:
#
#   y0, y1, y2 = f(x)
#   assert y0.output_nr == 0
#   assert y1.output_nr == 1
#   assert y2.output_nr == 2
#
- func: output_nr(Tensor self) -> int
  use_c10_dispatcher: full
  manual_kernel_registration: True
  variants: method
  supports_named_tensor: True

- func: _version(Tensor self) -> int
  use_c10_dispatcher: full
  manual_kernel_registration: True
  variants: method

- func: requires_grad_(Tensor(a!) self, bool _requires_grad=True) -> Tensor(a!)
  manual_kernel_registration: True
  variants: method

# Enables .grad attribute for non-leaf Tensors.
- func: retain_grad(Tensor(a!) self) -> ()
  use_c10_dispatcher: full
  manual_kernel_registration: True
  variants: method

- func: rename_(Tensor(a!) self, Dimname[]? names) -> Tensor(a!)
  variants: method
  supports_named_tensor: True

- func: rename(Tensor(a) self, Dimname[]? names) -> Tensor(a)
  variants: method
  supports_named_tensor: True

- func: align_to(Tensor(a) self, Dimname[] names) -> Tensor(a)
  variants: method
  supports_named_tensor: True

- func: align_to.ellipsis_idx(Tensor(a) self, Dimname[] order, int ellipsis_idx) -> Tensor(a)
  variants: method
  supports_named_tensor: True

- func: align_as(Tensor self, Tensor other) -> Tensor
  variants: method
  supports_named_tensor: True

- func: align_tensors(Tensor[] tensors) -> Tensor[]
  supports_named_tensor: True

- func: refine_names(Tensor(a) self, Dimname[] names) -> Tensor(a)
  variants: method
  supports_named_tensor: True

- func: unflatten.Dimname(Tensor self, Dimname dim, int[] sizes, Dimname[] names) -> Tensor
  variants: method
  supports_named_tensor: True

- func: unflatten.int(Tensor self, int dim, int[] sizes, Dimname[] names) -> Tensor
  variants: method
  supports_named_tensor: True

- func: _use_cudnn_ctc_loss(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank) -> bool
  dispatch:
    CUDA: _use_cudnn_ctc_loss

- func: _cudnn_ctc_loss(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank, bool deterministic, bool zero_infinity) -> (Tensor, Tensor)
  dispatch:
    CUDA: _cudnn_ctc_loss

- func: _use_cudnn_rnn_flatten_weight() -> bool
  use_c10_dispatcher: full

- func: _cudnn_rnn_flatten_weight(Tensor[] weight_arr, int weight_stride0, int input_size, int mode, int hidden_size, int num_layers, bool batch_first, bool bidirectional) -> Tensor
  dispatch:
    CUDA: _cudnn_rnn_flatten_weight

- func: _cudnn_rnn(Tensor input, Tensor[] weight, int weight_stride0, Tensor? weight_buf, Tensor hx, Tensor? cx, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state) -> (Tensor, Tensor, Tensor, Tensor, Tensor)
  dispatch:
    CUDA: _cudnn_rnn

- func: _cudnn_rnn_backward(Tensor input, Tensor[] weight, int weight_stride0, Tensor weight_buf, Tensor hx, Tensor? cx, Tensor output, Tensor? grad_output, Tensor? grad_hy, Tensor? grad_cy, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state, Tensor reserve, bool[4] output_mask) -> (Tensor, Tensor, Tensor, Tensor[])
  dispatch:
    CUDA: _cudnn_rnn_backward

- func: _cudnn_init_dropout_state(float dropout, bool train, int dropout_seed, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor
  dispatch:
    CUDA: _cudnn_init_dropout_state

- func: _debug_has_internal_overlap(Tensor self) -> int
  use_c10_dispatcher: full
  variants: function

- func: _fused_dropout(Tensor self, float p, Generator? generator=None) -> (Tensor, Tensor)
  variants: function
  dispatch:
    CUDA: fused_dropout_cuda
  supports_named_tensor: True

- func: _masked_scale(Tensor self, Tensor mask, float scale) -> Tensor
  use_c10_dispatcher: full
  variants: function
  dispatch:
    CUDA: masked_scale_cuda

- func: _sobol_engine_draw(Tensor quasi, int n, Tensor sobolstate, int dimension, int num_generated, ScalarType? dtype) -> (Tensor, Tensor)

- func: _sobol_engine_ff_(Tensor(a!) self, int n, Tensor sobolstate, int dimension, int num_generated) -> Tensor(a!)

- func: _sobol_engine_scramble_(Tensor(a!) self, Tensor ltm, int dimension) -> Tensor(a!)

- func: _sobol_engine_initialize_state_(Tensor(a!) self, int dimension) -> Tensor(a!)

- func: _reshape_from_tensor(Tensor self, Tensor shape) -> Tensor
  use_c10_dispatcher: full

- func: _shape_as_tensor(Tensor self) -> Tensor
  use_c10_dispatcher: full

- func: dropout(Tensor input, float p, bool train) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  npu_dispatch:
    NPU: dropout_npu

- func: dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)
  supports_named_tensor: True
  npu_dispatch:
    NPU: dropout_npu_

- func: feature_dropout(Tensor input, float p, bool train) -> Tensor
  use_c10_dispatcher: full

- func: feature_dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)

- func: alpha_dropout(Tensor input, float p, bool train) -> Tensor
  use_c10_dispatcher: full

- func: alpha_dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)

- func: feature_alpha_dropout(Tensor input, float p, bool train) -> Tensor
  use_c10_dispatcher: full

- func: feature_alpha_dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)

- func: abs(Tensor self) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  supports_named_tensor: True
  npu_dispatch:
    NPU: abs_npu

- func: abs_(Tensor(a!) self) -> Tensor(a!)
  variants: function, method
  supports_named_tensor: True
  npu_dispatch:
    NPU: abs_npu_

- func: abs.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  npu_dispatch:
    NPU: abs_out_npu

- func: angle(Tensor self) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  supports_named_tensor: True

- func: angle.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True

- func: real(Tensor self) -> Tensor
  use_c10_dispatcher: full
  variants: function
  supports_named_tensor: True

- func: imag(Tensor self) -> Tensor
  use_c10_dispatcher: full
  variants: function
  supports_named_tensor: True

- func: conj(Tensor self) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  supports_named_tensor: True

- func: conj.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True

- func: acos(Tensor self) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: acos_npu

- func: acos_(Tensor(a!) self) -> Tensor(a!)
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: acos_npu_

- func: acos.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  npu_dispatch:
    NPU: acos_out_npu

- func: avg_pool1d(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=0, bool ceil_mode=False, bool count_include_pad=True) -> Tensor

- func: adaptive_avg_pool1d(Tensor self, int[1] output_size) -> Tensor
  npu_dispatch:
    NPU: adaptive_avg_pool1d_npu

# Return: (Tensor output, Tensor indices)
- func: adaptive_max_pool1d(Tensor self, int[1] output_size) -> (Tensor, Tensor)

- func: add.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  dispatch:
    CPU: add
    CUDA: add
    SparseCPU: add_sparse
    SparseCUDA: add_sparse
    MkldnnCPU: mkldnn_add
  npu_dispatch:
    NPU: add_npu
  supports_named_tensor: True

- func: add_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> Tensor(a!)
  variants: method
  dispatch:
    CPU: add_
    CUDA: add_
    SparseCPU: add_sparse_
    SparseCUDA: add_sparse_
    MkldnnCPU: mkldnn_add_
  npu_dispatch:
    NPU: add_npu_
  supports_named_tensor: True

- func: add.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: add_out
    CUDA: add_out
    SparseCPU: add_out_sparse_cpu
    SparseCUDA: add_out_sparse_cuda
    MkldnnCPU: mkldnn_add_out
  npu_dispatch:
    NPU: add_out_npu
  supports_named_tensor: True

# For C++ only, until we have conversion from C++ numbers to Tensor
- func: add.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  supports_named_tensor: True
  npu_dispatch:
    NPU: add_npu

- func: add_.Scalar(Tensor(a!) self, Scalar other, Scalar alpha=1) -> Tensor(a!)
  variants: method
  supports_named_tensor: True
  npu_dispatch:
    NPU: add_npu_

- func: addmv(Tensor self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  dispatch:
    CPU: legacy::cpu::_th_addmv
    CUDA: legacy::cuda::_th_addmv
  supports_named_tensor: True
  npu_dispatch:
    NPU: addmv_npu

- func: addmv_(Tensor(a!) self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)
  variants: function, method
  dispatch:
    CPU: legacy::cpu::_th_addmv_
    CUDA: legacy::cuda::_th_addmv_
  supports_named_tensor: True
  npu_dispatch:
    NPU: addmv_npu_

- func: addmv.out(Tensor self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: legacy::cpu::_th_addmv_out
    CUDA: legacy::cuda::_th_addmv_out
  supports_named_tensor: True
  npu_dispatch:
    NPU: addmv_out_npu

- func: addr(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  npu_dispatch:
    NPU: addr_npu

- func: addr_(Tensor(a!) self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)
  variants: method
  npu_dispatch:
    NPU: addr_npu_

- func: addr.out(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
  npu_dispatch:
    NPU: addr_out_npu

- func: affine_grid_generator(Tensor theta, int[] size, bool align_corners) -> Tensor
  variants: function
  npu_dispatch:
    NPU: affine_grid_generator_npu

- func: affine_grid_generator_backward(Tensor grad, int[] size, bool align_corners) -> Tensor
  variants: function
  npu_dispatch:
    NPU: affine_grid_generator_backward_npu

- func: all.dim(Tensor self, int dim, bool keepdim=False) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  npu_dispatch:
    NPU: all_npu

- func: all.out(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
  npu_dispatch:
    NPU: all_out_npu

- func: all.dimname(Tensor self, Dimname dim, bool keepdim=False) -> Tensor
  variants: function, method

- func: all.dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)

- func: allclose(Tensor self, Tensor other, float rtol=1e-05, float atol=1e-08, bool equal_nan=False) -> bool
  use_c10_dispatcher: full
  variants: function, method

- func: any.dim(Tensor self, int dim, bool keepdim=False) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  npu_dispatch:
    NPU: any_npu

- func: any.out(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
  npu_dispatch:
    NPU: any_out_npu

- func: any.dimname(Tensor self, Dimname dim, bool keepdim=False) -> Tensor
  variants: function, method

- func: any.dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)

- func: arange(Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  npu_dispatch:
    NPU: arange_npu

- func: arange.start(Scalar start, Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  npu_dispatch:
    NPU: arange_npu

- func: arange.start_step(Scalar start, Scalar end, Scalar step, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  npu_dispatch:
    NPU: arange_npu

- func: arange.out(Scalar end, *, Tensor(a!) out) -> Tensor(a!)
  npu_dispatch:
    NPU: arange_out_npu

- func: arange.start_out(Scalar start, Scalar end, Scalar step=1, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: arange_cpu_out
    CUDA: arange_cuda_out
  npu_dispatch:
    NPU: arange_out_npu

# This function is a temporary hack to allow tracing of arange like constructs with dynamic
# bounds on arange.  Normal arange is not traceable because it does not take any tensor inputs;
# if the range you need is based on another tensor, calling this function directly will
# preserve tracing.  Get rid of this when arange can directly take tensors for bounds
# (so that it can be traced directly).
- func: _dim_arange(Tensor like, int dim) -> Tensor
  use_c10_dispatcher: full
  npu_dispatch:
    NPU: _dim_arange_npu

- func: argmax(Tensor self, int? dim=None, bool keepdim=False) -> Tensor
  variants: function, method
  dispatch:
    CPU: argmax
    CUDA: argmax
  npu_dispatch:
    NPU: argmax_npu

- func: argmin(Tensor self, int? dim=None, bool keepdim=False) -> Tensor
  variants: function, method
  dispatch:
    CPU: argmin
    CUDA: argmin
  npu_dispatch:
    NPU: argmin_npu

- func: as_strided(Tensor(a) self, int[] size, int[] stride, int? storage_offset=None) -> Tensor(a)
  variants: function, method
  dispatch:
    CPU: as_strided_tensorimpl
    CUDA: as_strided_tensorimpl
    QuantizedCPU: as_strided_qtensorimpl
  npu_dispatch:
    NPU: as_strided_npu
  device_guard: False
  supports_named_tensor: True

- func: as_strided_(Tensor(a!) self, int[] size, int[] stride, int? storage_offset=None) -> Tensor(a!)
  variants: function, method
  device_guard: False
  npu_dispatch:
    NPU: as_strided_npu_

- func: asin(Tensor self) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: asin_npu

- func: asin_(Tensor(a!) self) -> Tensor(a!)
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: asin_npu_

- func: asin.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  npu_dispatch:
    NPU: asin_out_npu

- func: atan(Tensor self) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: atan_npu

- func: atan_(Tensor(a!) self) -> Tensor(a!)
  supports_named_tensor: True
  variants: function, method
  dispatch:
    CPU: _atan__cpu
    CUDA: _atan__cuda
  npu_dispatch:
    NPU: atan_npu_

- func: atan.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: _atan_out_cpu
    CUDA: _atan_out_cuda
  npu_dispatch:
    NPU: atan_out_npu

- func: baddbmm(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  dispatch:
    CPU: baddbmm_cpu
    CUDA: baddbmm_cuda
  npu_dispatch:
    NPU: baddbmm_npu

- func: baddbmm_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)
  variants: method
  dispatch:
    CPU: baddbmm__cpu
    CUDA: baddbmm__cuda
  npu_dispatch:
    NPU: baddbmm_npu_

- func: _baddbmm_mkl_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)
  variants: function

- func: baddbmm.out(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
  variants: function
  dispatch:
    CPU: baddbmm_out_cpu
    CUDA: baddbmm_out_cuda
  npu_dispatch:
    NPU: baddbmm_out_npu

- func: bartlett_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  npu_dispatch:
    NPU: bartlett_window_npu

- func: bartlett_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  npu_dispatch:
    NPU: bartlett_window_npu

- func: batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, bool cudnn_enabled) -> Tensor
  npu_dispatch:
    NPU: batch_norm_npu_

- func: quantized_batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor mean, Tensor var, float eps, float output_scale, int output_zero_point) -> Tensor
  requires_tensor: True
  dispatch:
    QuantizedCPU: quantized_batch_norm

- func: _batch_norm_impl_index(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, bool cudnn_enabled) -> (Tensor, Tensor, Tensor, Tensor, int)
  npu_dispatch:
    NPU: _batch_norm_impl_index_npu

- func: _batch_norm_impl_index_backward(int impl_index, Tensor input, Tensor grad_output, Tensor? weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var_transform, bool train, float eps, bool[3] output_mask, Tensor reservedSpace) -> (Tensor, Tensor, Tensor)
  npu_dispatch:
    NPU: _batch_norm_impl_index_backward_npu

# Sample bernoulli with values in `self` as probability.
- func: bernoulli(Tensor self, *, Generator? generator=None) -> Tensor
  variants: function, method
  supports_named_tensor: True
  npu_dispatch:
    NPU: bernoulli_npu

- func: bernoulli.out(Tensor self, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)
  variants: function
  supports_named_tensor: True

- func: bernoulli_.Tensor(Tensor(a!) self, Tensor p, *, Generator? generator=None) -> Tensor(a!)
  variants: method
  dispatch:
    CPU: bernoulli_tensor_cpu_
    CUDA: bernoulli_tensor_cuda_
  supports_named_tensor: True
  npu_dispatch:
    NPU: bernoulli_npu_

- func: bernoulli_.float(Tensor(a!) self, float p=0.5, *, Generator? generator=None) -> Tensor(a!)
  variants: method
  dispatch:
    CPU: bernoulli_scalar_cpu_
    CUDA: bernoulli_scalar_cuda_
  supports_named_tensor: True
  npu_dispatch:
    NPU: bernoulli_npu_

# This out-of-place version isn't used explicitly, but needed by jit.
# There is no default valid on `p` here because it would introduce ambiguity
# with `bernoulli(Tensor self, *, Generator? generator=None)` declaration.
- func: bernoulli.p(Tensor self, float p, *, Generator? generator=None) -> Tensor
  variants: function, method

- func: bilinear(Tensor input1, Tensor input2, Tensor weight, Tensor? bias) -> Tensor

- func: binary_cross_entropy(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean) -> Tensor
  python_module: nn
  variants: function
  dispatch:
    CPU: binary_cross_entropy_cpu
    CUDA: binary_cross_entropy_cuda
  npu_dispatch:
    NPU: binary_cross_entropy_npu

- func: binary_cross_entropy.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  variants: function
  dispatch:
    CPU: binary_cross_entropy_out_cpu
    CUDA: binary_cross_entropy_out_cuda
  npu_dispatch:
    NPU: binary_cross_entropy_out_npu

- func: binary_cross_entropy_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean) -> Tensor
  python_module: nn
  variants: function
  dispatch:
    CPU: binary_cross_entropy_backward_cpu
    CUDA: binary_cross_entropy_backward_cuda
  npu_dispatch:
    NPU: binary_cross_entropy_backward_npu

- func: binary_cross_entropy_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  variants: function
  dispatch:
    CPU: binary_cross_entropy_backward_out_cpu
    CUDA: binary_cross_entropy_backward_out_cuda
  npu_dispatch:
    NPU: binary_cross_entropy_backward_out_npu

- func: binary_cross_entropy_with_logits(Tensor self, Tensor target, Tensor? weight=None, Tensor? pos_weight=None, int reduction=Mean) -> Tensor
  variants: function
  npu_dispatch:
    NPU: binary_cross_entropy_with_logits_npu

- func: binary_cross_entropy_with_logits_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, Tensor? pos_weight=None, int reduction=Mean) -> Tensor
  variants: function
  npu_dispatch:
    NPU: binary_cross_entropy_with_logits_backward_npu

- func: bincount(Tensor self, Tensor? weights=None, int minlength=0) -> Tensor
  variants: function, method
  dispatch:
    CPU: _bincount_cpu
    CUDA: _bincount_cuda
  npu_dispatch:
    NPU: bincount_npu

- func: bitwise_not(Tensor self) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: bitwise_not_npu

- func: bitwise_not_(Tensor(a!) self) -> Tensor(a!)
  supports_named_tensor: True
  variants: method
  npu_dispatch:
    NPU: bitwise_not_npu_

- func: bitwise_not.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: bitwise_not_out
    CUDA: bitwise_not_out
  npu_dispatch:
    NPU: bitwise_not_out_npu

- func: logical_not(Tensor self) -> Tensor
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: logical_not_npu

- func: logical_not_(Tensor(a!) self) -> Tensor(a!)
  supports_named_tensor: True
  variants: method
  npu_dispatch:
    NPU: logical_not_npu_

- func: logical_not.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: logical_not_out
    CUDA: logical_not_out
  npu_dispatch:
    NPU: logical_not_out_npu

- func: logical_xor(Tensor self, Tensor other) -> Tensor
  variants: function, method
  supports_named_tensor: True

- func: logical_xor_(Tensor(a!) self, Tensor other) -> Tensor(a!)
  variants: method
  supports_named_tensor: True

- func: logical_xor.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: logical_xor_out
    CUDA: logical_xor_out
  supports_named_tensor: True

- func: logical_and(Tensor self, Tensor other) -> Tensor
  variants: function, method
  supports_named_tensor: True
  npu_dispatch:
    NPU: logical_and_npu

- func: logical_and_(Tensor(a!) self, Tensor other) -> Tensor(a!)
  variants: method
  supports_named_tensor: True
  npu_dispatch:
    NPU: logical_and_npu_

- func: logical_and.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: logical_and_out
    CUDA: logical_and_out
  supports_named_tensor: True
  npu_dispatch:
    NPU: logical_and_out_npu

- func: logical_or(Tensor self, Tensor other) -> Tensor
  variants: function, method
  supports_named_tensor: True
  npu_dispatch:
    NPU: logical_or_npu

- func: logical_or_(Tensor(a!) self, Tensor other) -> Tensor(a!)
  variants: method
  supports_named_tensor: True
  npu_dispatch:
    NPU: logical_or_npu_

- func: logical_or.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: logical_or_out
    CUDA: logical_or_out
  npu_dispatch:
    NPU: logical_or_out_npu
  supports_named_tensor: True

- func: blackman_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  npu_dispatch:
    NPU: blackman_window_npu

- func: blackman_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  npu_dispatch:
    NPU: blackman_window_npu

- func: bmm(Tensor self, Tensor mat2) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  dispatch:
    CPU: bmm_cpu
    CUDA: bmm_cuda
  supports_named_tensor: True
  npu_dispatch:
    NPU: bmm_npu

- func: bmm.out(Tensor self, Tensor mat2, *, Tensor(a!) out) -> Tensor(a!)
  variants: function
  dispatch:
    CPU: bmm_out_cpu
    CUDA: bmm_out_cuda
  supports_named_tensor: True
  npu_dispatch:
    NPU: bmm_out_npu

- func: broadcast_tensors(Tensor[] tensors) -> Tensor[]
  device_guard: False

- func: cat(Tensor[] tensors, int dim=0) -> Tensor
  supports_named_tensor: True
  npu_dispatch:
    NPU: cat_npu

- func: cat.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  npu_dispatch:
    NPU: cat_out_npu

- func: cat.names(Tensor[] tensors, Dimname dim) -> Tensor
  supports_named_tensor: True
  npu_dispatch:
    NPU: cat_npu

- func: cat.names_out(Tensor[] tensors, Dimname dim, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  npu_dispatch:
    NPU: cat_out_npu

- func: ceil(Tensor self) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: ceil_npu

- func: ceil_(Tensor(a!) self) -> Tensor(a!)
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: ceil_npu_

- func: ceil.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: ceil_out
    CUDA: ceil_out
  npu_dispatch:
    NPU: ceil_out_npu

- func: chain_matmul(Tensor[] matrices) -> Tensor
  variants: function

- func: chunk(Tensor(a) self, int chunks, int dim=0) -> Tensor(a)[]
  variants: function, method
  device_guard: False
  supports_named_tensor: True

- func: clamp(Tensor self, Scalar? min=None, Scalar? max=None) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: function, method
  dispatch:
    CPU: clamp
    CUDA: clamp
    QuantizedCPU: quantized_clamp
  npu_dispatch:
    NPU: clamp_npu

- func: clamp_(Tensor(a!) self, Scalar? min=None, Scalar? max=None) -> Tensor(a!)
  supports_named_tensor: True
  variants: function, method
  dispatch:
    CPU: _clamp__cpu
    CUDA: _clamp__cuda
  npu_dispatch:
    NPU: clamp_npu_

- func: clamp.out(Tensor self, Scalar? min=None, Scalar? max=None, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: _clamp_out_cpu
    CUDA: _clamp_out_cuda
  npu_dispatch:
    NPU: clamp_out_npu

- func: clamp_max(Tensor self, Scalar max) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: clamp_max_npu

- func: clamp_max_(Tensor(a!) self, Scalar max) -> Tensor(a!)
  supports_named_tensor: True
  variants: function, method
  dispatch:
    CPU: _clamp_max__cpu
    CUDA: _clamp_max__cuda
  npu_dispatch:
    NPU: clamp_max_npu_

- func: clamp_max.out(Tensor self, Scalar max, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: _clamp_max_out_cpu
    CUDA: _clamp_max_out_cuda
  npu_dispatch:
    NPU: clamp_max_out_npu

- func: clamp_min(Tensor self, Scalar min) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: clamp_min_npu

- func: clamp_min_(Tensor(a!) self, Scalar min) -> Tensor(a!)
  supports_named_tensor: True
  variants: function, method
  dispatch:
    CPU: _clamp_min__cpu
    CUDA: _clamp_min__cuda
  npu_dispatch:
    NPU: clamp_min_npu_

- func: clamp_min.out(Tensor self, Scalar min, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: _clamp_min_out_cpu
    CUDA: _clamp_min_out_cuda
  npu_dispatch:
    NPU: clamp_min_out_npu

- func: cudnn_is_acceptable(Tensor self) -> bool
  use_c10_dispatcher: full
  device_guard: False

- func: constant_pad_nd(Tensor self, int[] pad, Scalar value=0) -> Tensor
  variants: function
  npu_dispatch:
    NPU: constant_pad_nd_npu

- func: contiguous(Tensor self, *, MemoryFormat memory_format=contiguous_format) -> Tensor
  variants: method
  supports_named_tensor: True
  npu_dispatch:
    NPU: contiguous_npu

- func: convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups) -> Tensor
  npu_dispatch:
    NPU: convolution_npu

- func: convolution_overrideable(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups) -> Tensor

- func: convolution_backward_overrideable(Tensor grad_output, Tensor input, Tensor weight, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)

- func: _convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool benchmark, bool deterministic, bool cudnn_enabled) -> Tensor
  npu_dispatch:
    NPU: _convolution_npu

- func: _convolution_nogroup(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding) -> Tensor
  npu_dispatch:
    NPU: _convolution_nogroup_npu

- func: _convolution_double_backward(Tensor? ggI, Tensor? ggW, Tensor? ggb, Tensor gO, Tensor weight, Tensor self, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool benchmark, bool deterministic, bool cudnn_enabled, bool[3] output_mask) -> (Tensor, Tensor, Tensor)

- func: conv1d(Tensor input, Tensor weight, Tensor? bias=None, int[1] stride=1, int[1] padding=0, int[1] dilation=1, int groups=1) -> Tensor

- func: conv2d(Tensor input, Tensor weight, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1, int groups=1) -> Tensor
  npu_dispatch:
    NPU: conv2d_npu_

- func: conv3d(Tensor input, Tensor weight, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] dilation=1, int groups=1) -> Tensor
  npu_dispatch:
    NPU: _conv3d_npu

- func: conv_tbc(Tensor self, Tensor weight, Tensor bias, int pad=0) -> Tensor
  use_c10_dispatcher: full
  npu_dispatch:
    NPU: conv_tbc_npu

- func: conv_tbc_backward(Tensor self, Tensor input, Tensor weight, Tensor bias, int pad) -> (Tensor, Tensor, Tensor)
  npu_dispatch:
    NPU: conv_tbc_backward_npu

# NB: we inherit the goofy argument order from PyTorch torch.nn.functional
- func: conv_transpose1d(Tensor input, Tensor weight, Tensor? bias=None, int[1] stride=1, int[1] padding=0, int[1] output_padding=0, int groups=1, int[1] dilation=1) -> Tensor

- func: conv_transpose2d.input(Tensor input, Tensor weight, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] output_padding=0, int groups=1, int[2] dilation=1) -> Tensor
  npu_dispatch:
    NPU: conv_transpose2d_npu_

- func: conv_transpose3d.input(Tensor input, Tensor weight, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] output_padding=0, int groups=1, int[3] dilation=1) -> Tensor
  npu_dispatch:
    NPU: conv_transpose3d_npu_

- func: copy_(Tensor(a!) self, Tensor src, bool non_blocking=False) -> Tensor(a!)
  manual_kernel_registration: True
  variants: method
  device_guard: False
  supports_named_tensor: True
  npu_dispatch:
    NPU: copy_npu_

- func: _copy_from(Tensor self, Tensor dst, bool non_blocking=False) -> Tensor
  use_c10_dispatcher: full
  dispatch: {}

- func: cos(Tensor self) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: cos_npu

- func: cos_(Tensor(a!) self) -> Tensor(a!)
  supports_named_tensor: True
  variants: function, method
  dispatch:
    CPU: _cos__cpu
    CUDA: _cos__cuda
  npu_dispatch:
    NPU: cos_npu_

- func: cos.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: _cos_out_cpu
    CUDA: _cos_out_cuda
  npu_dispatch:
    NPU: cos_out_npu

- func: cosh(Tensor self) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: cosh_npu

- func: cosh_(Tensor(a!) self) -> Tensor(a!)
  supports_named_tensor: True
  variants: function, method
  dispatch:
    CPU: _cosh__cpu
    CUDA: _cosh__cuda
  npu_dispatch:
      NPU: cosh_npu_

- func: cosh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: _cosh_out_cpu
    CUDA: _cosh_out_cuda
  npu_dispatch:
    NPU: cosh_out_npu

- func: cosine_embedding_loss(Tensor input1, Tensor input2, Tensor target, float margin=0.0, int reduction=Mean) -> Tensor
  use_c10_dispatcher: full

- func: cudnn_affine_grid_generator(Tensor theta, int N, int C, int H, int W) -> Tensor grid
  use_c10_dispatcher: full
  dispatch:
    CUDA: cudnn_affine_grid_generator_forward

# TODO: Why do I have to call this grad?!
- func: cudnn_affine_grid_generator_backward(Tensor grad, int N, int C, int H, int W) -> Tensor grad_theta
  use_c10_dispatcher: full
  dispatch:
    CUDA: cudnn_affine_grid_generator_backward

- func: cudnn_batch_norm(Tensor input, Tensor weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float exponential_average_factor, float epsilon) -> (Tensor, Tensor, Tensor, Tensor)
  dispatch:
    CUDA: cudnn_batch_norm

# NB: You can only use this if you used cudnn_batch_norm training=True
- func: cudnn_batch_norm_backward(Tensor input, Tensor grad_output, Tensor weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var, float epsilon, Tensor reserveSpace) -> (Tensor, Tensor, Tensor)
  dispatch:
    CUDA: cudnn_batch_norm_backward

- func: cudnn_convolution.deprecated(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor
  dispatch:
    CUDA: cudnn_convolution_deprecated

- func: cudnn_convolution(Tensor self, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor
  dispatch:
    CUDA: cudnn_convolution

- func: cudnn_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor
  dispatch:
    CUDA: cudnn_convolution_backward_input

- func: cudnn_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[2] output_mask) -> (Tensor, Tensor)
  dispatch:
    CUDA: cudnn_convolution_backward

- func: cudnn_convolution_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor
  dispatch:
    CUDA: cudnn_convolution_backward_weight

- func: cudnn_convolution_transpose.deprecated(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor
  dispatch:
    CUDA: cudnn_convolution_transpose_deprecated

- func: cudnn_convolution_transpose(Tensor self, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor
  dispatch:
    CUDA: cudnn_convolution_transpose

# NB: output_padding not strictly needed here, but it's helpful for the float
# backwards
- func: cudnn_convolution_transpose_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[2] output_mask) -> (Tensor, Tensor)
  dispatch:
    CUDA: cudnn_convolution_transpose_backward

- func: cudnn_convolution_transpose_backward_input(Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor
  dispatch:
    CUDA: cudnn_convolution_transpose_backward_input

- func: cudnn_convolution_transpose_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor
  dispatch:
    CUDA: cudnn_convolution_transpose_backward_weight

- func: npu_convolution_transpose(Tensor input, Tensor weight, Tensor? bias, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups) -> Tensor
  npu_dispatch_only:
    NPU: npu_convolution_transpose

- func: npu_conv_transpose2d(Tensor input, Tensor weight, Tensor? bias, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups) -> Tensor
  npu_dispatch_only:
    NPU: conv_transpose2d_npu

- func: npu_convolution_transpose_backward(Tensor input, Tensor grad_output, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
  npu_dispatch_only:
    NPU: npu_convolution_transpose_backward

- func: npu_conv_transpose2d_backward(Tensor input, Tensor grad_output, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
  npu_dispatch_only:
    NPU: conv_transpose2d_backward_npu

- func: npu_conv_transpose3d_backward(Tensor input, Tensor grad_output, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
  npu_dispatch_only:
    NPU: conv_transpose3d_backward_npu

- func: npu_convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, int groups) -> Tensor
  npu_dispatch_only:
    NPU: npu_convolution

- func: npu_convolution_backward(Tensor input, Tensor grad_output, Tensor weight, int[] stride, int[] padding, int[] dilation, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
  npu_dispatch_only:
    NPU: npu_convolution_backward

- func: npu_convolution_double_backward(Tensor? ggI, Tensor? ggW, Tensor? ggb, Tensor input, Tensor gO, Tensor weight, int[] stride, int[] padding, int[] dilation, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
  npu_dispatch_only:
    NPU: npu_convolution_double_backward

- func: npu_conv2d(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, int groups) -> Tensor
  npu_dispatch_only:
    NPU: conv2d_npu

- func: npu_conv2d.out(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, int groups, *, Tensor(a!) out) -> Tensor(a!)
  npu_dispatch_only:
    NPU: conv2d_out_npu

- func: npu_conv2d_backward(Tensor input, Tensor grad_output, Tensor weight, int[] stride, int[] padding, int[] dilation, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
  npu_dispatch_only:
    NPU: conv2d_backward_npu

- func: npu_conv3d(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, int groups) -> Tensor
  npu_dispatch_only:
    NPU: conv3d_npu

- func: npu_conv3d.out(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, int groups, *, Tensor(a!) out) -> Tensor(a!)
  npu_dispatch_only:
    NPU: conv3d_out_npu

- func: npu_conv3d_backward(Tensor input, Tensor grad, Tensor weight, int[] stride, int[] padding, int[] dilation, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
  npu_dispatch_only:
    NPU: conv3d_backward_npu

# NB: input is special cased in a way I don't quite understand
- func: cudnn_grid_sampler(Tensor self, Tensor grid) -> Tensor output
  use_c10_dispatcher: full
  dispatch:
    CUDA: cudnn_grid_sampler_forward

- func: cudnn_grid_sampler_backward(Tensor self, Tensor grid, Tensor grad_output) -> (Tensor grad_self, Tensor grad_grid)
  dispatch:
    CUDA: cudnn_grid_sampler_backward

- func: cummax(Tensor self, int dim) -> (Tensor values, Tensor indices)
  supports_named_tensor: True
  variants: function, method

- func: cummax.out(Tensor self, int dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
  supports_named_tensor: True

- func: cummax.dimname(Tensor self, Dimname dim) -> (Tensor values, Tensor indices)
  supports_named_tensor: True
  variants: function, method

- func: cummax.dimname_out(Tensor self, Dimname dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
  supports_named_tensor: True

- func: _cummax_helper(Tensor self, Tensor(a!) values, Tensor(b!) indices, int dim) -> ()
  variants: function
  dispatch:
    CPU: cummax_helper_cpu
    CUDA: cummax_helper_cuda
  npu_dispatch:
    NPU: cummax_helper_npu

- func: cummin(Tensor self, int dim) -> (Tensor values, Tensor indices)
  supports_named_tensor: True
  variants: function, method

- func: cummin.out(Tensor self, int dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
  supports_named_tensor: True

- func: cummin.dimname(Tensor self, Dimname dim) -> (Tensor values, Tensor indices)
  supports_named_tensor: True
  variants: function, method

- func: cummin.dimname_out(Tensor self, Dimname dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
  supports_named_tensor: True

- func: _cummin_helper(Tensor self, Tensor(a!) values, Tensor(b!) indices, int dim) -> ()
  variants: function
  dispatch:
    CPU: cummin_helper_cpu
    CUDA: cummin_helper_cuda
  npu_dispatch:
    NPU: cummin_helper_npu

- func: cumprod(Tensor self, int dim, *, ScalarType? dtype=None) -> Tensor
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: cumprod_npu

- func: cumprod.out(Tensor self, int dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  npu_dispatch:
    NPU: cumprod_out_npu

- func: cumprod.dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: cumprod_npu

- func: cumprod.dimname_out(Tensor self, Dimname dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  npu_dispatch:
    NPU: cumprod_out_npu

- func: cumsum(Tensor self, int dim, *, ScalarType? dtype=None) -> Tensor
  supports_named_tensor: True
  variants: function, method

- func: cumsum.out(Tensor self, int dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True

- func: cumsum.dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor
  supports_named_tensor: True
  variants: function, method

- func: cumsum.dimname_out(Tensor self, Dimname dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True

- func: ctc_loss.IntList(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank=0, int reduction=Mean, bool zero_infinity=False) -> Tensor
  npu_dispatch:
    NPU: ctc_loss_npu

# convenience function that converts to intlists for you
- func: ctc_loss.Tensor(Tensor log_probs, Tensor targets, Tensor input_lengths, Tensor target_lengths, int blank=0, int reduction=Mean, bool zero_infinity=False) -> Tensor
  use_c10_dispatcher: full
  npu_dispatch:
    NPU: ctc_loss_npu

- func: _ctc_loss(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank=0, bool zero_infinity=False) -> (Tensor, Tensor)
  dispatch:
    CPU: ctc_loss_cpu
    CUDA: ctc_loss_gpu
  npu_dispatch:
    NPU: ctc_loss_npu

- func: _ctc_loss_backward(Tensor grad, Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, Tensor neg_log_likelihood, Tensor log_alpha, int blank, bool zero_infinity=False) -> Tensor
  dispatch:
    CPU: ctc_loss_backward_cpu
    CUDA: ctc_loss_backward_gpu
  npu_dispatch:
    NPU: ctc_loss_backward_npu

- func: det(Tensor self) -> Tensor
  use_c10_dispatcher: full
  variants: function, method

- func: diag_embed(Tensor self, int offset=0, int dim1=-2, int dim2=-1) -> Tensor
  use_c10_dispatcher: full
  variants: function, method

- func: diagflat(Tensor self, int offset=0) -> Tensor
  use_c10_dispatcher: full
  variants: function, method

- func: diagonal(Tensor(a) self, int offset=0, int dim1=0, int dim2=1) -> Tensor(a)
  variants: function, method
  supports_named_tensor: True

- func: diagonal.Dimname(Tensor(a) self, *, Dimname outdim, Dimname dim1, Dimname dim2, int offset=0) -> Tensor(a)
  variants: function, method
  supports_named_tensor: True

- func: fill_diagonal_(Tensor(a!) self, Scalar fill_value, bool wrap=False) -> Tensor(a!)
  variants: method
  npu_dispatch:
    NPU: fill_diagonal_npu_

- func: div.Tensor(Tensor self, Tensor other) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  dispatch:
    CPU: div
    CUDA: div
    SparseCPU: div_sparse
    SparseCUDA: div_sparse
  npu_dispatch:
    NPU: div_npu
  supports_named_tensor: True

- func: div_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  variants: method
  dispatch:
    CPU: div_
    CUDA: div_
    SparseCPU: div_sparse_
    SparseCUDA: div_sparse_
  npu_dispatch:
    NPU: div_npu_
  supports_named_tensor: True

- func: div.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: div_out
    CUDA: div_out
    SparseCPU: div_out_sparse_zerodim
    SparseCUDA: div_out_sparse_zerodim
  npu_dispatch:
    NPU: div_out_npu
  supports_named_tensor: True

# For C++ only, until we have conversion from C++ numbers to Tensor
- func: div.Scalar(Tensor self, Scalar other) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  supports_named_tensor: True
  npu_dispatch:
    NPU: div_npu

- func: div_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  variants: method
  supports_named_tensor: True
  npu_dispatch:
    NPU: div_npu_

- func: dot(Tensor self, Tensor tensor) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  dispatch:
    CPU: legacy::cpu::_th_dot
    CUDA: legacy::cuda::_th_dot
  npu_dispatch:
    NPU: dot_npu
  supports_named_tensor: True

- func: dot.out(Tensor self, Tensor tensor, *, Tensor(a!) out) -> Tensor(a!)
  npu_dispatch:
    NPU: dot_out_npu
  supports_named_tensor: True

- func: einsum(str equation, Tensor[] tensors) -> Tensor

- func: embedding(Tensor weight, Tensor indices, int padding_idx=-1, bool scale_grad_by_freq=False, bool sparse=False) -> Tensor
  use_c10_dispatcher: full
  npu_dispatch:
    NPU: embedding_npu

- func: embedding_backward(Tensor grad, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq, bool sparse) -> Tensor
  use_c10_dispatcher: full
  npu_dispatch:
    NPU: embedding_backward_npu

- func: embedding_dense_backward(Tensor grad_output, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq) -> Tensor
  use_c10_dispatcher: full
  dispatch:
    CPU: embedding_dense_backward_cpu
    CUDA: embedding_dense_backward_cuda
  npu_dispatch:
    NPU: embedding_dense_backward_npu

- func: embedding_renorm_(Tensor(a!) self, Tensor indices, float max_norm, float norm_type) -> Tensor(a!)
  dispatch:
    CPU: embedding_renorm_cpu_
    CUDA: embedding_renorm_cuda_
  npu_dispatch:
    NPU: embedding_renorm_npu_

- func: embedding_sparse_backward(Tensor grad, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq) -> Tensor
  use_c10_dispatcher: full

# NOTE [ embedding_bag Native Functions ]
# The `_embedding_bag.*` variants assume that input tensors except for `weight`,
# e.g. `indices` and `offsets` (and `offset2bag`), are contiguous.
# We really only need to enforce this for `_embedding_bag` (the forward) because
# the backward inputs are the same as forward ones.
# The above `embedding_bag` wrapper is created to achieve this, e.g.,
# applying indices = indices.contiguous().
# The backward functions apply a check that these input tensors are contiguous.

- func: embedding_bag(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None, bool include_last_offset=False) -> (Tensor, Tensor, Tensor, Tensor)

- func: _embedding_bag(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None, bool include_last_offset=False) -> (Tensor, Tensor, Tensor, Tensor)
  dispatch:
    CPU: _embedding_bag_cpu
    CUDA: _embedding_bag_cuda
  npu_dispatch:
    NPU: _embedding_bag_npu

- func: _embedding_bag_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, Tensor maximum_indices, int num_weights, bool scale_grad_by_freq, int mode, bool sparse, Tensor? per_sample_weights) -> Tensor
  npu_dispatch:
    NPU: _embedding_bag_backward_npu

- func: _embedding_bag_sparse_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, int num_weights, bool scale_grad_by_freq, int mode, Tensor? per_sample_weights) -> Tensor

- func: _embedding_bag_dense_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, Tensor maximum_indices, int num_weights, bool scale_grad_by_freq, int mode, Tensor? per_sample_weights) -> Tensor
  dispatch:
    CPU: _embedding_bag_dense_backward_cpu
    CUDA: _embedding_bag_dense_backward_cuda

- func: _embedding_bag_per_sample_weights_backward(Tensor grad, Tensor weight, Tensor indices, Tensor offsets, Tensor offset2bag, int mode) -> Tensor
  use_c10_dispatcher: full
  dispatch:
    CPU: _embedding_bag_per_sample_weights_backward_cpu
    CUDA: _embedding_bag_per_sample_weights_backward_cuda

- func: empty.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor
  device_guard: False

- func: empty.memory_format(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor
  dispatch:
    CPU: empty_cpu
    CUDA: empty_cuda
    MkldnnCPU: empty_mkldnn
    SparseCPU: empty_sparse
    SparseCUDA: empty_sparse
  npu_dispatch:
    NPU: empty_npu

- func: new_empty(Tensor self, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  variants: method

- func: new_full(Tensor self, int[] size, Scalar fill_value, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  variants: method

- func: new_zeros(Tensor self, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  variants: method

# other overrides are to provide a more helpful error message that dtype is required
- func: _empty_affine_quantized(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, float scale=1, int zero_point=0, MemoryFormat? memory_format=contiguous_format) -> Tensor
  dispatch:
    CPU: empty_affine_quantized_other_backends_stub
    QuantizedCPU: empty_affine_quantized_cpu

# it's a factory function receiving a tensor argument, thus overriding explicitly
# other overrides are to provide a more helpful error message that dtype is required
- func: _empty_per_channel_affine_quantized(int[] size, *, Tensor scales, Tensor zero_points, int axis, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=contiguous_format) -> Tensor
  category_override: factory
  dispatch:
    CPU: empty_per_channel_affine_quantized_other_backends_stub
    QuantizedCPU: empty_per_channel_affine_quantized_cpu

- func: resize_(Tensor(a!) self, int[] size, *, MemoryFormat? memory_format=None) -> Tensor(a!)
  manual_kernel_registration: True
  supports_named_tensor: True
  variants: method
  device_guard: False
  npu_dispatch:
    NPU: resize_npu_

- func: empty.out(int[] size, *, MemoryFormat? memory_format=None, Tensor(a!) out) -> Tensor(a!)
  device_guard: False

- func: empty_like(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor
  device_guard: False
  supports_named_tensor: True
  npu_dispatch:
    NPU: empty_like_npu

- func: empty_strided(int[] size, int[] stride, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  dispatch:
    CPU: empty_strided_cpu
    CUDA: empty_strided_cuda
  npu_dispatch:
    NPU: empty_strided_npu

- func: erf(Tensor self) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: erf_npu

- func: erf_(Tensor(a!) self) -> Tensor(a!)
  supports_named_tensor: True
  variants: function, method
  dispatch:
    CPU: _erf__cpu
    CUDA: _erf__cuda
  npu_dispatch:
    NPU: erf_npu_


- func: erf.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: _erf_out_cpu
    CUDA: _erf_out_cuda
  npu_dispatch:
    NPU: erf_out_npu


- func: erfc(Tensor self) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: erfc_npu

- func: erfc_(Tensor(a!) self) -> Tensor(a!)
  supports_named_tensor: True
  variants: function, method
  dispatch:
    CPU: _erfc__cpu
    CUDA: _erfc__cuda
  npu_dispatch:
    NPU: erfc_npu_

- func: erfc.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: _erfc_out_cpu
    CUDA: _erfc_out_cuda
  npu_dispatch:
    NPU: erfc_out_npu

- func: exp(Tensor self) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: exp_npu

- func: exp_(Tensor(a!) self) -> Tensor(a!)
  supports_named_tensor: True
  variants: function, method
  dispatch:
    CPU: _exp__cpu
    CUDA: _exp__cuda
  npu_dispatch:
    NPU: exp_npu_

- func: exp.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: _exp_out_cpu
    CUDA: _exp_out_cuda
  npu_dispatch:
    NPU: exp_out_npu

- func: expm1(Tensor self) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: expm1_npu

- func: expm1_(Tensor(a!) self) -> Tensor(a!)
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: expm1_npu_

- func: expm1.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: expm1_out
    CUDA: expm1_out
  npu_dispatch:
    NPU: expm1_out_npu

- func: expand(Tensor(a) self, int[] size, *, bool implicit=False) -> Tensor(a)
  variants: method # This is method-only to match the previous tensor API. In the future we could make this a function too.
  device_guard: False
  supports_named_tensor: True

- func: expand_as(Tensor self, Tensor other) -> Tensor
  use_c10_dispatcher: full
  variants: method # This is method-only to match the previous tensor API. In the future we could make this a function too.
  device_guard: False

- func: eye(int n, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  npu_dispatch:
    NPU: eye_npu

- func: eye.m(int n, int m, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  npu_dispatch:
    NPU: eye_npu

- func: eye.out(int n, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: eye_out_cpu
    CUDA: eye_out_cuda
  npu_dispatch:
    NPU: eye_out_npu

- func: eye.m_out(int n, int m, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: eye_out_cpu
    CUDA: eye_out_cuda
  npu_dispatch:
    NPU: eye_out_npu

- func: flatten.using_ints(Tensor self, int start_dim=0, int end_dim=-1) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  supports_named_tensor: True

- func: flatten.named_out_dim(Tensor self, int start_dim, int end_dim, Dimname out_dim) -> Tensor
  variants: function, method
  supports_named_tensor: True

- func: flatten.using_names(Tensor self, Dimname start_dim, Dimname end_dim, Dimname out_dim) -> Tensor
  variants: function, method
  supports_named_tensor: True

- func: flatten.DimnameList(Tensor self, Dimname[] dims, Dimname out_dim) -> Tensor
  variants: function, method
  supports_named_tensor: True

- func: fill_.Scalar(Tensor(a!) self, Scalar value) -> Tensor(a!)
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: fill_npu_

- func: fill_.Tensor(Tensor(a!) self, Tensor value) -> Tensor(a!)
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: fill_npu_

- func: floor(Tensor self) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: floor_npu

- func: floor_(Tensor(a!) self) -> Tensor(a!)
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: floor_npu_

- func: floor.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: floor_out
    CUDA: floor_out
  npu_dispatch:
    NPU: floor_out_npu

- func: floor_divide(Tensor self, Tensor other) -> Tensor
  variants: function, method
  dispatch:
    CPU: floor_divide
    CUDA: floor_divide
    SparseCPU: floor_divide_sparse
    SparseCUDA: floor_divide_sparse
  supports_named_tensor: True
  npu_dispatch:
    NPU: floor_divide_npu

- func: floor_divide_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  variants: method
  dispatch:
    CPU: floor_divide_
    CUDA: floor_divide_
    SparseCPU: floor_divide_sparse_
    SparseCUDA: floor_divide_sparse_
  supports_named_tensor: True
  npu_dispatch:
    NPU: floor_divide_npu_

- func: floor_divide.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: floor_divide_out
    CUDA: floor_divide_out
    SparseCPU: floor_divide_out_sparse_zerodim
    SparseCUDA: floor_divide_out_sparse_zerodim
  supports_named_tensor: True
  npu_dispatch:
    NPU: floor_divide_out_npu

- func: floor_divide.Scalar(Tensor self, Scalar other) -> Tensor
  variants: function, method
  supports_named_tensor: True
  npu_dispatch:
    NPU: floor_divide_npu

- func: floor_divide_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  variants: method
  supports_named_tensor: True
  npu_dispatch:
    NPU: floor_divide_npu_

- func: frac(Tensor self) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: frac_npu


- func: frac_(Tensor(a!) self) -> Tensor(a!)
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: frac_npu_


- func: frac.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  npu_dispatch:
    NPU: frac_out_npu


- func: full.names(int[] size, Scalar fill_value, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  device_guard: False
  npu_dispatch:
    NPU: full_npu

- func: full(int[] size, Scalar fill_value, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  npu_dispatch:
    NPU: full_npu


- func: full.out(int[] size, Scalar fill_value, *, Tensor(a!) out) -> Tensor(a!)
  npu_dispatch:
    NPU: full_out_npu


- func: full_like(Tensor self, Scalar fill_value, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor
  supports_named_tensor: True

- func: from_file(str filename, bool? shared=None, int? size=0, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  dispatch:
    CPU: from_file

# NOTE [ grid_sampler Native Functions ]
# `grid_sampler` does all the shape checking and then dispatches to one of
# `cudnn_grid_sampler`, `grid_sampler_2d`, or `grid_sampler_3d`, each of which
# has the corresponding backward defined as native functions as well. Therefore,
# in these functions and their backwards, no more shape checking is done.
#
# Additionally, arguments `padding_mode` and `interpolation_mode` are cast to
# enums defined in `native/GridSampler.h`. `cudnn_grid_sampler` doesn't take in
# `interpolation_mode` because it only supports Bilinear interpolation mode.
# Nor does it take in `align_corners` because it only supports the mode
# `align_corners = True`.
- func: grid_sampler(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> Tensor
  use_c10_dispatcher: full

- func: grid_sampler_2d(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> Tensor
  use_c10_dispatcher: full
  dispatch:
    CPU: grid_sampler_2d_cpu
    CUDA: grid_sampler_2d_cuda
  npu_dispatch:
    NPU: grid_sampler_2d_npu

- func: grid_sampler_2d_backward(Tensor grad_output, Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> (Tensor, Tensor)
  dispatch:
    CPU: grid_sampler_2d_backward_cpu
    CUDA: grid_sampler_2d_backward_cuda
  npu_dispatch:
    NPU: grid_sampler_2d_backward_npu

- func: grid_sampler_3d(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> Tensor
  use_c10_dispatcher: full
  dispatch:
    CPU: grid_sampler_3d_cpu
    CUDA: grid_sampler_3d_cuda
  npu_dispatch:
    NPU: grid_sampler_3d_npu

- func: grid_sampler_3d_backward(Tensor grad_output, Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> (Tensor, Tensor)
  dispatch:
    CPU: grid_sampler_3d_backward_cpu
    CUDA: grid_sampler_3d_backward_cuda
  npu_dispatch:
    NPU: grid_sampler_3d_backward_npu

- func: hann_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  npu_dispatch:
    NPU: hann_window_npu

- func: hann_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  npu_dispatch:
    NPU: hann_window_npu

- func: hamming_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  npu_dispatch:
    NPU: hamming_window_npu

- func: hamming_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  npu_dispatch:
    NPU: hamming_window_npu

- func: hamming_window.periodic_alpha(int window_length, bool periodic, float alpha, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  npu_dispatch:
    NPU: hamming_window_npu

- func: hamming_window.periodic_alpha_beta(int window_length, bool periodic, float alpha, float beta, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  npu_dispatch:
    NPU: hamming_window_npu

- func: hinge_embedding_loss(Tensor self, Tensor target, float margin=1.0, int reduction=Mean) -> Tensor
  use_c10_dispatcher: full

- func: ger(Tensor self, Tensor vec2) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  npu_dispatch:
    NPU: ger_npu

- func: ger.out(Tensor self, Tensor vec2, *, Tensor(a!) out) -> Tensor(a!)
  npu_dispatch:
    NPU: ger_out_npu


- func: group_norm(Tensor input, int num_groups, Tensor? weight=None, Tensor? bias=None, float eps=1e-05, bool cudnn_enabled=True) -> Tensor

# FFT

- func: fft(Tensor self, int signal_ndim, bool normalized=False) -> Tensor
  use_c10_dispatcher: full
  variants: function, method

- func: ifft(Tensor self, int signal_ndim, bool normalized=False) -> Tensor
  use_c10_dispatcher: full
  variants: function, method

- func: rfft(Tensor self, int signal_ndim, bool normalized=False, bool onesided=True) -> Tensor
  use_c10_dispatcher: full
  variants: function, method

- func: irfft(Tensor self, int signal_ndim, bool normalized=False, bool onesided=True, int[] signal_sizes=[]) -> Tensor
  variants: function, method

- func: _fft_with_size(Tensor self, int signal_ndim, bool complex_input, bool complex_output, bool inverse, int[] checked_signal_sizes, bool normalized, bool onesided, int[] output_sizes) -> Tensor
  variants: function
  dispatch:
    CPU: _fft_mkl
    CUDA: _fft_cufft

- func: _cufft_get_plan_cache_size(int device_index) -> int
  use_c10_dispatcher: full

- func: _cufft_get_plan_cache_max_size(int device_index) -> int
  use_c10_dispatcher: full

- func: _cufft_set_plan_cache_max_size(int device_index, int max_size) -> ()
  use_c10_dispatcher: unboxed_only

- func: _cufft_clear_plan_cache(int device_index) -> ()
  use_c10_dispatcher: unboxed_only

- func: index.Tensor(Tensor self, Tensor?[] indices) -> Tensor
  variants: function, method
  # NB: This function is special-cased in tools/autograd/gen_variable_type.py
  # NB: The following functions are declared in aten/src/ATen/templates/TensorBody.h and defined in aten/src/ATen/TensorIndexing.cpp:
  # - Tensor Tensor::index(ArrayRef<TensorIndex> indices)
  # - Tensor Tensor::index(std::initializer_list<TensorIndex> indices)
  npu_dispatch:
    NPU: index_npu

- func: index_copy_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> Tensor(a!)
  variants: method

- func: index_copy(Tensor self, int dim, Tensor index, Tensor source) -> Tensor
  use_c10_dispatcher: full
  variants: function, method

- func: index_copy_.dimname(Tensor(a!) self, Dimname dim, Tensor index, Tensor source) -> Tensor(a!)
  variants: method

- func: index_copy.dimname(Tensor self, Dimname dim, Tensor index, Tensor source) -> Tensor
  variants: function, method

- func: index_put_(Tensor(a!) self, Tensor?[] indices, Tensor values, bool accumulate=False) -> Tensor(a!)
  variants: function, method
  npu_dispatch:
    NPU: index_put_npu_

  # NB: The following functions are declared in aten/src/ATen/templates/TensorBody.h and defined in aten/src/ATen/TensorIndexing.cpp:
  # - Tensor & Tensor::index_put_(ArrayRef<TensorIndex> indices, Tensor const & rhs)
  # - Tensor & Tensor::index_put_(ArrayRef<TensorIndex> indices, Scalar v)
  # - Tensor & Tensor::index_put_(std::initializer_list<TensorIndex> indices, Tensor const & rhs)
  # - Tensor & Tensor::index_put_(std::initializer_list<TensorIndex> indices, Scalar v)
- func: index_put(Tensor self, Tensor?[] indices, Tensor values, bool accumulate=False) -> Tensor
  variants: function, method
  npu_dispatch:
    NPU: index_put_npu

- func: _index_put_impl_(Tensor(a!) self, Tensor?[] indices, Tensor values, bool accumulate=False, bool unsafe=False) -> Tensor(a!)
  variants: function
  npu_dispatch:
    NPU: _index_put_impl_npu_

- func: instance_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool use_input_stats, float momentum, float eps, bool cudnn_enabled) -> Tensor
  variants: function

- func: inverse(Tensor self) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  npu_dispatch:
    NPU: inverse_npu

- func: inverse.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  npu_dispatch:
    NPU: inverse_out_npu

- func: _inverse_helper(Tensor self) -> Tensor
  use_c10_dispatcher: full
  variants: function
  dispatch:
    CPU: _inverse_helper_cpu
    CUDA: _inverse_helper_cuda

- func: isclose(Tensor self, Tensor other, float rtol=1e-05, float atol=1e-08, bool equal_nan=False) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  npu_dispatch:
    NPU: isclose_npu

- func: isnan(Tensor self) -> Tensor
  use_c10_dispatcher: full
  variants: function
  device_guard: False
  supports_named_tensor: True
  dispatch:
    CPU: isnan
    CUDA: isnan
    SparseCPU: isnan_sparse
    SparseCUDA: isnan_sparse
  npu_dispatch:
    NPU: isnan_npu

- func: is_distributed(Tensor self) -> bool
  use_c10_dispatcher: full
  variants: function, method
  device_guard: False

- func: is_floating_point(Tensor self) -> bool
  use_c10_dispatcher: full
  variants: function, method
  device_guard: False
  supports_named_tensor: True

- func: is_complex(Tensor self) -> bool
  use_c10_dispatcher: full
  variants: function, method
  device_guard: False
  supports_named_tensor: True

- func: is_nonzero(Tensor self) -> bool
  use_c10_dispatcher: full
  variants: function, method
  device_guard: False
  supports_named_tensor: True
  npu_dispatch:
    NPU: is_nonzero_npu

- func: is_same_size(Tensor self, Tensor other) -> bool
  use_c10_dispatcher: full
  variants: function, method
  device_guard: False
  supports_named_tensor: True

- func: is_signed(Tensor self) -> bool
  use_c10_dispatcher: full
  variants: function, method
  device_guard: False
  supports_named_tensor: True

- func: kl_div(Tensor self, Tensor target, int reduction=Mean) -> Tensor
  use_c10_dispatcher: full
  npu_dispatch:
    NPU: kl_div_npu

- func: kl_div_backward(Tensor grad_output, Tensor self, Tensor target, int reduction=Mean) -> Tensor
  use_c10_dispatcher: full
  dispatch:
    CPU: kl_div_backward_cpu
    CUDA: kl_div_backward_cuda
  npu_dispatch:
    NPU: kl_div_backward_npu

- func: kthvalue(Tensor self, int k, int dim=-1, bool keepdim=False) -> (Tensor values, Tensor indices)
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: kthvalue_npu

- func: kthvalue.values(Tensor self, int k, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
  supports_named_tensor: True
  dispatch:
    CPU: kthvalue_out_cpu
    CUDA: kthvalue_out_cuda
  npu_dispatch:
    NPU: kthvalue_out_npu

- func: kthvalue.dimname(Tensor self, int k, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: kthvalue_npu

- func: kthvalue.dimname_out(Tensor self, int k, Dimname dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
  supports_named_tensor: True
  npu_dispatch:
    NPU: kthvalue_out_npu

- func: layer_norm(Tensor input, int[] normalized_shape, Tensor? weight=None, Tensor? bias=None, float eps=1e-05, bool cudnn_enable=True) -> Tensor

- func: native_layer_norm(Tensor input, Tensor? weight, Tensor? bias, int M, int N, float eps) -> (Tensor, Tensor, Tensor)
  dispatch:
    CPU: layer_norm_cpu
    CUDA: layer_norm_cuda
  npu_dispatch:
    NPU: layer_norm_npu

- func: native_layer_norm_backward(Tensor grad_out, Tensor input, Tensor mean, Tensor rstd, Tensor? weight, int M, int N, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
  dispatch:
    CPU: layer_norm_backward_cpu
    CUDA: layer_norm_backward_cuda
  npu_dispatch:
    NPU: layer_norm_backward_npu

- func: linear(Tensor input, Tensor weight, Tensor? bias=None) -> Tensor
  python_module: nn

- func: mkldnn_linear(Tensor input, Tensor weight, Tensor? bias=None) -> Tensor
  python_module: nn
  dispatch:
    MkldnnCPU: mkldnn_linear

- func: fbgemm_linear_int8_weight_fp32_activation(Tensor input, Tensor weight, Tensor packed, Tensor col_offsets, Scalar weight_scale, Scalar weight_zero_point, Tensor bias) -> Tensor

- func: fbgemm_linear_int8_weight(Tensor input, Tensor weight, Tensor packed, Tensor col_offsets, Scalar weight_scale, Scalar weight_zero_point, Tensor bias) -> Tensor
  use_c10_dispatcher: full

- func: fbgemm_linear_quantize_weight(Tensor input) -> (Tensor, Tensor, float, int)

- func: fbgemm_pack_gemm_matrix_fp16(Tensor input) -> Tensor
  use_c10_dispatcher: full

- func: fbgemm_linear_fp16_weight_fp32_activation(Tensor input, Tensor packed_weight, Tensor bias) -> Tensor

- func: fbgemm_linear_fp16_weight(Tensor input, Tensor packed_weight, Tensor bias) -> Tensor
  use_c10_dispatcher: full

- func: fbgemm_pack_quantized_matrix(Tensor input) -> Tensor
  use_c10_dispatcher: full

- func: fbgemm_pack_quantized_matrix.KN(Tensor input, int K, int N) -> Tensor
  use_c10_dispatcher: full

- func: linspace(Scalar start, Scalar end, int steps=100, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  npu_dispatch:
    NPU: linspace_npu

- func: linspace.out(Scalar start, Scalar end, int steps=100, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: linspace_cpu_out
    CUDA: linspace_cuda_out
  npu_dispatch:
    NPU: linspace_out_npu

- func: log(Tensor self) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: log_npu

- func: log_(Tensor(a!) self) -> Tensor(a!)
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: log_npu_

- func: log.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: log_out
    CUDA: log_out
  npu_dispatch:
    NPU: log_out_npu

- func: log10(Tensor self) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: log10_npu

- func: log10_(Tensor(a!) self) -> Tensor(a!)
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: log10_npu_

- func: log10.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: log10_out
    CUDA: log10_out
  npu_dispatch:
    NPU: log10_out_npu

- func: log1p(Tensor self) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: log1p_npu

- func: log1p_(Tensor(a!) self) -> Tensor(a!)
  supports_named_tensor: True
  variants: function, method
  dispatch:
    CPU: log1p_
    CUDA: log1p_
    SparseCPU: log1p_sparse_
    SparseCUDA: log1p_sparse_
  npu_dispatch:
    NPU: log1p_npu_

- func: log1p.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: log1p_out
    CUDA: log1p_out
    SparseCPU: log1p_out_sparse
    SparseCUDA: log1p_out_sparse
  npu_dispatch:
    NPU: log1p_out_npu

- func: log2(Tensor self) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: log2_npu

- func: log2_(Tensor(a!) self) -> Tensor(a!)
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: log2_npu_

- func: log2.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: log2_out
    CUDA: log2_out
  npu_dispatch:
    NPU: log2_out_npu

- func: logdet(Tensor self) -> Tensor
  use_c10_dispatcher: full
  variants: function, method

- func: logspace(Scalar start, Scalar end, int steps=100, float base=10.0, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  npu_dispatch:
    NPU: logspace_npu

- func: logspace.out(Scalar start, Scalar end, int steps=100, float base=10.0, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: logspace_cpu_out
    CUDA: logspace_cuda_out
  npu_dispatch:
    NPU: logspace_out_npu

# log_softmax allows positional dtype, unlike most operators, because kwonly is BC-breaking when loading jit models.
- func: log_softmax.int(Tensor self, int dim, ScalarType? dtype=None) -> Tensor
  variants: function, method
  supports_named_tensor: True
  npu_dispatch:
    NPU: log_softmax_npu

- func: log_softmax.Dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor
  variants: function, method
  supports_named_tensor: True
  npu_dispatch:
    NPU: log_softmax_npu

- func: _log_softmax(Tensor self, int dim, bool half_to_float) -> Tensor
  use_c10_dispatcher: full
  dispatch:
    CPU: log_softmax_cpu
    CUDA: log_softmax_cuda
  npu_dispatch:
    NPU: _log_softmax_npu

- func: _log_softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> Tensor
  use_c10_dispatcher: full
  dispatch:
    CPU: log_softmax_backward_cpu
    CUDA: log_softmax_backward_cuda
  npu_dispatch:
    NPU: _log_softmax_backward_npu

- func: logsumexp(Tensor self, int[1] dim, bool keepdim=False) -> Tensor
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: logsumexp_npu

- func: logsumexp.out(Tensor self, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  npu_dispatch:
    NPU: logsumexp_out_npu

- func: logsumexp.names(Tensor self, Dimname[1] dim, bool keepdim=False) -> Tensor
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: logsumexp_npu

- func: logsumexp.names_out(Tensor self, Dimname[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  npu_dispatch:
    NPU: logsumexp_out_npu

- func: margin_ranking_loss(Tensor input1, Tensor input2, Tensor target, float margin=0.0, int reduction=Mean) -> Tensor
  use_c10_dispatcher: full

- func: matmul(Tensor self, Tensor other) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  supports_named_tensor: True
  npu_dispatch:
    NPU: matmul_npu

- func: matmul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  npu_dispatch:
    NPU: matmul_out_npu

- func: matrix_rank.tol(Tensor self, float tol, bool symmetric=False) -> Tensor
  use_c10_dispatcher: full

- func: matrix_rank(Tensor self, bool symmetric=False) -> Tensor
  use_c10_dispatcher: full

- func: matrix_power(Tensor self, int n) -> Tensor
  use_c10_dispatcher: full
  variants: function, method

- func: max.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)
  variants: function, method
  supports_named_tensor: True
  npu_dispatch:
    NPU: max_npu

- func: max.dim_max(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_values) -> (Tensor(a!) values, Tensor(b!) indices)
  supports_named_tensor: True
  npu_dispatch:
    NPU: max_out_npu

- func: max_values(Tensor self, int[1] dim, bool keepdim=False) -> Tensor
  variants: function, method
  npu_dispatch:
    NPU: max_npu

- func: max.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)
  variants: function, method
  supports_named_tensor: True
  npu_dispatch:
    NPU: max_npu

- func: max.names_dim_max(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_values) -> (Tensor(a!) values, Tensor(b!) indices)
  supports_named_tensor: True
  npu_dispatch:
    NPU: max_out_npu

- func: max_values.names(Tensor self, Dimname[1] dim, bool keepdim=False) -> Tensor
  variants: function, method
  npu_dispatch:
    NPU: max_npu

# Return: (Tensor output, Tensor indices)
- func: max_pool1d_with_indices(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=0, int[1] dilation=1, bool ceil_mode=False) -> (Tensor, Tensor)
  supports_named_tensor: True

- func: max_pool1d(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=0, int[1] dilation=1, bool ceil_mode=False) -> Tensor
  supports_named_tensor: True

- func: max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> Tensor
  supports_named_tensor: True
  npu_dispatch:
    NPU: max_pool2d_npu

- func: mkldnn_max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> Tensor
  requires_tensor: True
  dispatch:
    MkldnnCPU: mkldnn_max_pool2d

- func: quantized_max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> Tensor
  requires_tensor: True
  dispatch:
    QuantizedCPU: quantized_max_pool2d

- func: max_pool3d(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False) -> Tensor
  supports_named_tensor: True

# The CPU and GPU dispatch variants are named weirdly here because otherwise there
# are namespacing issues in C++
- func: mean(Tensor self, *, ScalarType? dtype=None) -> Tensor
  variants: function, method
  supports_named_tensor: True
  dispatch:
    CPU: mean_cpu_gpu
    CUDA: mean_cpu_gpu
    QuantizedCPU: quantized_mean_cpu
  npu_dispatch:
    NPU: mean_npu

- func: mean.dim(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
  variants: function, method
  supports_named_tensor: True
  dispatch:
    CPU: mean_cpu_gpu
    CUDA: mean_cpu_gpu
    QuantizedCPU: quantized_mean_cpu
  npu_dispatch:
    NPU: mean_npu

- func: mean.out(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: mean_out_cpu_gpu
    CUDA: mean_out_cpu_gpu
    QuantizedCPU: quantized_mean_out_cpu
  npu_dispatch:
    NPU: mean_out_npu

- func: mean.names_dim(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
  variants: function, method
  supports_named_tensor: True
  npu_dispatch:
    NPU: mean_npu

- func: mean.names_out(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  npu_dispatch:
    NPU: mean_out_npu

- func: median.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: median_npu

- func: median.dim_values(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
  supports_named_tensor: True
  npu_dispatch:
    NPU: median_out_npu

- func: median.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: median_npu

- func: median.names_dim_values(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
  supports_named_tensor: True
  npu_dispatch:
    NPU: median_out_npu

- func: min.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)
  variants: function, method
  supports_named_tensor: True
  npu_dispatch:
    NPU: min_npu

- func: min.dim_min(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!) values, Tensor(b!) indices)
  supports_named_tensor: True
  npu_dispatch:
    NPU: min_out_npu

- func: min_values(Tensor self, int[1] dim, bool keepdim=False) -> Tensor
  variants: function, method
  npu_dispatch:
    NPU: min_npu

- func: min.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)
  variants: function, method
  supports_named_tensor: True
  npu_dispatch:
    NPU: min_npu

- func: min.names_dim_min(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!) values, Tensor(b!) indices)
  supports_named_tensor: True
  npu_dispatch:
    NPU: min_out_npu

- func: min_values.names(Tensor self, Dimname[1] dim, bool keepdim=False) -> Tensor
  variants: function, method
  npu_dispatch:
    NPU: min_npu

- func: mkldnn_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups) -> Tensor

- func: mkldnn_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool bias_defined) -> Tensor

- func: mkldnn_convolution_backward_weights(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool bias_defined) -> (Tensor, Tensor)

- func: mkldnn_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)

- func: miopen_batch_norm(Tensor input, Tensor weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float exponential_average_factor, float epsilon) -> (Tensor, Tensor, Tensor)
  dispatch:
    CUDA: miopen_batch_norm

- func: miopen_batch_norm_backward(Tensor input, Tensor grad_output, Tensor weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var, float epsilon) -> (Tensor, Tensor, Tensor)
  dispatch:
    CUDA: miopen_batch_norm_backward

- func: miopen_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor
  dispatch:
    CUDA: miopen_convolution

- func: miopen_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor
  dispatch:
    CUDA: miopen_convolution_backward_input

- func: miopen_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
  dispatch:
    CUDA: miopen_convolution_backward

- func: miopen_convolution_backward_bias(Tensor grad_output) -> Tensor
  use_c10_dispatcher: full
  dispatch:
    CUDA: miopen_convolution_backward_bias

- func: miopen_convolution_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor
  dispatch:
    CUDA: miopen_convolution_backward_weight

- func: miopen_convolution_transpose(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor
  dispatch:
    CUDA: miopen_convolution_transpose

# NB: output_padding not strictly needed here, but it's helpful for the float
# backwards
- func: miopen_convolution_transpose_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
  dispatch:
    CUDA: miopen_convolution_transpose_backward

- func: miopen_convolution_transpose_backward_input(Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor
  dispatch:
    CUDA: miopen_convolution_transpose_backward_input

- func: miopen_convolution_transpose_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor
  dispatch:
    CUDA: miopen_convolution_transpose_backward_weight

- func: miopen_depthwise_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor
  dispatch:
    CUDA: miopen_depthwise_convolution

- func: miopen_depthwise_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor
  dispatch:
    CUDA: miopen_depthwise_convolution_backward_input

- func: miopen_depthwise_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
  dispatch:
    CUDA: miopen_depthwise_convolution_backward

- func: miopen_depthwise_convolution_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor
  dispatch:
    CUDA: miopen_depthwise_convolution_backward_weight

- func: miopen_rnn(Tensor input, Tensor[] weight, int weight_stride0, Tensor hx, Tensor? cx, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state) -> (Tensor, Tensor, Tensor, Tensor, Tensor)
  dispatch:
    CUDA: miopen_rnn

- func: miopen_rnn_backward(Tensor input, Tensor[] weight, int weight_stride0, Tensor weight_buf, Tensor hx, Tensor? cx, Tensor output, Tensor? grad_output, Tensor? grad_hy, Tensor? grad_cy, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state, Tensor reserve, bool[4] output_mask) -> (Tensor, Tensor, Tensor, Tensor[])
  dispatch:
    CUDA: miopen_rnn_backward

- func: mm(Tensor self, Tensor mat2) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  dispatch:
    CPU: mm_cpu
    CUDA: legacy::cuda::_th_mm
    SparseCPU: _sparse_mm
    SparseCUDA: _sparse_mm
  npu_dispatch:
    NPU: mm_npu
  supports_named_tensor: True

- func: mm.out(Tensor self, Tensor mat2, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: mm_cpu_out
    CUDA: legacy::cuda::_th_mm_out
    SparseCPU: _sparse_mm_out
    SparseCUDA: _sparse_mm_out
  npu_dispatch:
    NPU: mm_out_npu
  supports_named_tensor: True

- func: _sparse_mm(Tensor sparse, Tensor dense) -> Tensor
  use_c10_dispatcher: full

- func: mode(Tensor self, int dim=-1, bool keepdim=False) -> (Tensor values, Tensor indices)
  supports_named_tensor: True
  variants: function, method

- func: mode.values(Tensor self, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
  supports_named_tensor: True

- func: mode.dimname(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)
  variants: function, method
  supports_named_tensor: True

- func: mode.dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
  supports_named_tensor: True

- func: mul.Tensor(Tensor self, Tensor other) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  dispatch:
    CPU: mul
    CUDA: mul
    SparseCPU: mul_sparse
    SparseCUDA: mul_sparse
    MkldnnCPU: mkldnn_mul
  npu_dispatch:
    NPU: mul_npu
  supports_named_tensor: True

- func: mul_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  variants: method
  dispatch:
    CPU: mul_
    CUDA: mul_
    SparseCPU: mul_sparse_
    SparseCUDA: mul_sparse_
    MkldnnCPU: mkldnn_mul_
  npu_dispatch:
    NPU: mul_npu_
  supports_named_tensor: True

- func: mul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: mul_out
    CUDA: mul_out
    SparseCPU: mul_out_sparse_cpu
    SparseCUDA: mul_out_sparse_cuda
    MkldnnCPU: mkldnn_mul_out
  npu_dispatch:
    NPU: mul_out_npu
  supports_named_tensor: True

  # For C++ only, until we have conversion from C++ numbers to Tensor
- func: mul.Scalar(Tensor self, Scalar other) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  npu_dispatch:
    NPU: mul_npu

- func: mul_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  variants: method
  npu_dispatch:
    NPU: mul_npu_

- func: mv(Tensor self, Tensor vec) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  dispatch:
    CPU: mv_cpu
    CUDA: legacy::cuda::_th_mv
  supports_named_tensor: True
  npu_dispatch:
    NPU: mv_npu

- func: mv.out(Tensor self, Tensor vec, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: mv_cpu_out
    CUDA: legacy::cuda::_th_mv_out
  supports_named_tensor: True
  npu_dispatch:
    NPU: mv_out_npu

- func: mvlgamma(Tensor self, int p) -> Tensor
  use_c10_dispatcher: full
  variants: function, method

- func: mvlgamma_(Tensor(a!) self, int p) -> Tensor(a!)
  variants: method

- func: narrow_copy(Tensor self, int dim, int start, int length) -> Tensor
  use_c10_dispatcher: full
  variants: method
  dispatch:
    CPU: narrow_copy_dense
    CUDA: narrow_copy_dense
    SparseCPU: narrow_copy_sparse
    SparseCUDA: narrow_copy_sparse
  npu_dispatch:
    NPU: narrow_copy_npu

- func: narrow(Tensor(a) self, int dim, int start, int length) -> Tensor(a)
  variants: function, method
  device_guard: False
  supports_named_tensor: True

- func: narrow.Tensor(Tensor(a) self, int dim, Tensor start, int length) -> Tensor(a)
  variants: function, method
  device_guard: False
  supports_named_tensor: True

- func: native_batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps) -> (Tensor, Tensor, Tensor)
  dispatch:
    CPU: batch_norm_cpu
    CUDA: batch_norm_cuda
    MkldnnCPU: mkldnn_batch_norm
  npu_dispatch:
    NPU: batch_norm_npu

- func: native_batch_norm.out(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, *, Tensor(a!) out, Tensor(b!) save_mean, Tensor(c!) save_invstd) -> (Tensor(a!), Tensor(b!), Tensor(c!))
  dispatch:
    CUDA: batch_norm_cuda_out

- func: batch_norm_stats(Tensor input, float eps) -> (Tensor, Tensor)
  dispatch:
    CUDA: batch_norm_stats_cuda
  npu_dispatch:
    NPU: batch_norm_stats_npu

- func: batch_norm_elemt(Tensor input, Tensor? weight, Tensor? bias, Tensor mean, Tensor invstd, float eps) -> Tensor
  dispatch:
    CUDA: batch_norm_elemt_cuda
  npu_dispatch:
    NPU: batch_norm_elemt_npu

- func: batch_norm_elemt.out(Tensor input, Tensor? weight, Tensor? bias, Tensor mean, Tensor invstd, float eps, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CUDA: batch_norm_elemt_cuda_out
  npu_dispatch:
    NPU: batch_norm_elemt_out_npu

# for backward compatibility
- func: batch_norm_gather_stats(Tensor input, Tensor mean, Tensor invstd, Tensor? running_mean, Tensor? running_var, float momentum, float eps, int count) -> (Tensor, Tensor)
  dispatch:
    CUDA: batch_norm_gather_stats_cuda

- func: batch_norm_gather_stats_with_counts(Tensor input, Tensor mean, Tensor invstd, Tensor? running_mean, Tensor? running_var, float momentum, float eps, int[] counts) -> (Tensor, Tensor)
  dispatch:
    CUDA: batch_norm_gather_stats_with_counts_cuda
  npu_dispatch:
    NPU: batch_norm_gather_stats_with_counts_npu

- func: native_batch_norm_backward(Tensor grad_out, Tensor input, Tensor? weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_invstd, bool train, float eps, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
  dispatch:
    CPU: batch_norm_backward_cpu
    CUDA: batch_norm_backward_cuda
  npu_dispatch:
    NPU: batch_norm_backward_npu

- func: batch_norm_backward_reduce(Tensor grad_out, Tensor input, Tensor mean, Tensor invstd, Tensor? weight, bool input_g, bool weight_g, bool bias_g) -> (Tensor, Tensor, Tensor, Tensor)
  dispatch:
    CUDA: batch_norm_backward_reduce_cuda
  npu_dispatch:
    NPU: batch_norm_backward_reduce_npu

- func: batch_norm_backward_elemt(Tensor grad_out, Tensor input, Tensor mean, Tensor invstd, Tensor? weight, Tensor mean_dy, Tensor mean_dy_xmu) -> Tensor
  dispatch:
    CUDA: batch_norm_backward_elemt_cuda
  npu_dispatch:
    NPU: batch_norm_backward_elemt_npu

- func: batch_norm_update_stats(Tensor input, Tensor? running_mean, Tensor? running_var, float momentum) -> (Tensor, Tensor)
  dispatch:
    CPU: batch_norm_update_stats_cpu
    CUDA: batch_norm_update_stats_cuda

- func: _nnpack_available() -> bool
  use_c10_dispatcher: full

- func: _nnpack_spatial_convolution(Tensor input, Tensor weight, Tensor? bias, int[2] padding, int[2] stride=1) -> Tensor
  variants: function
  npu_dispatch:
    NPU: _nnpack_spatial_convolution_npu

- func: _nnpack_spatial_convolution_backward(Tensor input, Tensor grad_output, Tensor weight, int[2] padding, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
  variants: function

- func: _nnpack_spatial_convolution_backward_input(Tensor input, Tensor grad_output, Tensor weight, int[2] padding) -> Tensor
  variants: function

- func: _nnpack_spatial_convolution_backward_weight(Tensor input, int[] weightsize, Tensor grad_output, int[2] padding) -> Tensor
  variants: function

- func: ones.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  device_guard: False
  npu_dispatch:
    NPU: ones_npu

- func: ones(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  npu_dispatch:
    NPU: ones_npu

- func: ones.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)
  npu_dispatch:
    NPU: ones_out_npu

- func: ones_like(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor
  supports_named_tensor: True
  npu_dispatch:
    NPU: ones_like_npu

- func: pairwise_distance(Tensor x1, Tensor x2, float p=2, float eps=1e-06, bool keepdim=False) -> Tensor
  use_c10_dispatcher: full

- func: cdist(Tensor x1, Tensor x2, float p=2, int? compute_mode=None) -> Tensor
  supports_named_tensor: True
  npu_dispatch:
    NPU: cdist_npu

- func: _cdist_forward(Tensor x1, Tensor x2, float p, int? compute_mode) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  npu_dispatch:
    NPU: _cdist_forward_npu

- func: _cdist_backward(Tensor grad, Tensor x1, Tensor x2, float p, Tensor cdist) -> Tensor
  use_c10_dispatcher: full
  npu_dispatch:
    NPU: _cdist_backward_npu

- func: pdist(Tensor self, float p=2) -> Tensor
  use_c10_dispatcher: full
  npu_dispatch:
    NPU: pdist_npu

- func: _pdist_forward(Tensor self, float p=2) -> Tensor
  use_c10_dispatcher: full
  npu_dispatch:
    NPU: _pdist_forward_npu

- func: _pdist_backward(Tensor grad, Tensor self, float p, Tensor pdist) -> Tensor
  use_c10_dispatcher: full

- func: cosine_similarity(Tensor input, Tensor input2, int dim=1, float eps=1e-08) -> Tensor
  use_c10_dispatcher: full
  variants: function

- func: permute(Tensor(a) self, int[] dims) -> Tensor(a)
  variants: method # This is method-only to match the previous tensor API. In the future we could make this a function too.

# Only exposed from C++ -- in Python,
# we expose it as an attribute `T`, not a function.
#
# I'd like to name this "T" in C++ too, but
# calling a native function "T" causes undefined
# behavior on Windows, for reasons I don't understand
# (maybe related to capital letter collation somehow...)
- func: numpy_T(Tensor(a) self) -> Tensor(a)
  variants: method

- func: pixel_shuffle(Tensor self, int upscale_factor) -> Tensor
  use_c10_dispatcher: full

- func: is_pinned(Tensor self) -> bool
  use_c10_dispatcher: full
  variants: method
  supports_named_tensor: True

- func: pin_memory(Tensor self) -> Tensor
  use_c10_dispatcher: full
  variants: method

- func: pinverse(Tensor self, float rcond=1e-15) -> Tensor
  use_c10_dispatcher: full
  variants: function, method

- func: poisson_nll_loss(Tensor input, Tensor target, bool log_input, bool full, float eps, int reduction) -> Tensor
  use_c10_dispatcher: full
  variants: function

- func: scalar_tensor(Scalar s, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor

- func: rand.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  device_guard: False

- func: rand.generator_with_names(int[] size, *, Generator? generator, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  device_guard: False

- func: rand(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor

- func: rand.generator(int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor

- func: rand.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)

- func: rand.generator_out(int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)

- func: rand_like(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor
  supports_named_tensor: True

- func: randint(int high, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor

- func: randint.generator(int high, int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor

- func: randint.low(int low, int high, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor

- func: randint.low_generator(int low, int high, int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor

- func: randint.out(int high, int[] size, *, Tensor(a!) out) -> Tensor(a!)

- func: randint.generator_out(int high, int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)

- func: randint.low_out(int low, int high, int[] size, *, Tensor(a!) out) -> Tensor(a!)

- func: randint.low_generator_out(int low, int high, int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)

- func: randint_like(Tensor self, int high, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor

- func: randint_like.low_dtype(Tensor self, int low, int high, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor

- func: randn(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor

- func: randn.generator(int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor

- func: randn.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  device_guard: False

- func: randn.generator_with_names(int[] size, *, Generator? generator, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  device_guard: False

- func: randn.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)

- func: randn.generator_out(int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)

- func: randn_like(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor
  supports_named_tensor: True

- func: randperm(int n, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  npu_dispatch:
    NPU: randperm_npu

- func: randperm.generator(int n, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  npu_dispatch:
    NPU: randperm_npu

- func: randperm.out(int n, *, Tensor(a!) out) -> Tensor(a!)
  npu_dispatch:
    NPU: randperm_out_npu

- func: randperm.generator_out(int n, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: randperm_out_cpu
    CUDA: randperm_out_cuda
  npu_dispatch:
    NPU: randperm_out_npu

- func: range.step(Scalar start, Scalar end, Scalar step=1, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  npu_dispatch:
    NPU: range_npu

- func: range(Scalar start, Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  npu_dispatch:
    NPU: range_npu

- func: range.out(Scalar start, Scalar end, Scalar step=1, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: range_cpu_out
    CUDA: range_cuda_out
  npu_dispatch:
    NPU: range_out_npu

- func: reciprocal(Tensor self) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: reciprocal_npu

- func: reciprocal_(Tensor(a!) self) -> Tensor(a!)
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: reciprocal_npu_

- func: reciprocal.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  npu_dispatch:
    NPU: reciprocal_out_npu

- func: neg(Tensor self) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: neg_npu

- func: neg_(Tensor(a!) self) -> Tensor(a!)
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: neg_npu_

- func: neg.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: neg_out
    CUDA: neg_out
  npu_dispatch:
    NPU: neg_out_npu

- func: repeat(Tensor self, int[] repeats) -> Tensor
  variants: method # This is method-only to match the previous tensor API. In the future we could make this a function too.
  npu_dispatch:
    NPU: repeat_npu

- func: repeat_interleave.Tensor(Tensor repeats) -> Tensor
  use_c10_dispatcher: full
  variants: function
  dispatch:
    CPU: repeat_interleave_cpu
    CUDA: repeat_interleave_cuda

- func: repeat_interleave.self_Tensor(Tensor self, Tensor repeats, int? dim=None) -> Tensor
  use_c10_dispatcher: full
  variants: function, method

- func: repeat_interleave.self_int(Tensor self, int repeats, int? dim=None) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  npu_dispatch:
    NPU: repeat_interleave_npu

- func: reshape(Tensor self, int[] shape) -> Tensor
  variants: function, method
  device_guard: False
  supports_named_tensor: True

- func: _mkldnn_reshape(Tensor self, int[] shape) -> Tensor
  device_guard: False
  requires_tensor: True
  dispatch:
    MkldnnCPU: mkldnn_reshape

- func: reshape_as(Tensor self, Tensor other) -> Tensor
  use_c10_dispatcher: full
  variants: method
  device_guard: False

- func: round(Tensor self) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: round_npu

- func: round_(Tensor(a!) self) -> Tensor(a!)
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: round_npu_

- func: round.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: round_out
    CUDA: round_out
  npu_dispatch:
    NPU: round_out_npu

- func: rrelu(Tensor self, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor

- func: rrelu_(Tensor(a!) self, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor(a!)

- func: relu(Tensor self) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  dispatch:
    CPU: relu
    CUDA: relu
    MkldnnCPU: mkldnn_relu
    QuantizedCPU: quantized_relu
  npu_dispatch:
    NPU: relu_npu
  supports_named_tensor: True

- func: relu_(Tensor(a!) self) -> Tensor(a!)
  supports_named_tensor: True
  variants: function, method
  dispatch:
    CPU: relu_
    CUDA: relu_
    MkldnnCPU: mkldnn_relu_
    QuantizedCPU: quantized_relu_
  npu_dispatch:
    NPU: relu_npu_

- func: prelu(Tensor self, Tensor weight) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  dispatch:
    CPU: prelu_cpu
    CUDA: prelu_cuda
  npu_dispatch:
    NPU: prelu_npu

- func: prelu_backward(Tensor grad_output, Tensor self, Tensor weight) -> (Tensor, Tensor)
  variants: function, method
  dispatch:
    CPU: prelu_backward_cpu
    CUDA: prelu_backward_cuda
  npu_dispatch:
    NPU: prelu_backward_npu

- func: gelu(Tensor self) -> Tensor
  use_c10_dispatcher: full
  python_module: nn
  dispatch:
    CPU: gelu_cpu
    CUDA: gelu_cuda
  npu_dispatch:
     NPU: gelu_npu

- func: gelu_backward(Tensor grad, Tensor self) -> Tensor
  use_c10_dispatcher: full
  python_module: nn
  dispatch:
    CPU: gelu_backward_cpu
    CUDA: gelu_backward_cuda
  npu_dispatch:
    NPU: gelu_backward_npu

- func: hardshrink(Tensor self, Scalar lambd=0.5) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  npu_dispatch:
    NPU: hardshrink_npu

- func: hardshrink_backward(Tensor grad_out, Tensor self, Scalar lambd) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  npu_dispatch:
    NPU: hardshrink_backward_npu

- func: rsqrt(Tensor self) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: rsqrt_npu

- func: rsqrt_(Tensor(a!) self) -> Tensor(a!)
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: rsqrt_npu_

- func: rsqrt.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: rsqrt_out
    CUDA: rsqrt_out
  npu_dispatch:
    NPU: rsqrt_out_npu

- func: select.Dimname(Tensor(a) self, Dimname dim, int index) -> Tensor(a)
  variants: function, method
  device_guard: False
  supports_named_tensor: True

- func: select.int(Tensor(a) self, int dim, int index) -> Tensor(a)
  variants: function, method
  device_guard: False
  supports_named_tensor: True

- func: selu(Tensor self) -> Tensor
  use_c10_dispatcher: full
  npu_dispatch:
    NPU: selu_npu

- func: selu_(Tensor(a!) self) -> Tensor(a!)
  npu_dispatch:
    NPU: selu_npu_

- func: celu(Tensor self, Scalar alpha=1.0) -> Tensor
  use_c10_dispatcher: full
  npu_dispatch:
    NPU: celu_npu

- func: celu_(Tensor(a!) self, Scalar alpha=1.0) -> Tensor(a!)
  npu_dispatch:
    NPU: celu_npu_

- func: sigmoid(Tensor self) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: function, method
  dispatch:
    CPU: sigmoid
    CUDA: sigmoid
    QuantizedCPU: quantized_sigmoid
    MkldnnCPU: mkldnn_sigmoid
  npu_dispatch:
    NPU: sigmoid_npu

- func: sigmoid_(Tensor(a!) self) -> Tensor(a!)
  supports_named_tensor: True
  variants: function, method
  dispatch:
    CPU: sigmoid_
    CUDA: sigmoid_
    MkldnnCPU: mkldnn_sigmoid_
  npu_dispatch:
    NPU: sigmoid_npu_

- func: sigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  npu_dispatch:
    NPU: sigmoid_out_npu

- func: sin(Tensor self) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: sin_npu

- func: sin_(Tensor(a!) self) -> Tensor(a!)
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: sin_npu_

- func: sin.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: sin_out
    CUDA: sin_out
  npu_dispatch:
    NPU: sin_out_npu

- func: sinh(Tensor self) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: sinh_npu

- func: sinh_(Tensor(a!) self) -> Tensor(a!)
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: sinh_npu_

- func: sinh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  npu_dispatch:
    NPU: sinh_out_npu

# Returns a copy of this `Variable` that is detached from its autograd graph.
# This method is OK to call if the `Variable` is a view.
#
# NOTE: Previously, if we change the tensor metadata (e.g. sizes / strides /
# storage / storage_offset) of a tensor created from `detach()`, those metadata
# in the original tensor will also be updated. However, the new behavior is that
# those metadata changes to the detached tensor will not update the original tensor
# anymore, and in the `detach()` function we need to set `allow_tensor_metadata_change_`
# to false to make such changes explicitly illegal, in order to prevent users from
# changing metadata of the detached tensor and expecting the original tensor to also
# be updated.
- func: detach(Tensor self) -> Tensor
  use_c10_dispatcher: full
  manual_kernel_registration: True
  supports_named_tensor: True
  variants: function, method

# Like `detach()`, but modifies this `Variable` in-place. This method may
# only be called on non-view `Variable`s. You can use `is_view()` to check
# this. If this `Variable` is a view, throws an `std::runtime_error()`.
- func: detach_(Tensor(a!) self) -> Tensor(a!)
  manual_kernel_registration: True
  supports_named_tensor: True
  variants: function, method

- func: size.int(Tensor self, int dim) -> int
  use_c10_dispatcher: full
  variants: function, method
  device_guard: False
  supports_named_tensor: True

- func: size.Dimname(Tensor self, Dimname dim) -> int
  variants: function, method
  device_guard: False
  supports_named_tensor: True

- func: slice.Tensor(Tensor(a) self, int dim=0, int start=0, int end=9223372036854775807, int step=1) -> Tensor(a)
  variants: function, method
  device_guard: False
  supports_named_tensor: True

- func: slogdet(Tensor self) -> (Tensor sign, Tensor logabsdet)
  variants: function, method
  npu_dispatch:
    NPU: slogdet_npu

- func: smm(Tensor self, Tensor mat2) -> Tensor
  use_c10_dispatcher: full
  variants: function, method

# softmax allows positional dtype, unlike most operators, because kwonly is BC-breaking when loading jit models.
- func: softmax.int(Tensor self, int dim, ScalarType? dtype=None) -> Tensor
  variants: function, method
  supports_named_tensor: True
  npu_dispatch:
    NPU: softmax_npu

- func: softmax.Dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor
  variants: function, method
  supports_named_tensor: True
  npu_dispatch:
    NPU: softmax_npu

- func: _softmax(Tensor self, int dim, bool half_to_float) -> Tensor
  use_c10_dispatcher: full
  dispatch:
    CPU: softmax_cpu
    CUDA: softmax_cuda
    MkldnnCPU: mkldnn_softmax
  npu_dispatch:
    NPU: _softmax_npu

- func: _softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> Tensor
  use_c10_dispatcher: full
  dispatch:
    CPU: softmax_backward_cpu
    CUDA: softmax_backward_cuda
  npu_dispatch:
    NPU: _softmax_backward_npu

- func: split.Tensor(Tensor(a) self, int split_size, int dim=0) -> Tensor(a)[]
  variants: function, method
  device_guard: False
  supports_named_tensor: True

- func: split_with_sizes(Tensor self, int[] split_sizes, int dim=0) -> Tensor[]
  variants: function, method
  device_guard: False
  supports_named_tensor: True

- func: squeeze(Tensor(a) self) -> Tensor(a)
  supports_named_tensor: True
  variants: function, method
  device_guard: False

- func: squeeze.dim(Tensor(a) self, int dim) -> Tensor(a)
  supports_named_tensor: True
  variants: function, method
  device_guard: False

- func: squeeze.dimname(Tensor(a) self, Dimname dim) -> Tensor(a)
  supports_named_tensor: True
  variants: function, method
  device_guard: False

- func: squeeze_(Tensor(a!) self) -> Tensor(a!)
  variants: method
  device_guard: False

- func: squeeze_.dim(Tensor(a!) self, int dim) -> Tensor(a!)
  variants: method
  device_guard: False

- func: squeeze_.dimname(Tensor(a!) self, Dimname dim) -> Tensor(a!)
  variants: method
  device_guard: False

- func: sspaddmm(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor
  use_c10_dispatcher: full
  variants: function, method

- func: sspaddmm.out(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: _sspaddmm_out_only_sparse
    CUDA: _sspaddmm_out_only_sparse_cuda
    SparseCPU: _sspaddmm_out_cpu
    SparseCUDA: _sspaddmm_out_cuda

- func: stack(Tensor[] tensors, int dim=0) -> Tensor
  npu_dispatch:
    NPU: stack_npu

- func: stack.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)
  npu_dispatch:
    NPU: stack_out_npu

# The signature is designed to be consistent with librosa except that it is
# missing the `pad_mode` and `center` arguments, which are taken care of at
# `torch.functional.py`. They shall be moved here once we have mapping between
# Python strings and C++ Enum in codegen.
- func: stft(Tensor self, int n_fft, int? hop_length=None, int? win_length=None, Tensor? window=None, bool normalized=False, bool onesided=True) -> Tensor
  variants: function, method

- func: stride.int(Tensor self, int dim) -> int
  use_c10_dispatcher: full
  variants: function, method
  device_guard: False
  supports_named_tensor: True

- func: stride.Dimname(Tensor self, Dimname dim) -> int
  variants: function, method
  device_guard: False
  supports_named_tensor: True

- func: sum(Tensor self, *, ScalarType? dtype=None) -> Tensor
  variants: function, method
  supports_named_tensor: True
  npu_dispatch:
    NPU: sum_npu

- func: sum.dim_IntList(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
  variants: function, method
  supports_named_tensor: True
  npu_dispatch:
    NPU: sum_npu

- func: sum.dim_DimnameList(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
  variants: function, method
  supports_named_tensor: True
  npu_dispatch:
    NPU: sum_npu

- func: sum.IntList_out(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  npu_dispatch:
    NPU: sum_out_npu

- func: sum.DimnameList_out(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  npu_dispatch:
    NPU: sum_out_npu

- func: sum_to_size(Tensor self, int[] size) -> Tensor
  variants: method
  device_guard: False

- func: sqrt(Tensor self) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: sqrt_npu

- func: sqrt_(Tensor(a!) self) -> Tensor(a!)
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: sqrt_npu_

- func: sqrt.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  npu_dispatch:
    NPU: sqrt_out_npu

- func: square(Tensor self) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: function, method

- func: square_(Tensor(a!) self) -> Tensor(a!)
  supports_named_tensor: True
  variants: function, method

- func: std(Tensor self, bool unbiased=True) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  supports_named_tensor: True
  npu_dispatch:
    NPU: std_npu

- func: std.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor
  variants: function, method
  supports_named_tensor: True
  npu_dispatch:
    NPU: std_dim_npu

- func: std_mean(Tensor self, bool unbiased=True) -> (Tensor, Tensor)
  variants: function
  supports_named_tensor: True
  npu_dispatch:
    NPU: std_mean_npu

- func: std_mean.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)
  variants: function
  supports_named_tensor: True
  npu_dispatch:
    NPU: std_mean_dim_npu

- func: std_mean.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)
  variants: function
  supports_named_tensor: True
  npu_dispatch:
    NPU: std_mean_names_npu

- func: std.out(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  npu_dispatch:
    NPU: std_out_npu

- func: std.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor
  variants: function, method
  supports_named_tensor: True
  npu_dispatch:
    NPU: std_names_npu

- func: std.names_out(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  npu_dispatch:
    NPU: std_out_npu

- func: prod(Tensor self, *, ScalarType? dtype=None) -> Tensor
  variants: function, method
  supports_named_tensor: True
  npu_dispatch:
    NPU: prod_npu
    #NPU: prod_npu_ext

- func: prod.dim_int(Tensor self, int dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
  variants: function, method
  supports_named_tensor: True
  npu_dispatch:
    NPU: prod_npu
    #NPU: prod_npu_ext

- func: prod.int_out(Tensor self, int dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  npu_dispatch:
    NPU: prod_out_npu
    #NPU: prod_out_npu_ext

- func: prod.dim_Dimname(Tensor self, Dimname dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
  variants: function, method
  supports_named_tensor: True
  npu_dispatch:
    NPU: prod_npu
    #NPU: prod_npu_ext

- func: prod.Dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  npu_dispatch:
    NPU: prod_out_npu
    #NPU: prod_out_npu_ext

- func: t(Tensor(a) self) -> Tensor(a)
  device_guard: False
  variants: function, method
  supports_named_tensor: True

- func: t_(Tensor(a!) self) -> Tensor(a!)
  device_guard: False
  variants: method

- func: tan(Tensor self) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: tan_npu

- func: tan_(Tensor(a!) self) -> Tensor(a!)
  supports_named_tensor: True
  variants: function, method
  dispatch:
    CPU: _tan__cpu
    CUDA: _tan__cuda
  npu_dispatch:
    NPU: tan_npu_

- func: tan.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: _tan_out_cpu
    CUDA: _tan_out_cuda
  npu_dispatch:
    NPU: tan_out_npu

- func: tanh(Tensor self) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: function, method
  dispatch:
    CPU: tanh
    CUDA: tanh
    QuantizedCPU: quantized_tanh
  npu_dispatch:
    NPU: tanh_npu

- func: tanh_(Tensor(a!) self) -> Tensor(a!)
  supports_named_tensor: True
  variants: function, method
  dispatch:
    CPU: _tanh__cpu
    CUDA: _tanh__cuda
  npu_dispatch:
    NPU: tanh_npu_

- func: tanh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: _tanh_out_cpu
    CUDA: _tanh_out_cuda
  npu_dispatch:
    NPU: tanh_out_npu

- func: tensordot(Tensor self, Tensor other, int[] dims_self, int[] dims_other) -> Tensor
  variants: function

# TODO: namespace threshold in 'nn'
- func: threshold(Tensor self, Scalar threshold, Scalar value) -> Tensor
  use_c10_dispatcher: full
  variants: function
  supports_named_tensor: True
  dispatch:
    CPU: threshold
    CUDA: threshold_cuda
  npu_dispatch:
    NPU: threshold_npu

- func: threshold_(Tensor(a!) self, Scalar threshold, Scalar value) -> Tensor(a!)
  variants: function
  supports_named_tensor: True
  dispatch:
    CPU: threshold_
    CUDA: threshold__cuda
  npu_dispatch:
    NPU: threshold_npu_

- func: threshold.out(Tensor self, Scalar threshold, Scalar value, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: threshold_out
    CUDA: threshold_out_cuda
  npu_dispatch:
    NPU: threshold_out_npu

- func: threshold_backward(Tensor grad_output, Tensor self, Scalar threshold) -> Tensor
  use_c10_dispatcher: full
  variants: function
  dispatch:
    CPU: threshold_backward
    CUDA: threshold_backward_cuda
  npu_dispatch:
    NPU: threshold_backward_npu

- func: transpose.int(Tensor(a) self, int dim0, int dim1) -> Tensor(a)
  variants: function, method
  device_guard: False
  supports_named_tensor: True

- func: transpose.Dimname(Tensor(a) self, Dimname dim0, Dimname dim1) -> Tensor(a)
  variants: function, method
  device_guard: False
  supports_named_tensor: True

- func: _mkldnn_transpose(Tensor self, int dim0, int dim1) -> Tensor
  use_c10_dispatcher: full
  device_guard: False
  requires_tensor: True
  dispatch:
    MkldnnCPU: mkldnn_transpose

- func: transpose_(Tensor(a!) self, int dim0, int dim1) -> Tensor(a!)
  variants: method
  device_guard: False

- func: _mkldnn_transpose_(Tensor(a!) self, int dim0, int dim1) -> Tensor(a!)
  device_guard: False
  requires_tensor: True
  dispatch:
    MkldnnCPU: mkldnn_transpose_

- func: one_hot(Tensor self, int num_classes=-1) -> Tensor
  use_c10_dispatcher: full
  python_module: nn
  variants: function
  npu_dispatch:
    NPU: one_hot_npu1

- func: flip(Tensor self, int[] dims) -> Tensor
  variants: function, method
  dispatch:
    CPU: flip_cpu
    CUDA: flip_cuda
  npu_dispatch:
    NPU: flip_npu

- func: roll(Tensor self, int[1] shifts, int[1] dims=[]) -> Tensor
  variants: function, method
  dispatch:
    CPU: roll_cpu
    CUDA: roll_cuda
  npu_dispatch:
    NPU: roll_npu

# default int[] value [0,1] should not add space after comma, since native_parse.py uses ', ' to split args

- func: rot90(Tensor self, int k=1, int[] dims=[0,1]) -> Tensor
  variants: function, method

- func: trapz.x(Tensor y, Tensor x, *, int dim=-1) -> Tensor
  use_c10_dispatcher: full

- func: trapz.dx(Tensor y, *, float dx=1, int dim=-1) -> Tensor
  use_c10_dispatcher: full

- func: _trilinear(Tensor i1, Tensor i2, Tensor i3, int[] expand1, int[] expand2, int[] expand3, int[] sumdim, int unroll_dim=1) -> Tensor

- func: triplet_margin_loss(Tensor anchor, Tensor positive, Tensor negative, float margin=1.0, float p=2, float eps=1e-06, bool swap=False, int reduction=Mean) -> Tensor
  use_c10_dispatcher: full

- func: true_divide.Tensor(Tensor self, Tensor other) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  dispatch:
    CPU: true_divide
    CUDA: true_divide
    SparseCPU: true_divide_sparse
    SparseCUDA: true_divide_sparse
  npu_dispatch:
    NPU:  true_divide_npu
  supports_named_tensor: True

- func: true_divide_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  variants: method
  dispatch:
    CPU: true_divide_
    CUDA: true_divide_
    SparseCPU: true_divide_sparse_
    SparseCUDA: true_divide_sparse_
  npu_dispatch:
    NPU:  true_divide_npu_
  supports_named_tensor: True

- func: true_divide.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: true_divide_out
    CUDA: true_divide_out
    SparseCPU: true_divide_out_sparse_zerodim
    SparseCUDA: true_divide_out_sparse_zerodim
  npu_dispatch:
    NPU:  true_divide_out_npu
  supports_named_tensor: True

- func: true_divide.Scalar(Tensor self, Scalar other) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  supports_named_tensor: True
  npu_dispatch:
    NPU:  true_divide_npu

- func: true_divide_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  variants: method
  supports_named_tensor: True
  npu_dispatch:
    NPU:  true_divide_npu_

- func: trunc(Tensor self) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: trunc_npu

- func: trunc_(Tensor(a!) self) -> Tensor(a!)
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: trunc_npu_

- func: trunc.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: trunc_out
    CUDA: trunc_out
  npu_dispatch:
    NPU: trunc_out_npu

- func: type_as(Tensor self, Tensor other) -> Tensor
  use_c10_dispatcher: full
  variants: method

- func: _has_compatible_shallow_copy_type(Tensor self, Tensor from) -> bool
  use_c10_dispatcher: full
  variants: function

- func: _unique(Tensor self, bool sorted=True, bool return_inverse=False) -> (Tensor, Tensor)
  variants: function
  dispatch:
    CPU: _unique_cpu
    CUDA: _unique_cuda

- func: unique_dim(Tensor self, int dim, bool sorted=True, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)
  variants: function
  dispatch:
    CPU: unique_dim_cpu
    CUDA: unique_dim_cuda

- func: unique_consecutive(Tensor self, bool return_inverse=False, bool return_counts=False, int? dim=None) -> (Tensor, Tensor, Tensor)
  variants: function
  dispatch:
    CPU: unique_consecutive_cpu
    CUDA: unique_consecutive_cuda

- func: unique_dim_consecutive(Tensor self, int dim, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)
  variants: function
  dispatch:
    CPU: unique_dim_consecutive_cpu
    CUDA: unique_dim_consecutive_cuda

# _unique and _unique_dim are fragile and modifying them easily cause internal break
# the below operator is a temporary hack for adding return_counts support
# Please don't rely on these two operators, they will be removed soon

- func: _unique2(Tensor self, bool sorted=True, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)
  variants: function
  dispatch:
    CPU: _unique2_cpu
    CUDA: _unique2_cuda
  npu_dispatch:
    NPU: _unique2_npu

- func: _unsafe_view(Tensor self, int[] size) -> Tensor

- func: unsqueeze(Tensor(a) self, int dim) -> Tensor(a)
  variants: function, method
  device_guard: False

- func: unsqueeze_(Tensor(a!) self, int dim) -> Tensor(a!)
  variants: method
  device_guard: False

- func: var(Tensor self, bool unbiased=True) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  supports_named_tensor: True
  npu_dispatch:
    NPU: var_npu

- func: var.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor
  variants: function, method
  supports_named_tensor: True
  npu_dispatch:
    NPU: var_npu

- func: var.out(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  npu_dispatch:
    NPU: var_out_npu

- func: var.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor
  variants: function, method
  supports_named_tensor: True
  npu_dispatch:
    NPU: var_npu

- func: var.names_out(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  npu_dispatch:
    NPU: var_out_npu

- func: var_mean(Tensor self, bool unbiased=True) -> (Tensor, Tensor)
  variants: function
  supports_named_tensor: True
  npu_dispatch:
    NPU: var_mean_npu

- func: var_mean.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)
  variants: function
  supports_named_tensor: True
  npu_dispatch:
    NPU: var_mean_npu

- func: var_mean.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)
  variants: function
  supports_named_tensor: True
  npu_dispatch:
    NPU: var_mean_npu

- func: view_as(Tensor self, Tensor other) -> Tensor
  use_c10_dispatcher: full
  variants: method
  device_guard: False

# we define both of these because 'where' does the broadcast and '_s_where' doesn't;
# this allows us to implicitly calculate the broadcast derivative, while only dealing with the
# _s_where derivative.
- func: where.self(Tensor condition, Tensor self, Tensor other) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  npu_dispatch:
    NPU: where_npu

- func: where(Tensor condition) -> Tensor[]
  variants: function
  npu_dispatch:
    NPU: where_npu

- func: _s_where(Tensor condition, Tensor self, Tensor other) -> Tensor
  use_c10_dispatcher: full
  variants: function
  npu_dispatch:
    NPU: _s_where_npu

- func: norm_except_dim(Tensor v, int pow=2, int dim=0) -> Tensor
  variants: function

# VariableType::_weight_norm does not want to be given a gap in the autograd graph,
# so we don't define "dispatch" variants for it.
- func: _weight_norm(Tensor v, Tensor g, int dim=0) -> Tensor
  use_c10_dispatcher: full
  variants: function

- func: _weight_norm_cuda_interface(Tensor v, Tensor g, int dim=0) -> (Tensor, Tensor)
  variants: function
  dispatch:
    CUDA: weight_norm_cuda

- func: _weight_norm_cuda_interface_backward(Tensor grad_w, Tensor saved_v, Tensor saved_g, Tensor saved_norms, int dim) -> (Tensor, Tensor)
  variants: function
  dispatch:
    CUDA: weight_norm_cuda_backward

- func: _weight_norm_differentiable_backward(Tensor grad_w, Tensor saved_v, Tensor saved_g, Tensor saved_norms, int dim) -> (Tensor, Tensor)
  variants: function

- func: zeros.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  device_guard: False
  npu_dispatch:
    NPU: zeros_npu

- func: zeros(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  npu_dispatch:
    NPU: zeros_npu

- func: zeros.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)
  npu_dispatch:
    NPU: zeros_out_npu

- func: zeros_like(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor
  supports_named_tensor: True
  npu_dispatch:
    NPU: zeros_like_npu

- func: _standard_gamma_grad(Tensor self, Tensor output) -> Tensor
  use_c10_dispatcher: full
  variants: function
  dispatch:
    CPU: _standard_gamma_grad_cpu
    CUDA: _standard_gamma_grad_cuda

- func: _standard_gamma(Tensor self, Generator? generator=None) -> Tensor
  variants: function
  dispatch:
    CPU: _s_gamma_cpu
    CUDA: _s_gamma_cuda

- func: _dirichlet_grad(Tensor x, Tensor alpha, Tensor total) -> Tensor
  use_c10_dispatcher: full
  dispatch:
    CPU: _dirichlet_grad_cpu
    CUDA: _dirichlet_grad_cuda

- func: _sample_dirichlet(Tensor self, Generator? generator=None) -> Tensor
  variants: function
  dispatch:
    CPU: _s_dirichlet_cpu
    CUDA: _s_dirichlet_cuda

- func: poisson(Tensor self, Generator? generator=None) -> Tensor
  dispatch:
    CPU: _s_poisson_cpu
    CUDA: _s_poisson_cuda

# When more variants get ported to native, this dispatch will get more
# complicated

- func: native_norm(Tensor self, Scalar p=2) -> Tensor
  use_c10_dispatcher: full
  dispatch:
    SparseCPU: norm_sparse
    SparseCUDA: norm_sparse

# TODO: reduce signatures down to one when optional args is available
- func: _sparse_sum(Tensor self) -> Tensor
  use_c10_dispatcher: full

- func: _sparse_sum.dtype(Tensor self, *, ScalarType dtype) -> Tensor

- func: _sparse_sum.dim(Tensor self, int[1] dim) -> Tensor

- func: _sparse_sum.dim_dtype(Tensor self, int[1] dim, *, ScalarType dtype) -> Tensor

- func: _sparse_sum_backward(Tensor grad, Tensor self, int[] dim) -> Tensor
  dispatch:
    SparseCPU: _sparse_sum_backward_cpu
    SparseCUDA: _sparse_sum_backward_cuda

- func: norm.ScalarOpt_dtype(Tensor self, Scalar? p, *, ScalarType dtype) -> Tensor
  variants: function, method
  npu_dispatch:
    NPU: norm_npu

- func: norm.Scalar(Tensor self, Scalar p=2) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  npu_dispatch:
    NPU: norm_npu

- func: norm.ScalarOpt_dim_dtype(Tensor self, Scalar? p, int[1] dim, bool keepdim, *, ScalarType dtype) -> Tensor
  variants: function, method
  npu_dispatch:
    NPU: norm_npu

- func: norm.ScalarOpt_dim(Tensor self, Scalar? p, int[1] dim, bool keepdim=False) -> Tensor
  variants: function, method
  npu_dispatch:
    NPU: norm_npu

- func: norm.dtype_out(Tensor self, Scalar? p, int[1] dim, bool keepdim, *, ScalarType dtype, Tensor(a!) out) -> Tensor(a!)
  npu_dispatch:
    NPU: norm_out_npu

- func: norm.out(Tensor self, Scalar? p, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
  npu_dispatch:
    NPU: norm_out_npu

- func: norm.names_ScalarOpt_dim_dtype(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim, *, ScalarType dtype) -> Tensor
  variants: function, method

- func: norm.names_ScalarOpt_dim(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim=False) -> Tensor
  variants: function, method

- func: norm.names_dtype_out(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim, *, ScalarType dtype, Tensor(a!) out) -> Tensor(a!)

- func: norm.names_out(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)

- func: frobenius_norm(Tensor self) -> Tensor
  use_c10_dispatcher: full
  variants: function

- func: frobenius_norm.dim(Tensor self, int[1] dim, bool keepdim=False) -> Tensor
  variants: function

- func: frobenius_norm.out(Tensor self, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
  variants: function

- func: nuclear_norm(Tensor self, bool keepdim=False) -> Tensor
  use_c10_dispatcher: full
  variants: function

- func: nuclear_norm.out(Tensor self, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
  variants: function

- func: nuclear_norm.dim(Tensor self, int[2] dim, bool keepdim=False) -> Tensor
  variants: function

- func: nuclear_norm.dim_out(Tensor self, int[2] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
  variants: function

- func: clone(Tensor self, *, MemoryFormat? memory_format=None) -> Tensor
  variants: function, method
  dispatch:
    CPU: clone
    CUDA: clone
    SparseCPU: clone_sparse
    SparseCUDA: clone_sparse
    MkldnnCPU: mkldnn_clone
    QuantizedCPU: quantized_clone
  npu_dispatch:
    NPU: clone_npu
  supports_named_tensor: True

- func: resize_as_(Tensor(a!) self, Tensor the_template, *, MemoryFormat? memory_format=None) -> Tensor(a!)
  manual_kernel_registration: True
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: resize_as_npu_

- func: pow.Tensor_Scalar_out(Tensor self, Scalar exponent, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: pow_out
    CUDA: pow_out
    SparseCPU: pow_out_sparse_scalar
    SparseCUDA: pow_out_sparse_scalar
  npu_dispatch:
    NPU: pow_out_npu

- func: pow.Tensor_Scalar(Tensor self, Scalar exponent) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  supports_named_tensor: True
  dispatch:
    CPU: pow
    CUDA: pow
    SparseCPU: pow_sparse_scalar
    SparseCUDA: pow_sparse_scalar
  npu_dispatch:
    NPU: pow_npu

- func: zero_(Tensor(a!) self) -> Tensor(a!)
  supports_named_tensor: True
  variants: method, function
  dispatch:
    CPU: zero_
    CUDA: zero_
    SparseCPU: zero_sparse_
    SparseCUDA: zero_sparse_
    MkldnnCPU: mkldnn_zero_
  npu_dispatch:
    NPU: zero_npu_

- func: one_(Tensor(a!) self) -> Tensor(a!)
  supports_named_tensor: True
  variants: method, function
  npu_dispatch_only:
    NPU: one_npu_

- func: sub.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: sub_out
    CUDA: sub_out
    SparseCPU: sub_out_sparse
    SparseCUDA: sub_out_sparse
  supports_named_tensor: True
  npu_dispatch:
    NPU: sub_out_npu

- func: sub.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  dispatch:
    CPU: sub
    CUDA: sub
    SparseCPU: sub_sparse
    SparseCUDA: sub_sparse
  npu_dispatch:
    NPU: sub_npu
  supports_named_tensor: True

- func: sub_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> Tensor(a!)
  variants: method
  dispatch:
    CPU: sub_
    CUDA: sub_
    SparseCPU: sub_sparse_
    SparseCUDA: sub_sparse_
  npu_dispatch:
    NPU: sub_npu_
  supports_named_tensor: True

# For C++ only, until we have conversion from C++ numbers to Tensor
- func: sub.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  supports_named_tensor: True
  npu_dispatch:
    NPU: sub_npu

- func: sub_.Scalar(Tensor(a!) self, Scalar other, Scalar alpha=1) -> Tensor(a!)
  variants: method
  supports_named_tensor: True
  npu_dispatch:
    NPU: sub_npu_

- func: rsub.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor
  use_c10_dispatcher: full
  variants: function
  supports_named_tensor: True
  npu_dispatch:
    NPU: rsub_npu

# For C++ only, until we have conversion from C++ numbers to Tensor
- func: rsub.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor
  use_c10_dispatcher: full
  variants: function
  supports_named_tensor: True
  npu_dispatch:
    NPU: rsub_npu

# Functionally the same as addmm, but we give it a different derivative formula
# that doesn't propagate gradients to non-present entries on sparse.
- func: _sparse_addmm(Tensor self, Tensor sparse, Tensor dense, *, Scalar beta=1, Scalar alpha=1) -> Tensor
  use_c10_dispatcher: full
  named_guard: False

- func: addmm.out(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: legacy::cpu::_th_addmm_out
    CUDA: legacy::cuda::_th_addmm_out
    SparseCPU: addmm_out_sparse_dense_cpu
    SparseCUDA: addmm_out_sparse_dense_cuda
  npu_dispatch:
    NPU: addmm_out_npu
  supports_named_tensor: True

- func: addmm(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  dispatch:
    CPU: legacy::cpu::_th_addmm
    CUDA: legacy::cuda::_th_addmm
    SparseCPU: addmm_sparse_dense_cpu
    SparseCUDA: addmm_sparse_dense_cuda
  npu_dispatch:
    NPU: addmm_npu
  supports_named_tensor: True

- func: addmm_(Tensor(a!) self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)
  variants: method
  dispatch:
    CPU: legacy::cpu::_th_addmm_
    CUDA: legacy::cuda::_th_addmm_
    # Warning!  For whatever reason, the inplace sparse addmm is NON
    # broadcasting
    SparseCPU: s_addmm_sparse_dense_cpu_
    SparseCUDA: s_addmm_sparse_dense_cuda_
  npu_dispatch:
    NPU: addmm_npu_
  supports_named_tensor: True

# NOTE [ Sparse: autograd and API ]
#
#
# Sparse Tensor Constructors
# ~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# The API entry points to sparse tensor construction should be
# `sparse_coo tensor` and `_sparse_coo_tensor_unsafe`. Depending on whether the
# indices and values tensors are given, they eventually dispatch to either
# `sparse_coo_tensor_with_dims` or `sparse_coo_tensor_with_dims_and_tensors`.
#
# The autograd support for ctor is implement on `sparse_coo_tensor_with_dims_and_tensors`.
#
# The API methods `sparse_coo tensor` and `_sparse_coo_tensor_unsafe`
# **must not** have specific type dispatches because otherwise codegen will
# consider them as abstract methods (see Note [Abstract ATen methods]), dispatch
# using **Tensor** type, and thus lose autograd tracking on the actual method
# they dispatch to, e.g., `sparse_coo_tensor_with_dims_and_tensors`.
#
# The actual ctors `sparse_coo_tensor_with_dims` and `sparse_coo_tensor_with_dims_and_tensors`,
# on the other hand, need to create `SparseTensorImpl` and know nothing about
# how `VariableType`s work. So they need to be dispatched using Tensor types.
# We thus put `requires_tensor=True` to ensure that `VariableType` will unwrap
# the given variables and call with the Tensor type.
#
#
# Sparse Methods API Design
# ~~~~~~~~~~~~~~~~~~~~~~~~~
#
# Goals: 1. Flexible API for users to write custom sparse ops
#        2. ctor and member accessor with autograd support
#
# To achieve 1, we need to provide a set of *dangerous* APIs (dangerous in the
# sense that misusing them will break sparse tensor invariant and may out in
# unexpected behavior, e.g., crash). These methods are all prefixed with
# underscore "_" to indicate that they should be used with care. We provide:
#
#   + `_indices()`: returns the *raw* indices within the sparse tensor (not just
#                   sharing storage). Any inplace operation will change the
#                   actual indices, including t_, set_, as_strided_, resize_,
#                   etc.
#   + `_values()`: returns the *raw* values within the sparse tensor. Similar
#                  semantics as `_indices()`
#   + `_nnz()`: returns the number of non-zero entries. This will always be
#               determined by the shapes of indices and values.
#   + `_coalesced_(bool)`: inplace sets whether the tensor is coalesced, and
#                          returns itself.
#
# These methods are very useful in writing new operations, e.g., a custom
# autograd Function.
#
# We also provide other public *safe* APIs:
#   + `indices()`: returns a **view** of the indices tensor if the sparse tensor
#                  is **coalesced**.
#   + `values()`: returns a **view** of the values tensor if the containing
#                 sparse tensor is **coalesced**.
#   + `sparse_dim()`: number of sparse dimensions
#   + `dense_dim()`: number of dense dimensions
#   + `is_coalesced()`: whether the sparse tensor is coalesced
#
# `_indices()` and `_values()` should returns the raw indices and values dense
# tensors within a sparse tensor. They can be quite unsafe with inplace
# operations like `t_()`, and exposes uncoalesced indices and values. The public
# recommended API is `indices()` and `values()`, both of which first check that
# the tensor is coalesced and return views on those tensors.
#
#
# Autograd Support
# ~~~~~~~~~~~~~~~~
#
# Autograd is supported on `values()` and sparse tensor ctor with indices and
# values tensors. E.g., `torch.sparse_coo_tensor(i, v).values().sum()` is
# differentiable w.r.t. `v`.
#
# NB: The `values()` and `_values()` operators are special in that they are
# layout-aware, i.e., the output depends not just on the data it represents, but
# also on the input layout details (in this case, the `indices` tensor). See
# NOTE [ as_strided Backward and layout-aware/agnostic autograd ] in Functions.cpp
# for discussion on layout-aware vs layout-agnostic autograd. Since PyTorch ops
# operate in the layout-agnostic mode, similar to `as_strided`, backward of
# these two operators need to consider them in a layout-agnostic way:
#   + `values()`:
#     Input is coalesced.
#     We just pretend having `input.indices()` as an additional argument
#     `input_indices`, then forward is similar to
#     `input.to(kStrided).index_select(input_indices)` regardless of the layout.
#     Note that `values()` normally is layout-aware even if we constrain
#     ourselves on sparse inputs since it may include all zeros values entries
#     as "present" entries.
#   + `_values()`:
#     Input may be uncoalesced.
#     It is not straightforward to construct a layout-agnostic version because
#     duplicate indices entries may exist and additional parameterization is
#     needed to distribute the value into different values entries. Furthermore,
#     this op is intended to provide ways to write custom sparse ops, rather
#     than being used in autograd graph, so it is marked as *non-differentiable*
#     in derivatives.yaml.
#
# Before reading the following, see NOTE [ Autograd Variable Views ] in
# variable.h for details on views that are tracked by autograd, and views that
# are not.
#
# Moreover, these methods return tensors that share storage with inputs, so we
# mark these methods as view ops to support autograd history tracking.
# The sparse tensor ctor output should technically be view of both input indices
# and values tensors, but currently we only support setting as view of a single
# Variable, so it is only view of the values tensor.
# TODO: clone indices in sparse tensor ctor.
#
# For other methods that return outputs that share storage with inputs, i.e.,
# `indices()` and `_indices()`. We mark their outputs as non-differentiable, so
# the view relation is not tracked by autograd, but the version counter is still
# shared. In other words, their outputs are non-differentiable views of the
# sparse tensor.

# FIXME: would be nicer if TensorOptions was optional based; not adding default arguments for options given
# the default would never make sense.
- func: sparse_coo_tensor.size(int[] size, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor

- func: sparse_coo_tensor.indices(Tensor indices, Tensor values, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor

- func: sparse_coo_tensor.indices_size(Tensor indices, Tensor values, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor

- func: _sparse_coo_tensor_unsafe(Tensor indices, Tensor values, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor

- func: _sparse_coo_tensor_with_dims(int sparse_dim, int dense_dim, int[] size, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor
  dispatch:
    SparseCPU: new_with_dims_sparse
    SparseCUDA: new_with_dims_sparse
  requires_tensor: True

- func: _sparse_coo_tensor_with_dims_and_tensors(int sparse_dim, int dense_dim, int[] size, Tensor indices, Tensor values, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor
  dispatch:
    SparseCPU: new_with_dims_and_tensor_sparse
    SparseCUDA: new_with_dims_and_tensor_sparse
  requires_tensor: True

- func: sparse_resize_(Tensor(a!) self, int[] size, int sparse_dim, int dense_dim) -> Tensor(a!)
  variants: method
  dispatch:
    SparseCPU: sparse_resize_
    SparseCUDA: sparse_resize_
  requires_tensor: True

- func: sparse_resize_and_clear_(Tensor(a!) self, int[] size, int sparse_dim, int dense_dim) -> Tensor(a!)
  variants: method
  dispatch:
    SparseCPU: sparse_resize_and_clear_
    SparseCUDA: sparse_resize_and_clear_
  requires_tensor: True

- func: sparse_mask(Tensor self, Tensor mask) -> Tensor
  use_c10_dispatcher: full
  variants: method
  dispatch:
    SparseCPU: sparse_mask_cpu
    SparseCUDA: sparse_mask_cuda
  requires_tensor: True

- func: to_dense(Tensor self) -> Tensor
  use_c10_dispatcher: full
  variants: method
  dispatch:
    SparseCPU: sparse_to_dense
    SparseCUDA: sparse_to_dense
    MkldnnCPU: mkldnn_to_dense
  requires_tensor: True

- func: to_dense_backward(Tensor grad, Tensor input) -> Tensor
  use_c10_dispatcher: full

- func: sparse_dim(Tensor self) -> int
  use_c10_dispatcher: full
  variants: method
  dispatch:
    SparseCPU: sparse_dim_sparse
    SparseCUDA: sparse_dim_sparse
  requires_tensor: True
  device_guard: False

# legacy method
- func: _dimI(Tensor self) -> int
  use_c10_dispatcher: full
  variants: method
  dispatch:
    SparseCPU: sparse_dim_sparse
    SparseCUDA: sparse_dim_sparse
  requires_tensor: True
  device_guard: False

- func: dense_dim(Tensor self) -> int
  use_c10_dispatcher: full
  variants: method
  dispatch:
    SparseCPU: dense_dim_sparse
    SparseCUDA: dense_dim_sparse
  requires_tensor: True
  device_guard: False

# legacy method
- func: _dimV(Tensor self) -> int
  use_c10_dispatcher: full
  variants: method
  dispatch:
    SparseCPU: dense_dim_sparse
    SparseCUDA: dense_dim_sparse
  requires_tensor: True
  device_guard: False

- func: _nnz(Tensor self) -> int
  use_c10_dispatcher: full
  variants: method
  dispatch:
    SparseCPU: _nnz_sparse
    SparseCUDA: _nnz_sparse
  requires_tensor: True
  device_guard: False

- func: coalesce(Tensor self) -> Tensor
  use_c10_dispatcher: full
  variants: method
  dispatch:
    SparseCPU: coalesce_sparse_cpu
    SparseCUDA: coalesce_sparse_cuda
  requires_tensor: True

- func: is_coalesced(Tensor self) -> bool
  use_c10_dispatcher: full
  variants: method
  dispatch:
    SparseCPU: is_coalesced_sparse
    SparseCUDA: is_coalesced_sparse
  requires_tensor: True
  device_guard: False
  supports_named_tensor: True

- func: _indices(Tensor(a) self) -> Tensor(a)
  variants: method
  dispatch:
    SparseCPU: _indices_sparse
    SparseCUDA: _indices_sparse
  requires_tensor: True
  device_guard: False

- func: _values(Tensor(a) self) -> Tensor(a)
  variants: method
  dispatch:
    SparseCPU: _values_sparse
    SparseCUDA: _values_sparse
  requires_tensor: True
  device_guard: False

# This method doesn't do any check but only directly sets the flag. So it can be
# a bit unsafe. Similar to _indices and _values, this is useful for implementing
# custom sparse operations in Python/C++ extension.
- func: _coalesced_(Tensor(a!) self, bool coalesced) -> Tensor(a!)
  variants: method
  dispatch:
    SparseCPU: _coalesced_sparse_
    SparseCUDA: _coalesced_sparse_
  requires_tensor: True
  device_guard: False

- func: indices(Tensor(a) self) -> Tensor(a)
  variants: method
  dispatch:
    SparseCPU: indices_sparse
    SparseCUDA: indices_sparse
  requires_tensor: True
  device_guard: False

- func: values(Tensor(a) self) -> Tensor(a)
  variants: method
  dispatch:
    SparseCPU: values_sparse
    SparseCUDA: values_sparse
  requires_tensor: True
  device_guard: False

- func: hspmm.out(Tensor mat1, Tensor mat2, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    SparseCPU: hspmm_out_sparse_cpu
    SparseCUDA: hspmm_out_sparse_cuda
  requires_tensor: True

- func: hspmm(Tensor mat1, Tensor mat2) -> Tensor
  use_c10_dispatcher: full
  dispatch:
    SparseCPU: hspmm_sparse_cpu
    SparseCUDA: hspmm_sparse_cuda
  requires_tensor: True

- func: copy_sparse_to_sparse_(Tensor(a!) self, Tensor src, bool non_blocking=False) -> Tensor(a!)
  variants: function
  dispatch:
    SparseCPU: copy_sparse_
    SparseCUDA: copy_sparse_
  requires_tensor: True

- func: unbind.int(Tensor(a) self, int dim=0) -> Tensor(a)[]
  variants: function, method
  supports_named_tensor: True

- func: unbind.Dimname(Tensor(a) self, Dimname dim) -> Tensor(a)[]
  variants: function, method
  supports_named_tensor: True

- func: to_sparse.sparse_dim(Tensor self, int sparse_dim) -> Tensor
  use_c10_dispatcher: full
  variants: method
  dispatch:
    CPU: dense_to_sparse
    CUDA: dense_to_sparse

- func: to_sparse(Tensor self) -> Tensor
  use_c10_dispatcher: full
  variants: method
  dispatch:
    CPU: dense_to_sparse
    CUDA: dense_to_sparse

- func: to_mkldnn(Tensor self) -> Tensor
  use_c10_dispatcher: full
  variants: method
  dispatch:
    CPU: dense_to_mkldnn

- func: mkldnn_reorder_conv2d_weight(Tensor self, int[2] padding=0, int[2] stride=1, int[2] dilation=1, int groups=1) -> Tensor
  variants: function
  python_module: nn
  dispatch:
    MkldnnCPU: mkldnn_reorder_conv2d_weight

- func: to_mkldnn_backward(Tensor grad, Tensor input) -> Tensor
  use_c10_dispatcher: full

- func: quantize_per_tensor(Tensor self, float scale, int zero_point, ScalarType dtype) -> Tensor
  variants: function
  dispatch:
    CPU: quantize_per_tensor_cpu
  npu_dispatch:
    NPU: quantize_per_tensor_npu

- func: quantize_per_channel(Tensor self, Tensor scales, Tensor zero_points, int axis, ScalarType dtype) -> Tensor
  variants: function
  dispatch:
    CPU: quantize_per_channel_cpu
  npu_dispatch:
    NPU: quantize_per_channel_npu

- func: dequantize(Tensor self) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  dispatch:
    QuantizedCPU: dequantize_quant

- func: q_scale(Tensor self) -> float
  use_c10_dispatcher: full
  variants: function, method
  dispatch:
    QuantizedCPU: q_scale_quant

- func: q_zero_point(Tensor self) -> int
  use_c10_dispatcher: full
  variants: function, method
  dispatch:
    QuantizedCPU: q_zero_point_quant

- func: q_per_channel_scales(Tensor self) -> Tensor
  variants: function, method
  dispatch:
    QuantizedCPU: q_per_channel_scales_quant

- func: q_per_channel_zero_points(Tensor self) -> Tensor
  variants: function, method
  dispatch:
    QuantizedCPU: q_per_channel_zero_points_quant

- func: q_per_channel_axis(Tensor self) -> int
  variants: function, method
  dispatch:
    QuantizedCPU: q_per_channel_axis_quant

- func: int_repr(Tensor self) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  dispatch:
    QuantizedCPU: int_repr_quant

- func: _make_per_tensor_quantized_tensor(Tensor self, float scale, int zero_point) -> Tensor
  use_c10_dispatcher: full
  dispatch:
    CPU: make_per_tensor_quantized_tensor_cpu

- func: _make_per_channel_quantized_tensor(Tensor self, Tensor scale, Tensor zero_point, int axis) -> Tensor
  dispatch:
    CPU: make_per_channel_quantized_tensor_cpu

- func: qscheme(Tensor self) -> QScheme
  use_c10_dispatcher: full
  variants: method
  dispatch:
    QuantizedCPU: qscheme_quant

- func: fake_quantize_per_tensor_affine(Tensor self, float scale, int zero_point, int quant_min, int quant_max) -> Tensor
  use_c10_dispatcher: full
  variants: function

- func: fake_quantize_per_tensor_affine_backward(Tensor grad, Tensor self, float scale, int zero_point, int quant_min, int quant_max) -> Tensor
  use_c10_dispatcher: full
  variants: function

- func: fake_quantize_per_channel_affine(Tensor self, Tensor scale, Tensor zero_point, int axis, int quant_min, int quant_max) -> Tensor
  use_c10_dispatcher: full
  variants: function

- func: fake_quantize_per_channel_affine_backward(Tensor grad, Tensor self, Tensor scale, Tensor zero_point, int axis, int quant_min, int quant_max) -> Tensor
  use_c10_dispatcher: full
  variants: function

# to(Device) must not exist because all constructors of Device also works for
# TensorOptions. Otherwise, an ambiguity error is thrown.
# See NOTE [ TensorOptions Constructors ].
- func: to.dtype_layout(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False, bool non_blocking=False, bool copy=False, MemoryFormat? memory_format=None) -> Tensor
  variants: method
  device_guard: False
  supports_named_tensor: True
  npu_dispatch:
    NPU: to_npu

- func: to.device(Tensor self, Device device, ScalarType dtype, bool non_blocking=False, bool copy=False, MemoryFormat? memory_format=None) -> Tensor
  variants: method
  device_guard: False
  supports_named_tensor: True
  npu_dispatch:
    NPU: to_device_npu

- func: to.dtype(Tensor self, ScalarType dtype, bool non_blocking=False, bool copy=False, MemoryFormat? memory_format=None) -> Tensor
  variants: method
  device_guard: False
  supports_named_tensor: True
  npu_dispatch:
    NPU: to_dtype_npu

- func: to.other(Tensor self, Tensor other, bool non_blocking=False, bool copy=False, MemoryFormat? memory_format=None) -> Tensor
  variants: method
  device_guard: False
  npu_dispatch:
    NPU: to_other_npu

- func: meshgrid(Tensor[] tensors) -> Tensor[]

- func: cartesian_prod(Tensor[] tensors) -> Tensor
  variants: function

- func: combinations(Tensor self, int r=2, bool with_replacement=False) -> Tensor
  use_c10_dispatcher: full
  variants: function

- func: item(Tensor self) -> Scalar
  use_c10_dispatcher: full
  variants: method
  supports_named_tensor: True

- func: result_type.Tensor(Tensor tensor, Tensor other) -> ScalarType
  variants: function

- func: result_type.Scalar(Tensor tensor, Scalar other) -> ScalarType
  variants: function

- func: result_type.Scalar_Tensor(Scalar scalar, Tensor tensor) -> ScalarType
  variants: function

- func: result_type.Scalar_Scalar(Scalar scalar1, Scalar scalar2) -> ScalarType

- func: can_cast(ScalarType from, ScalarType to) -> bool
  variants: function

- func: promote_types(ScalarType type1, ScalarType type2) -> ScalarType
  variants: function

# NB: Does NOT check precondition that numel == 1
- func: _local_scalar_dense(Tensor self) -> Scalar
  use_c10_dispatcher: full
  dispatch:
    CPU: _local_scalar_dense_cpu
    CUDA: _local_scalar_dense_cuda
  npu_dispatch:
    NPU: _local_scalar_dense_npu
  variants: function
  supports_named_tensor: True

# Fused RNN kernels
- func: _thnn_fused_lstm_cell(Tensor input_gates, Tensor hidden_gates, Tensor cx, Tensor? input_bias=None, Tensor? hidden_bias=None) -> (Tensor, Tensor, Tensor)
  dispatch:
    CUDA: _thnn_fused_lstm_cell_cuda

- func: _thnn_fused_lstm_cell_backward(Tensor? grad_hy, Tensor? grad_cy, Tensor cx, Tensor cy, Tensor workspace, bool has_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor)
  dispatch:
    CUDA: _thnn_fused_lstm_cell_backward_cuda

- func: _thnn_differentiable_lstm_cell_backward(Tensor? grad_hy, Tensor? grad_cy, Tensor input_gates, Tensor hidden_gates, Tensor? input_bias, Tensor? hidden_bias, Tensor cx, Tensor cy) -> (Tensor, Tensor, Tensor, Tensor, Tensor)

- func: _thnn_fused_gru_cell(Tensor input_gates, Tensor hidden_gates, Tensor hx, Tensor? input_bias=None, Tensor? hidden_bias=None) -> (Tensor, Tensor)
  dispatch:
    CUDA: _thnn_fused_gru_cell_cuda

- func: _thnn_fused_gru_cell_backward(Tensor grad_hy, Tensor workspace, bool has_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor)
  dispatch:
    CUDA: _thnn_fused_gru_cell_backward_cuda

- func: _thnn_differentiable_gru_cell_backward(Tensor grad_hy, Tensor input_gates, Tensor hidden_gates, Tensor hx, Tensor? input_bias, Tensor? hidden_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor)

# RNN cells and layers
- func: lstm.input(Tensor input, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor, Tensor)
  npu_dispatch:
    NPU: lstm_npu

- func: lstm.data(Tensor data, Tensor batch_sizes, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor, Tensor)
  npu_dispatch:
    NPU: lstm_npu

- func: gru.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)
  npu_dispatch:
    NPU: gru_npu_

- func: gru.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)

- func: rnn_tanh.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)

- func: rnn_tanh.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)

- func: rnn_relu.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)

- func: rnn_relu.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)

- func: lstm_cell(Tensor input, Tensor[] hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> (Tensor, Tensor)
  npu_dispatch:
    NPU: lstm_cell_npu

- func: gru_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> Tensor

- func: rnn_tanh_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> Tensor

- func: rnn_relu_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> Tensor

# Quantized RNN layers
- func: quantized_lstm(Tensor input, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first, *, ScalarType? dtype=None, bool use_dynamic=False) -> (Tensor, Tensor, Tensor)

- func: quantized_lstm.data(Tensor data, Tensor batch_sizes, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, *, ScalarType? dtype=None, bool use_dynamic=False) -> (Tensor, Tensor, Tensor)

# Quantized GRU layers

- func: quantized_gru.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)

- func: quantized_gru.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)

# Quantized RNN cells
- func: quantized_lstm_cell(Tensor input, Tensor[] hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> (Tensor, Tensor)

- func: quantized_gru_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> Tensor
  use_c10_dispatcher: full

- func: quantized_rnn_relu_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> Tensor
  use_c10_dispatcher: full

- func: quantized_rnn_tanh_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> Tensor
  use_c10_dispatcher: full

# PackedSequence utilities
- func: _pack_padded_sequence(Tensor input, Tensor lengths, bool batch_first) -> (Tensor, Tensor)
  npu_dispatch:
    NPU: _pack_padded_sequence_npu

- func: _pack_padded_sequence_backward(Tensor grad, int[] input_size, Tensor batch_sizes, bool batch_first) -> Tensor

- func: _pad_packed_sequence(Tensor data, Tensor batch_sizes, bool batch_first, Scalar padding_value, int total_length) -> (Tensor, Tensor)
  npu_dispatch:
    NPU: _pad_packed_sequence_npu

# wrappers for legacy TH methods

- func: set_.source_Storage(Tensor(a!) self, Storage source) -> Tensor(a!)
  variants: method
  device_guard: False
  dispatch:
    CPU: set_
    CUDA: set_
  npu_dispatch:
    NPU: set_npu_

- func: set_.source_Storage_storage_offset(Tensor(a!) self, Storage source, int storage_offset, int[] size, int[] stride=[]) -> Tensor(a!)
  variants: method
  device_guard: False
  dispatch:
    CPU: legacy::cpu::_th_set_
    CUDA: legacy::cuda::_th_set_
    QuantizedCPU: set_storage
  npu_dispatch:
    NPU: set_npu_

- func: set_.source_Tensor(Tensor(a!) self, Tensor source) -> Tensor(a!)
  variants: method
  device_guard: False
  dispatch:
    CPU: set_tensor_
    CUDA: set_tensor_
  npu_dispatch:
    NPU: set_npu_

- func: set_(Tensor(a!) self) -> Tensor(a!)
  variants: method
  dispatch:
    CPU: set_cpu_
    CUDA: set_cuda_
  npu_dispatch:
    NPU: set_npu_

- func: set_quantizer_(Tensor(a!) self, ConstQuantizerPtr quantizer) -> Tensor(a!)
  variants: method
  dispatch:
    QuantizedCPU: set_quantizer_

- func: is_set_to(Tensor self, Tensor tensor) -> bool
  use_c10_dispatcher: full
  variants: method
  device_guard: False
  dispatch:
    CPU: is_set_to
    CUDA: is_set_to

- func: masked_fill_.Scalar(Tensor(a!) self, Tensor mask, Scalar value) -> Tensor(a!)
  variants: method
  dispatch:
    CPU: masked_fill__cpu
    CUDA: masked_fill__cuda
  npu_dispatch:
    NPU: masked_fill_npu_
  supports_named_tensor: True

- func: masked_fill.Scalar(Tensor self, Tensor mask, Scalar value) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  supports_named_tensor: True

- func: masked_fill_.Tensor(Tensor(a!) self, Tensor mask, Tensor value) -> Tensor(a!)
  variants: method
  dispatch:
    CPU: masked_fill__cpu
    CUDA: masked_fill__cuda
  npu_dispatch:
    NPU: masked_fill_npu_
  supports_named_tensor: True

- func: masked_fill.Tensor(Tensor self, Tensor mask, Tensor value) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  supports_named_tensor: True

- func: masked_scatter_(Tensor(a!) self, Tensor mask, Tensor source) -> Tensor(a!)
  variants: method
  dispatch:
    CPU: masked_scatter__cpu
    CUDA: masked_scatter__cuda
  npu_dispatch:
    NPU: masked_scatter_npu_

- func: masked_scatter(Tensor self, Tensor mask, Tensor source) -> Tensor
  use_c10_dispatcher: full
  variants: function, method

- func: view(Tensor(a) self, int[] size) -> Tensor(a)
  variants: method
  device_guard: False
  dispatch:
    CPU: view
    CUDA: view
    MkldnnCPU: mkldnn_view
    QuantizedCPU: view
  npu_dispatch:
    NPU: view_npu

- func: put_(Tensor(a!) self, Tensor index, Tensor source, bool accumulate=False) -> Tensor(a!)
  variants: method
  dispatch:
    CPU: legacy::cpu::_th_put_
    CUDA: legacy::cuda::_th_put_
  npu_dispatch:
    NPU: put_npu_

- func: index_add_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> Tensor(a!)
  variants: method
  dispatch:
    CPU: index_add_cpu_
    CUDA: index_add_cuda_
  npu_dispatch:
    NPU: index_add_npu_

- func: index_add(Tensor self, int dim, Tensor index, Tensor source) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  npu_dispatch:
    NPU: index_add_npu

- func: index_add.dimname(Tensor self, Dimname dim, Tensor index, Tensor source) -> Tensor
  variants: function, method
  npu_dispatch:
    NPU: index_add_npu

- func: index_fill_.int_Scalar(Tensor(a!) self, int dim, Tensor index, Scalar value) -> Tensor(a!)
  variants: method
  supports_named_tensor: True
  dispatch:
    CPU: legacy::cpu::_th_index_fill_
    CUDA: legacy::cuda::_th_index_fill_
  npu_dispatch:
    NPU: index_fill_npu_

- func: index_fill.int_Scalar(Tensor self, int dim, Tensor index, Scalar value) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: function, method
  npu_dispatch:
    NPU: index_fill_npu

- func: index_fill_.int_Tensor(Tensor(a!) self, int dim, Tensor index, Tensor value) -> Tensor(a!)
  variants: method
  dispatch:
    CPU: index_fill_
    CUDA: index_fill_
  supports_named_tensor: True
  npu_dispatch:
    NPU: index_fill_npu_

- func: index_fill.int_Tensor(Tensor self, int dim, Tensor index, Tensor value) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  supports_named_tensor: True
  npu_dispatch:
    NPU: index_fill_npu

- func: index_fill_.Dimname_Scalar(Tensor(a!) self, Dimname dim, Tensor index, Scalar value) -> Tensor(a!)
  variants: method
  supports_named_tensor: True

- func: index_fill_.Dimname_Tensor(Tensor(a!) self, Dimname dim, Tensor index, Tensor value) -> Tensor(a!)
  variants: method
  supports_named_tensor: True

- func: index_fill.Dimname_Scalar(Tensor self, Dimname dim, Tensor index, Scalar value) -> Tensor
  variants: function, method
  supports_named_tensor: True

- func: index_fill.Dimname_Tensor(Tensor self, Dimname dim, Tensor index, Tensor value) -> Tensor
  variants: function, method
  supports_named_tensor: True

- func: scatter_.src(Tensor(a!) self, int dim, Tensor index, Tensor src) -> Tensor(a!)
  variants: method
  dispatch:
    CPU: scatter_cpu_
    CUDA: legacy::cuda::_th_scatter_
  npu_dispatch:
    NPU: scatter_npu_

- func: scatter.src(Tensor self, int dim, Tensor index, Tensor src) -> Tensor
  use_c10_dispatcher: full
  variants: function, method

- func: scatter_.value(Tensor(a!) self, int dim, Tensor index, Scalar value) -> Tensor(a!)
  variants: method
  dispatch:
    CPU: scatter_fill_cpu_
    CUDA: legacy::cuda::_th_scatter_
  npu_dispatch:
    NPU: scatter_npu_

- func: scatter.value(Tensor self, int dim, Tensor index, Scalar value) -> Tensor
  use_c10_dispatcher: full
  variants: function, method

- func: scatter.dimname_src(Tensor self, Dimname dim, Tensor index, Tensor src) -> Tensor
  variants: function, method

- func: scatter.dimname_value(Tensor self, Dimname dim, Tensor index, Scalar value) -> Tensor
  variants: function, method

- func: scatter_add_(Tensor(a!) self, int dim, Tensor index, Tensor src) -> Tensor(a!)
  variants: method
  dispatch:
    CPU: scatter_add_cpu_
    CUDA: legacy::cuda::_th_scatter_add_
  npu_dispatch:
    NPU: scatter_add_npu_

- func: scatter_add(Tensor self, int dim, Tensor index, Tensor src) -> Tensor
  use_c10_dispatcher: full
  variants: function, method
  npu_dispatch:
    NPU: scatter_add_npu

- func: scatter_add.dimname(Tensor self, Dimname dim, Tensor index, Tensor src) -> Tensor
  variants: function, method
  npu_dispatch:
    NPU: scatter_add_npu

- func: lt_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  variants: method
  npu_dispatch:
    NPU: lt_npu_

- func: lt_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  variants: method
  npu_dispatch:
    NPU: lt_npu_

- func: gt_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  variants: method
  npu_dispatch:
    NPU: gt_npu_

- func: gt_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  variants: method
  npu_dispatch:
    NPU: gt_npu_

- func: le_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  variants: method
  npu_dispatch:
    NPU: le_npu_

- func: le_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  variants: method
  npu_dispatch:
    NPU: le_npu_

- func: ge_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  variants: method
  npu_dispatch:
    NPU: ge_npu_

- func: ge_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  variants: method
  npu_dispatch:
    NPU: ge_npu_

- func: eq_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  variants: method
  npu_dispatch:
    NPU: eq_npu_

- func: eq_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  variants: method
  npu_dispatch:
    NPU: eq_npu_

- func: ne_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  variants: method
  npu_dispatch:
    NPU: ne_npu_

- func: ne_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  variants: method
  npu_dispatch:
    NPU: ne_npu_

- func: bitwise_and.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  variants: function
  dispatch:
    CPU: bitwise_and_out
    CUDA: bitwise_and_out
  npu_dispatch:
    NPU: bitwise_and_out_npu

- func: bitwise_and.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
  variants: function
  dispatch:
    CPU: bitwise_and_out
    CUDA: bitwise_and_out
  npu_dispatch:
    NPU: bitwise_and_out_npu

- func: bitwise_and.Scalar(Tensor self, Scalar other) -> Tensor
  variants: method, function
  npu_dispatch:
    NPU: bitwise_and_npu

- func: bitwise_and.Tensor(Tensor self, Tensor other) -> Tensor
  variants: method, function
  npu_dispatch:
    NPU: bitwise_and_npu

- func: bitwise_and_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  variants: method
  npu_dispatch:
    NPU: bitwise_and_npu_

- func: bitwise_and_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  variants: method
  npu_dispatch:
    NPU: bitwise_and_npu_

- func: __and__.Scalar(Tensor self, Scalar other) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  npu_dispatch:
    NPU: __and___npu

- func: __and__.Tensor(Tensor self, Tensor other) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  npu_dispatch:
    NPU: __and___npu

- func: __iand__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  variants: method

- func: __iand__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  variants: method

- func: bitwise_or.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  variants: function
  dispatch:
    CPU: bitwise_or_out
    CUDA: bitwise_or_out
  npu_dispatch:
    NPU: bitwise_or_out_npu

- func: bitwise_or.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
  variants: function
  dispatch:
    CPU: bitwise_or_out
    CUDA: bitwise_or_out
  npu_dispatch:
    NPU: bitwise_or_out_npu

- func: bitwise_or.Scalar(Tensor self, Scalar other) -> Tensor
  variants: method, function
  npu_dispatch:
    NPU: bitwise_or_npu

- func: bitwise_or.Tensor(Tensor self, Tensor other) -> Tensor
  variants: method, function
  npu_dispatch:
    NPU: bitwise_or_npu

- func: bitwise_or_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  variants: method
  npu_dispatch:
    NPU: bitwise_or_npu_

- func: bitwise_or_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  variants: method
  npu_dispatch:
    NPU: bitwise_or_npu_

- func: __or__.Scalar(Tensor self, Scalar other) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  npu_dispatch:
    NPU: __or___npu

- func: __or__.Tensor(Tensor self, Tensor other) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  npu_dispatch:
    NPU: __or___npu

- func: __ior__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  variants: method
  npu_dispatch:
    NPU: __ior___npu

- func: __ior__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  variants: method
  npu_dispatch:
    NPU: __ior___npu

- func: bitwise_xor.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  variants: function
  dispatch:
    CPU: bitwise_xor_out
    CUDA: bitwise_xor_out
  npu_dispatch:
    NPU: bitwise_xor_out_npu

- func: bitwise_xor.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
  variants: function
  dispatch:
    CPU: bitwise_xor_out
    CUDA: bitwise_xor_out
  npu_dispatch:
    NPU: bitwise_xor_out_npu

- func: bitwise_xor.Scalar(Tensor self, Scalar other) -> Tensor
  variants: method, function
  npu_dispatch:
    NPU: bitwise_xor_npu

- func: bitwise_xor.Tensor(Tensor self, Tensor other) -> Tensor
  variants: method, function
  npu_dispatch:
    NPU: bitwise_xor_npu

- func: bitwise_xor_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  variants: method
  npu_dispatch:
    NPU: bitwise_xor_npu_

- func: bitwise_xor_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  variants: method
  npu_dispatch:
    NPU: bitwise_xor_npu_

- func: __xor__.Scalar(Tensor self, Scalar other) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  npu_dispatch:
    NPU: __xor___npu

- func: __xor__.Tensor(Tensor self, Tensor other) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  npu_dispatch:
    NPU: __xor___npu

- func: __ixor__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  variants: method

- func: __ixor__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  variants: method

- func: __lshift__.Scalar(Tensor self, Scalar other) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: __lshift__
    CUDA: __lshift__
  npu_dispatch:
    NPU: __lshift___npu

- func: __lshift__.Tensor(Tensor self, Tensor other) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: __lshift__
    CUDA: __lshift__
  npu_dispatch:
    NPU: __lshift___npu

- func: __ilshift__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  variants: method
  dispatch:
    CPU: __ilshift__
    CUDA: __ilshift__
  npu_dispatch:
    NPU: __iLshift___npu

- func: __ilshift__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  variants: method
  dispatch:
    CPU: __ilshift__
    CUDA: __ilshift__
  npu_dispatch:
    NPU: __iLshift___npu

- func: __rshift__.Scalar(Tensor self, Scalar other) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: __rshift__
    CUDA: __rshift__
  npu_dispatch:
    NPU: __rshift___npu

- func: __rshift__.Tensor(Tensor self, Tensor other) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: __rshift__
    CUDA: __rshift__
  npu_dispatch:
    NPU: __rshift___npu

- func: __irshift__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  variants: method
  dispatch:
    CPU: __irshift__
    CUDA: __irshift__
  npu_dispatch:
    NPU: __iRshift___npu

- func: __irshift__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  variants: method
  dispatch:
    CPU: __irshift__
    CUDA: __irshift__
  npu_dispatch:
    NPU: __iRshift___npu

- func: lgamma_(Tensor(a!) self) -> Tensor(a!)
  supports_named_tensor: True
  variants: method
  dispatch:
    CPU: _lgamma__cpu
    CUDA: _lgamma__cuda

- func: atan2_(Tensor(a!) self, Tensor other) -> Tensor(a!)
  supports_named_tensor: True
  variants: method
  npu_dispatch:
    NPU: atan2_npu_

- func: tril_(Tensor(a!) self, int diagonal=0) -> Tensor(a!)
  variants: method
  dispatch:
    CPU: tril_cpu_
    CUDA: tril_cuda_
  npu_dispatch:
    NPU: tril_npu_

- func: triu_(Tensor(a!) self, int diagonal=0) -> Tensor(a!)
  variants: method
  dispatch:
    CPU: triu_cpu_
    CUDA: triu_cuda_
  npu_dispatch:
    NPU: triu_npu_

- func: digamma_(Tensor(a!) self) -> Tensor(a!)
  supports_named_tensor: True
  variants: method

- func: polygamma_(Tensor(a!) self, int n) -> Tensor(a!)
  supports_named_tensor: True
  variants: method

- func: renorm_(Tensor(a!) self, Scalar p, int dim, Scalar maxnorm) -> Tensor(a!)
  variants: method
  dispatch:
    CPU: legacy::cpu::_th_renorm_
    CUDA: legacy::cuda::_th_renorm_
  npu_dispatch:
    NPU: renorm_npu_

- func: pow_.Scalar(Tensor(a!) self, Scalar exponent) -> Tensor(a!)
  supports_named_tensor: True
  variants: method
  dispatch:
    CPU: pow_
    CUDA: pow_
  npu_dispatch:
    NPU: pow_npu_

- func: pow_.Tensor(Tensor(a!) self, Tensor exponent) -> Tensor(a!)
  supports_named_tensor: True
  variants: method
  dispatch:
    CPU: pow_
    CUDA: pow_
  npu_dispatch:
    NPU: pow_npu_

- func: lerp_.Scalar(Tensor(a!) self, Tensor end, Scalar weight) -> Tensor(a!)
  variants: method
  dispatch:
    CPU: lerp_cpu_scalar_
    CUDA: lerp_cuda_scalar_
  npu_dispatch:
    NPU: lerp_npu_

- func: lerp_.Tensor(Tensor(a!) self, Tensor end, Tensor weight) -> Tensor(a!)
  variants: method
  dispatch:
    CPU: lerp_cpu_tensor_
    CUDA: lerp_cuda_tensor_
  npu_dispatch:
    NPU: lerp_npu_

- func: fmod_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  variants: method
  dispatch:
    CPU: fmod_
    CUDA: legacy::cuda::_th_fmod_
  npu_dispatch:
    NPU: fmod_npu_

- func: fmod_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  variants: method
  dispatch:
    CPU: fmod_
    CUDA: legacy::cuda::_th_fmod_
  npu_dispatch:
    NPU: fmod_npu_

- func: remainder_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
  variants: method
  dispatch:
    CPU: remainder_
    CUDA: remainder_
  npu_dispatch:
    NPU: remainder_npu_

- func: remainder_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
  variants: method
  dispatch:
    CPU: remainder_
    CUDA: remainder_
  npu_dispatch:
    NPU: remainder_npu_

- func: addbmm_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)
  variants: method
  dispatch:
    CPU: legacy::cpu::_th_addbmm_
    CUDA: legacy::cuda::_th_addbmm_
  npu_dispatch:
    NPU: addbmm_npu_

- func: addbmm.out(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: legacy::cpu::_th_addbmm_out
    CUDA: legacy::cuda::_th_addbmm_out
  npu_dispatch:
    NPU: addbmm_out_npu

- func: addbmm(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: legacy::cpu::_th_addbmm
    CUDA: legacy::cuda::_th_addbmm
  npu_dispatch:
    NPU: addbmm_npu

- func: addcdiv_(Tensor(a!) self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor(a!)
  variants: method
  supports_named_tensor: True
  npu_dispatch:
    NPU: addcdiv_npu_

- func: random_.from(Tensor(a!) self, int from, int? to, *, Generator? generator=None) -> Tensor(a!)
  variants: method
  supports_named_tensor: True
  npu_dispatch:
    NPU: random_npu_

- func: random_.to(Tensor(a!) self, int to, *, Generator? generator=None) -> Tensor(a!)
  variants: method
  supports_named_tensor: True
  npu_dispatch:
    NPU: random_npu_

- func: random_(Tensor(a!) self, *, Generator? generator=None) -> Tensor(a!)
  variants: method
  supports_named_tensor: True
  npu_dispatch:
    NPU: random_npu_

- func: uniform_(Tensor(a!) self, float from=0, float to=1, *, Generator? generator=None) -> Tensor(a!)
  variants: method
  dispatch:
    CPU: legacy::cpu::_th_uniform_
    CUDA: uniform_cuda_
  npu_dispatch:
    NPU: uniform_npu_
  supports_named_tensor: True

- func: cauchy_(Tensor(a!) self, float median=0, float sigma=1, *, Generator? generator=None) -> Tensor(a!)
  variants: method
  supports_named_tensor: True

- func: log_normal_(Tensor(a!) self, float mean=1, float std=2, *, Generator? generator=None) -> Tensor(a!)
  variants: method
  supports_named_tensor: True

- func: exponential_(Tensor(a!) self, float lambd=1, *, Generator? generator=None) -> Tensor(a!)
  variants: method
  supports_named_tensor: True

- func: geometric_(Tensor(a!) self, float p, *, Generator? generator=None) -> Tensor(a!)
  variants: method
  supports_named_tensor: True

# wrappers for TH functions

- func: diag.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: legacy::cpu::_th_diag_out
    CUDA: legacy::cuda::_th_diag_out
  npu_dispatch:
    NPU: diag_out_npu

- func: diag(Tensor self, int diagonal=0) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: legacy::cpu::_th_diag
    CUDA: legacy::cuda::_th_diag
  npu_dispatch:
    NPU: diag_npu

- func: cross.out(Tensor self, Tensor other, int? dim=None, *, Tensor(a!) out) -> Tensor(a!)
  npu_dispatch:
    NPU: cross_out_npu

- func: cross(Tensor self, Tensor other, int? dim=None) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  npu_dispatch:
    NPU: cross_npu

- func: triu.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: triu_cpu_out
    CUDA: triu_cuda_out
  npu_dispatch:
    NPU: triu_out_npu

- func: triu(Tensor self, int diagonal=0) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  npu_dispatch:
    NPU: triu_npu

- func: tril.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: tril_cpu_out
    CUDA: tril_cuda_out
  npu_dispatch:
    NPU: tril_out_npu

- func: tril(Tensor self, int diagonal=0) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  npu_dispatch:
    NPU: tril_npu

- func: tril_indices(int row, int col, int offset=0, *, ScalarType? dtype=long, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  dispatch:
    CPU: tril_indices_cpu
    CUDA: tril_indices_cuda
  npu_dispatch:
    NPU: tril_indices_npu

- func: triu_indices(int row, int col, int offset=0, *, ScalarType? dtype=long, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  dispatch:
    CPU: triu_indices_cpu
    CUDA: triu_indices_cuda
  npu_dispatch:
    NPU: triu_indices_npu

- func: trace(Tensor self) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: legacy::cpu::_th_trace
    CUDA: legacy::cuda::_th_trace

- func: ne.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: ne_out
    CUDA: ne_out
    QuantizedCPU: ne_out_quantized_cpu
  npu_dispatch:
    NPU: ne_out_npu

- func: ne.Scalar(Tensor self, Scalar other) -> Tensor
  supports_named_tensor: True
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: ne
    CUDA: ne
    QuantizedCPU: ne_quantized_cpu
  npu_dispatch:
    NPU: ne_npu

- func: ne.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: ne_out
    CUDA: ne_out
    QuantizedCPU: ne_out_quantized_cpu
  npu_dispatch:
    NPU: ne_out_npu

- func: ne.Tensor(Tensor self, Tensor other) -> Tensor
  supports_named_tensor: True
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: ne
    CUDA: ne
    QuantizedCPU: ne_quantized_cpu
  npu_dispatch:
    NPU: ne_npu

- func: eq.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: eq_out
    CUDA: eq_out
    QuantizedCPU: eq_out_quantized_cpu
  npu_dispatch:
    NPU: eq_out_npu

- func: eq.Scalar(Tensor self, Scalar other) -> Tensor
  supports_named_tensor: True
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: eq
    CUDA: eq
    QuantizedCPU: eq_quantized_cpu
  npu_dispatch:
    NPU: eq_npu

- func: eq.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: eq_out
    CUDA: eq_out
    QuantizedCPU: eq_out_quantized_cpu
  npu_dispatch:
    NPU: eq_out_npu

- func: eq.Tensor(Tensor self, Tensor other) -> Tensor
  supports_named_tensor: True
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: eq
    CUDA: eq
    QuantizedCPU: eq_quantized_cpu
  npu_dispatch:
    NPU: eq_npu

- func: ge.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: ge_out
    CUDA: ge_out
    QuantizedCPU: ge_out_quantized_cpu
  npu_dispatch:
    NPU: ge_out_npu

- func: ge.Scalar(Tensor self, Scalar other) -> Tensor
  supports_named_tensor: True
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: ge
    CUDA: ge
    QuantizedCPU: ge_quantized_cpu
  npu_dispatch:
    NPU: ge_npu

- func: ge.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: ge_out
    CUDA: ge_out
    QuantizedCPU: ge_out_quantized_cpu
  npu_dispatch:
    NPU: ge_out_npu

- func: ge.Tensor(Tensor self, Tensor other) -> Tensor
  supports_named_tensor: True
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: ge
    CUDA: ge
    QuantizedCPU: ge_quantized_cpu
  npu_dispatch:
    NPU: ge_npu

- func: le.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: le_out
    CUDA: le_out
    QuantizedCPU: le_out_quantized_cpu
  npu_dispatch:
    NPU: le_out_npu

- func: le.Scalar(Tensor self, Scalar other) -> Tensor
  supports_named_tensor: True
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: le
    CUDA: le
    QuantizedCPU: le_quantized_cpu
  npu_dispatch:
    NPU: le_npu

- func: le.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: le_out
    CUDA: le_out
    QuantizedCPU: le_out_quantized_cpu
  npu_dispatch:
    NPU: le_out_npu

- func: le.Tensor(Tensor self, Tensor other) -> Tensor
  supports_named_tensor: True
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: le
    CUDA: le
    QuantizedCPU: le_quantized_cpu
  npu_dispatch:
    NPU: le_npu

- func: gt.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: gt_out
    CUDA: gt_out
    QuantizedCPU: gt_out_quantized_cpu
  npu_dispatch:
    NPU: gt_out_npu

- func: gt.Scalar(Tensor self, Scalar other) -> Tensor
  supports_named_tensor: True
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: gt
    CUDA: gt
    QuantizedCPU: gt_quantized_cpu
  npu_dispatch:
    NPU: gt_npu

- func: gt.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: gt_out
    CUDA: gt_out
    QuantizedCPU: gt_out_quantized_cpu
  npu_dispatch:
    NPU: gt_out_npu

- func: gt.Tensor(Tensor self, Tensor other) -> Tensor
  supports_named_tensor: True
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: gt
    CUDA: gt
    QuantizedCPU: gt_quantized_cpu
  npu_dispatch:
    NPU: gt_npu

- func: lt.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: lt_out
    CUDA: lt_out
    QuantizedCPU: lt_out_quantized_cpu
  npu_dispatch:
    NPU: lt_out_npu

- func: lt.Scalar(Tensor self, Scalar other) -> Tensor
  supports_named_tensor: True
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: lt
    CUDA: lt
    QuantizedCPU: lt_quantized_cpu
  npu_dispatch:
    NPU: lt_npu

- func: lt.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: lt_out
    CUDA: lt_out
    QuantizedCPU: lt_out_quantized_cpu
  npu_dispatch:
    NPU: lt_out_npu

- func: lt.Tensor(Tensor self, Tensor other) -> Tensor
  supports_named_tensor: True
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: lt
    CUDA: lt
    QuantizedCPU: lt_quantized_cpu
  npu_dispatch:
    NPU: lt_npu

- func: take.out(Tensor self, Tensor index, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: legacy::cpu::_th_take_out
    CUDA: legacy::cuda::_th_take_out
  npu_dispatch:
    NPU: take_out_npu


- func: take(Tensor self, Tensor index) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: legacy::cpu::_th_take
    CUDA: legacy::cuda::_th_take
  npu_dispatch:
    NPU: take_npu


- func: index_select.out(Tensor self, int dim, Tensor index, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: index_select_out_cpu_
    CUDA: legacy::cuda::_th_index_select_out
  npu_dispatch:
    NPU: index_select_out_npu

- func: index_select(Tensor self, int dim, Tensor index) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: index_select_cpu_
    CUDA: legacy::cuda::_th_index_select
    SparseCPU: index_select_sparse
    SparseCUDA: index_select_sparse
  npu_dispatch:
    NPU: index_select_npu

- func: index_select.dimname_out(Tensor self, Dimname dim, Tensor index, *, Tensor(a!) out) -> Tensor(a!)
  npu_dispatch:
    NPU: index_select_out_npu

- func: index_select.dimname(Tensor self, Dimname dim, Tensor index) -> Tensor
  variants: method, function
  npu_dispatch:
    NPU: index_select_npu

- func: masked_select.out(Tensor self, Tensor mask, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: masked_select_out_cpu
    CUDA: masked_select_out_cuda
  supports_named_tensor: True
  npu_dispatch:
    NPU: masked_select_out_npu

- func: masked_select(Tensor self, Tensor mask) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: masked_select_cpu
    CUDA: masked_select_cuda
  supports_named_tensor: True
  npu_dispatch:
    NPU: masked_select_npu

- func: nonzero.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: legacy::cpu::_th_nonzero_out
    CUDA: legacy::cuda::_th_nonzero_out
  npu_dispatch:
    NPU: nonzero_out_npu

- func: nonzero(Tensor self) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: legacy::cpu::_th_nonzero
    CUDA: legacy::cuda::_th_nonzero
  npu_dispatch:
    NPU: nonzero_npu

- func: nonzero_numpy(Tensor self) -> Tensor[]
  variants: method, function

- func: gather.out(Tensor self, int dim, Tensor index, *, bool sparse_grad=False, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: gather_out_cpu
    CUDA: gather_out_cuda
  npu_dispatch:
    NPU: gather_out_npu

- func: gather(Tensor self, int dim, Tensor index, *, bool sparse_grad=False) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: gather_cpu
    CUDA: gather_cuda
  npu_dispatch:
    NPU: gather_npu

- func: gather.dimname_out(Tensor self, Dimname dim, Tensor index, *, bool sparse_grad=False, Tensor(a!) out) -> Tensor(a!)
  npu_dispatch:
    NPU: gather_out_npu

- func: gather.dimname(Tensor self, Dimname dim, Tensor index, *, bool sparse_grad=False) -> Tensor
  variants: method, function
  npu_dispatch:
    NPU: gather_npu

- func: _gather_sparse_backward(Tensor self, int dim, Tensor index, Tensor grad) -> Tensor
  use_c10_dispatcher: full

- func: addcmul.out(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  npu_dispatch:
    NPU: addcmul_out_npu

- func: addcmul(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  supports_named_tensor: True
  npu_dispatch:
    NPU: addcmul_npu

- func: addcmul_(Tensor(a!) self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor(a!)
  variants: method
  supports_named_tensor: True
  npu_dispatch:
    NPU: addcmul_npu_

- func: addcdiv.out(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  npu_dispatch:
    NPU: addcdiv_out_npu

- func: addcdiv(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  supports_named_tensor: True
  npu_dispatch:
    NPU: addcdiv_npu

- func: lstsq.X(Tensor self, Tensor A, *, Tensor(a!) X, Tensor(b!) qr) -> (Tensor(a!) solution, Tensor(b!) QR)
  dispatch:
    CPU: legacy::cpu::_th_gels_out
    CUDA: legacy::cuda::_th_gels_out

- func: lstsq(Tensor self, Tensor A) -> (Tensor solution, Tensor QR)
  variants: method, function
  dispatch:
    CPU: legacy::cpu::_th_gels
    CUDA: legacy::cuda::_th_gels

- func: triangular_solve.X(Tensor self, Tensor A, bool upper=True, bool transpose=False, bool unitriangular=False, *, Tensor(a!) X, Tensor(b!) M) -> (Tensor(a!) solution, Tensor(b!) cloned_coefficient)

- func: triangular_solve(Tensor self, Tensor A, bool upper=True, bool transpose=False, bool unitriangular=False) -> (Tensor solution, Tensor cloned_coefficient)
  variants: method, function

- func: _triangular_solve_helper(Tensor self, Tensor A, bool upper, bool transpose, bool unitriangular) -> (Tensor, Tensor)
  variants: function
  dispatch:
    CPU: _triangular_solve_helper_cpu
    CUDA: _triangular_solve_helper_cuda
  npu_dispatch:
    NPU: _triangular_solve_helper_npu

- func: symeig.e(Tensor self, bool eigenvectors=False, bool upper=True, *, Tensor(a!) e, Tensor(b!) V) -> (Tensor(a!) eigenvalues, Tensor(b!) eigenvectors)

- func: symeig(Tensor self, bool eigenvectors=False, bool upper=True) -> (Tensor eigenvalues, Tensor eigenvectors)
  variants: method, function

- func: _symeig_helper(Tensor self, bool eigenvectors, bool upper) -> (Tensor, Tensor)
  variants: function
  dispatch:
    CPU: _symeig_helper_cpu
    CUDA: _symeig_helper_cuda
  npu_dispatch:
    NPU: _symeig_helper_npu

- func: eig.e(Tensor self, bool eigenvectors=False, *, Tensor(a!) e, Tensor(b!) v) -> (Tensor(a!) eigenvalues, Tensor(b!) eigenvectors)
  dispatch:
    CPU: legacy::cpu::_th_eig_out
    CUDA: legacy::cuda::_th_eig_out

- func: eig(Tensor self, bool eigenvectors=False) -> (Tensor eigenvalues, Tensor eigenvectors)
  variants: method, function
  dispatch:
    CPU: legacy::cpu::_th_eig
    CUDA: legacy::cuda::_th_eig

- func: svd.U(Tensor self, bool some=True, bool compute_uv=True, *, Tensor(a!) U, Tensor(b!) S, Tensor(c!) V) -> (Tensor(a!) U, Tensor(b!) S, Tensor(c!) V)

- func: svd(Tensor self, bool some=True, bool compute_uv=True) -> (Tensor U, Tensor S, Tensor V)
  variants: method, function

- func: _svd_helper(Tensor self, bool some, bool compute_uv) -> (Tensor, Tensor, Tensor)
  variants: function
  dispatch:
    CPU: _svd_helper_cpu
    CUDA: _svd_helper_cuda
  npu_dispatch:
    NPU: _svd_helper_npu

- func: cholesky.out(Tensor self, bool upper=False, *, Tensor(a!) out) -> Tensor(a!)

- func: cholesky(Tensor self, bool upper=False) -> Tensor
  use_c10_dispatcher: full
  variants: method, function

- func: _cholesky_helper(Tensor self, bool upper) -> Tensor
  use_c10_dispatcher: full
  variants: function
  dispatch:
    CPU: _cholesky_helper_cpu
    CUDA: _cholesky_helper_cuda

- func: cholesky_solve.out(Tensor self, Tensor input2, bool upper=False, *, Tensor(a!) out) -> Tensor(a!)

- func: cholesky_solve(Tensor self, Tensor input2, bool upper=False) -> Tensor
  use_c10_dispatcher: full
  variants: method, function

- func: _cholesky_solve_helper(Tensor self, Tensor A, bool upper) -> Tensor
  use_c10_dispatcher: full
  variants: function
  dispatch:
    CPU: _cholesky_solve_helper_cpu
    CUDA: _cholesky_solve_helper_cuda

- func: solve(Tensor self, Tensor A) -> (Tensor solution, Tensor LU)
  variants: function, method

- func: solve.solution(Tensor self, Tensor A, *, Tensor(a!) solution, Tensor(b!) lu) -> (Tensor(a!) solution, Tensor(b!) LU)

- func: _solve_helper(Tensor self, Tensor A) -> (Tensor, Tensor)
  variants: function
  dispatch:
    CPU: _solve_helper_cpu
    CUDA: _solve_helper_cuda

- func: cholesky_inverse.out(Tensor self, bool upper=False, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: legacy::cpu::_th_potri_out
    CUDA: legacy::cuda::_th_potri_out

- func: cholesky_inverse(Tensor self, bool upper=False) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: legacy::cpu::_th_potri
    CUDA: legacy::cuda::_th_potri

- func: qr.Q(Tensor self, bool some=True, *, Tensor(a!) Q, Tensor(b!) R) -> (Tensor(a!) Q, Tensor(b!) R)
  npu_dispatch:
    NPU: qr_out_npu

- func: qr(Tensor self, bool some=True) -> (Tensor Q, Tensor R)
  variants: method, function
  npu_dispatch:
    NPU: qr_npu

- func: _qr_helper(Tensor self, bool some) -> (Tensor, Tensor)
  variants: function
  dispatch:
    CPU: _qr_helper_cpu
    CUDA: _qr_helper_cuda

- func: geqrf.a(Tensor self, *, Tensor(a!) a, Tensor(b!) tau) -> (Tensor(a!) a, Tensor(b!) tau)
  dispatch:
    CPU: legacy::cpu::_th_geqrf_out
    CUDA: legacy::cuda::_th_geqrf_out

- func: geqrf(Tensor self) -> (Tensor a, Tensor tau)
  variants: method, function
  dispatch:
    CPU: legacy::cpu::_th_geqrf
    CUDA: legacy::cuda::_th_geqrf

- func: orgqr.out(Tensor self, Tensor input2, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: legacy::cpu::_th_orgqr_out

- func: orgqr(Tensor self, Tensor input2) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: legacy::cpu::_th_orgqr

- func: ormqr.out(Tensor self, Tensor input2, Tensor input3, bool left=True, bool transpose=False, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: legacy::cpu::_th_ormqr_out

- func: ormqr(Tensor self, Tensor input2, Tensor input3, bool left=True, bool transpose=False) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: legacy::cpu::_th_ormqr

- func: _lu_with_info(Tensor self, bool pivot=True, bool check_errors=True) -> (Tensor, Tensor, Tensor)
  variants: function
  dispatch:
    CPU: _lu_with_info_cpu
    CUDA: _lu_with_info_cuda

- func: lu_solve.out(Tensor self, Tensor LU_data, Tensor LU_pivots, *, Tensor(a!) out) -> Tensor(a!)

- func: lu_solve(Tensor self, Tensor LU_data, Tensor LU_pivots) -> Tensor
  use_c10_dispatcher: full
  variants: method, function

- func: _lu_solve_helper(Tensor self, Tensor LU_data, Tensor LU_pivots) -> Tensor
  use_c10_dispatcher: full
  variants: function
  dispatch:
    CPU: _lu_solve_helper_cpu
    CUDA: _lu_solve_helper_cuda

# TODO: remove dispatch section when porting TH CUDA to ATen
- func: multinomial.out(Tensor self, int num_samples, bool replacement=False, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: multinomial_out
    CUDA: multinomial_out
  npu_dispatch:
    NPU: multinomial_out_npu

- func: multinomial(Tensor self, int num_samples, bool replacement=False, *, Generator? generator=None) -> Tensor
  variants: method, function
  dispatch:
    CPU: multinomial
    CUDA: multinomial
  npu_dispatch:
    NPU: multinomial_npu

- func: _multinomial_alias_setup(Tensor probs) -> (Tensor, Tensor)
  variants: function
  dispatch:
    CPU: legacy::cpu::_th_multinomial_alias_setup
    CUDA: legacy::cuda::_th_multinomial_alias_setup

- func: _multinomial_alias_draw(Tensor J, Tensor q, int num_samples, *, Generator? generator=None) -> Tensor
  variants: function
  dispatch:
    CPU: legacy::cpu::_th_multinomial_alias_draw
    CUDA: legacy::cuda::_th_multinomial_alias_draw

- func: lgamma.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: _lgamma_out_cpu
    CUDA: _lgamma_out_cuda

- func: lgamma(Tensor self) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: method, function
  dispatch:
    CPU: lgamma
    CUDA: lgamma

- func: digamma.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True

- func: digamma(Tensor self) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: method, function

- func: polygamma.out(int n, Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True

- func: polygamma(int n, Tensor self) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: method, function

- func: erfinv(Tensor self) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: method, function
  dispatch:
    CPU: erfinv
    CUDA: erfinv
  npu_dispatch:
    NPU: erfinv_npu

- func: erfinv_(Tensor(a!) self) -> Tensor(a!)
  supports_named_tensor: True
  variants: method
  dispatch:
    CPU: _erfinv__cpu
    CUDA: _erfinv__cuda
  npu_dispatch:
    NPU: erfinv_npu_

- func: erfinv.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: _erfinv_out_cpu
    CUDA: _erfinv_out_cuda
  npu_dispatch:
    NPU: erfinv_out_npu

- func: sign(Tensor self) -> Tensor
  variants: function, method
  supports_named_tensor: True
  npu_dispatch:
    NPU: sign_npu

- func: sign_(Tensor(a!) self) -> Tensor(a!)
  variants: method
  supports_named_tensor: True
  npu_dispatch:
    NPU: sign_npu_

- func: sign.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: sign_out
    CUDA: sign_out
  npu_dispatch:
    NPU: sign_out_npu

- func: dist(Tensor self, Tensor other, Scalar p=2) -> Tensor
  use_c10_dispatcher: full
  variants: method, function

- func: atan2.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  npu_dispatch:
    NPU: atan2_out_npu

- func: atan2(Tensor self, Tensor other) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: method, function
  npu_dispatch:
    NPU: atan2_npu

- func: lerp.Scalar_out(Tensor self, Tensor end, Scalar weight, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: lerp_cpu_scalar_out
    CUDA: lerp_cuda_scalar_out
  npu_dispatch:
    NPU: lerp_out_npu

- func: lerp.Tensor_out(Tensor self, Tensor end, Tensor weight, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: lerp_cpu_tensor_out
    CUDA: lerp_cuda_tensor_out
  npu_dispatch:
    NPU: lerp_out_npu

- func: lerp.Scalar(Tensor self, Tensor end, Scalar weight) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: lerp_cpu_scalar
    CUDA: lerp_cuda_scalar
  npu_dispatch:
    NPU: lerp_npu

- func: lerp.Tensor(Tensor self, Tensor end, Tensor weight) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: lerp_cpu_tensor
    CUDA: lerp_cuda_tensor
  npu_dispatch:
    NPU: lerp_npu

- func: histc.out(Tensor self, int bins=100, Scalar min=0, Scalar max=0, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: legacy::cpu::_th_histc_out
    CUDA: _histc_out_cuda

- func: histc(Tensor self, int bins=100, Scalar min=0, Scalar max=0) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: legacy::cpu::_th_histc
    CUDA: _histc_cuda

- func: fmod.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: fmod_out
    CUDA: legacy::cuda::_th_fmod_out
  npu_dispatch:
    NPU: fmod_out_npu

- func: fmod.Scalar(Tensor self, Scalar other) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: fmod
    CUDA: legacy::cuda::_th_fmod
  npu_dispatch:
    NPU: fmod_npu

- func: fmod.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: fmod_out
    CUDA: legacy::cuda::_th_fmod_out
  npu_dispatch:
    NPU: fmod_out_npu

- func: fmod.Tensor(Tensor self, Tensor other) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: fmod
    CUDA: legacy::cuda::_th_fmod
  npu_dispatch:
    NPU: fmod_npu

- func: remainder.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: remainder_out
    CUDA: remainder_out
  npu_dispatch:
    NPU: remainder_out_npu

- func: remainder.Scalar(Tensor self, Scalar other) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: remainder
    CUDA: remainder
  npu_dispatch:
    NPU: remainder_npu

- func: remainder.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: remainder_out
    CUDA: remainder_out
  npu_dispatch:
    NPU: remainder_out_npu

- func: remainder.Tensor(Tensor self, Tensor other) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: remainder
    CUDA: remainder
  npu_dispatch:
    NPU: remainder_npu

- func: min.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  npu_dispatch:
    NPU: min_out_npu

- func: min.other(Tensor self, Tensor other) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  npu_dispatch:
    NPU: min_npu

- func: min(Tensor self) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: min
    CUDA: legacy::cuda::_th_min
    QuantizedCPU: min_quant
  npu_dispatch:
    NPU: min_npu
  supports_named_tensor: True

- func: max.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
  npu_dispatch:
    NPU: max_out_npu

- func: max.other(Tensor self, Tensor other) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  npu_dispatch:
    NPU: max_npu

- func: max(Tensor self) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: max
    CUDA: legacy::cuda::_th_max
    QuantizedCPU: max_quant
  npu_dispatch:
    NPU: max_npu
  supports_named_tensor: True

- func: median(Tensor self) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: median_cpu
    CUDA: median_cuda
  npu_dispatch:
    NPU: median_npu
  supports_named_tensor: True

- func: sort.values(Tensor self, int dim=-1, bool descending=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
  dispatch:
    CPU: legacy::cpu::_th_sort_out
    CUDA: legacy::cuda::_th_sort_out
  npu_dispatch:
    NPU: sort_out_npu

- func: sort(Tensor self, int dim=-1, bool descending=False) -> (Tensor values, Tensor indices)
  variants: method, function
  dispatch:
    CPU: legacy::cpu::_th_sort
    CUDA: legacy::cuda::_th_sort
    QuantizedCPU: sort_quant
  npu_dispatch:
    NPU: sort_npu

- func: sort.dimname_values(Tensor self, Dimname dim, bool descending=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
  npu_dispatch:
    NPU: sort_out_npu

- func: sort.dimname(Tensor self, Dimname dim, bool descending=False) -> (Tensor values, Tensor indices)
  variants: method, function
  npu_dispatch:
    NPU: sort_npu

- func: npu_sort_v2.out(Tensor self, int dim=-1, bool descending=False, *, Tensor(a!) out) -> Tensor(a!)
  variants: function
  npu_dispatch_only:
    NPU: sort_without_indices_out_npu

- func: npu_sort_v2(Tensor self, int dim=-1, bool descending=False) -> Tensor
  variants: function
  npu_dispatch_only:
    NPU: sort_without_indices_npu

- func: argsort(Tensor self, int dim=-1, bool descending=False) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  npu_dispatch:
    NPU: argsort_npu

- func: argsort.dimname(Tensor self, Dimname dim, bool descending=False) -> Tensor
  variants: method, function
  npu_dispatch:
    NPU: argsort_npu

- func: topk.values(Tensor self, int k, int dim=-1, bool largest=True, bool sorted=True, *, Tensor(a!) values, Tensor(b!) indices) ->(Tensor(a!) values, Tensor(b!) indices)
  dispatch:
    CPU: topk_out_cpu
    CUDA: legacy::cuda::_th_topk_out
  npu_dispatch:
    NPU: topk_out_npu

- func: topk(Tensor self, int k, int dim=-1, bool largest=True, bool sorted=True) -> (Tensor values, Tensor indices)
  variants: method, function
  dispatch:
    CPU: topk
    CUDA: topk
    QuantizedCPU: quantized_topk_cpu
  npu_dispatch:
    NPU: topk_npu

- func: all(Tensor self) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: method, function
  npu_dispatch:
    NPU: all_npu

- func: any(Tensor self) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: method, function
  dispatch:
    CPU: any
    CUDA: any
    SparseCPU: any_sparse
    SparseCUDA: any_sparse
  npu_dispatch:
    NPU: any_npu

- func: renorm.out(Tensor self, Scalar p, int dim, Scalar maxnorm, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: legacy::cpu::_th_renorm_out
    CUDA: legacy::cuda::_th_renorm_out
  npu_dispatch:
    NPU: renorm_out_npu

- func: renorm(Tensor self, Scalar p, int dim, Scalar maxnorm) -> Tensor
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: legacy::cpu::_th_renorm
    CUDA: legacy::cuda::_th_renorm
  npu_dispatch:
    NPU: renorm_npu

- func: unfold(Tensor(a) self, int dimension, int size, int step) -> Tensor(a)
  variants: method
  device_guard: False
  dispatch:
    CPU: unfold
    CUDA: unfold
  npu_dispatch:
    NPU: unfold

- func: equal(Tensor self, Tensor other) -> bool
  use_c10_dispatcher: full
  variants: method, function
  dispatch:
    CPU: legacy::cpu::_th_equal
    CUDA: legacy::cuda::_th_equal
    QuantizedCPU: quantized_equal
  npu_dispatch:
    NPU: equal_npu
  supports_named_tensor: True

- func: pow.Tensor_Tensor_out(Tensor self, Tensor exponent, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: pow_out
    CUDA: pow_out
  npu_dispatch:
    NPU: pow_out_npu

- func: pow.Tensor_Tensor(Tensor self, Tensor exponent) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  variants: method, function
  dispatch:
    CPU: pow
    CUDA: pow
  npu_dispatch:
    NPU: pow_npu

- func: pow.Scalar_out(Scalar self, Tensor exponent, *, Tensor(a!) out) -> Tensor(a!)
  supports_named_tensor: True
  dispatch:
    CPU: pow_out
    CUDA: pow_out
  npu_dispatch:
    NPU: pow_out_npu

- func: pow.Scalar(Scalar self, Tensor exponent) -> Tensor
  use_c10_dispatcher: full
  supports_named_tensor: True
  dispatch:
    CPU: pow
    CUDA: pow
  npu_dispatch:
    NPU: pow_npu

- func: normal_(Tensor(a!) self, float mean=0, float std=1, *, Generator? generator=None) -> Tensor(a!)
  variants: method
  dispatch:
    CPU: normal_cpu_
    CUDA: normal_cuda_
  supports_named_tensor: True
  npu_dispatch:
    NPU: normal_npu_

- func: normal.Tensor_float_out(Tensor mean, float std=1, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: normal_out_cpu
    CUDA: normal_out_cuda
  npu_dispatch:
    NPU: normal_out_npu

- func: normal.Tensor_float(Tensor mean, float std=1, *, Generator? generator=None) -> Tensor
  dispatch:
    CPU: normal_cpu
    CUDA: normal_cuda
  npu_dispatch:
    NPU: normal_npu

- func: normal.float_Tensor_out(float mean, Tensor std, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: normal_out_cpu
    CUDA: normal_out_cuda
  npu_dispatch:
    NPU: normal_out_npu

- func: normal.float_Tensor(float mean, Tensor std, *, Generator? generator=None) -> Tensor
  dispatch:
    CPU: normal_cpu
    CUDA: normal_cuda
  npu_dispatch:
      NPU: normal_npu

- func: normal.Tensor_Tensor_out(Tensor mean, Tensor std, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: normal_out_cpu
    CUDA: normal_out_cuda
  npu_dispatch:
      NPU: normal_out_npu

- func: normal.Tensor_Tensor(Tensor mean, Tensor std, *, Generator? generator=None) -> Tensor
  dispatch:
    CPU: normal_cpu
    CUDA: normal_cuda
  npu_dispatch:
      NPU: normal_npu

- func: normal.float_float(float mean, float std, int[] size, *, Generator? generator=None, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  npu_dispatch:
    NPU: normal_npu

- func: normal.float_float_out(float mean, float std, int[] size, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)
  npu_dispatch:
    NPU: normal_out_npu

- func: alias(Tensor(a) self) -> Tensor(a)
  variants: method, function
  supports_named_tensor: True

- func: _addr(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor
  use_c10_dispatcher: full
  dispatch:
    CPU: legacy::cpu::_th_addr
    CUDA: legacy::cuda::_th_addr
  npu_dispatch:
    NPU: _addr_npu

- func: _addr_(Tensor(a!) self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)
  dispatch:
    CPU: legacy::cpu::_th_addr_
    CUDA: legacy::cuda::_th_addr_
  npu_dispatch:
    NPU: _addr_npu_

- func: _addr.out(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: legacy::cpu::_th_addr_out
    CUDA: legacy::cuda::_th_addr_out
  npu_dispatch:
    NPU: _addr_out_npu

- func: _index_copy_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> Tensor(a!)
  dispatch:
    CPU: legacy::cpu::_th_index_copy_
    CUDA: legacy::cuda::_th_index_copy_
  npu_dispatch:
    NPU: index_copy_npu_

- func: _cumsum(Tensor self, int dim) -> Tensor
  use_c10_dispatcher: full
  dispatch:
    CPU: _cumsum_cpu
    CUDA: legacy::cuda::_th_cumsum
  npu_dispatch:
    NPU: _cumsum_npu

- func: _cumsum.out(Tensor self, int dim, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: _cumsum_out_cpu
    CUDA: legacy::cuda::_th_cumsum_out
  npu_dispatch:
    NPU: _cumsum_out_npu

- func: _cumprod(Tensor self, int dim) -> Tensor
  use_c10_dispatcher: full
  dispatch:
    CPU: _cumprod_cpu
    CUDA: legacy::cuda::_th_cumprod
  npu_dispatch:
    NPU: _cumprod_npu

- func: _cumprod.out(Tensor self, int dim, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: _cumprod_out_cpu
    CUDA: legacy::cuda::_th_cumprod_out
  npu_dispatch:
    NPU: _cumprod_out_npu

- func: _var(Tensor self, bool unbiased=True) -> Tensor
  use_c10_dispatcher: full
  dispatch:
    CPU: legacy::cpu::_th_var
    CUDA: legacy::cuda::_th_var
  supports_named_tensor: True
  npu_dispatch:
    NPU: _var_npu

- func: _std(Tensor self, bool unbiased=True) -> Tensor
  use_c10_dispatcher: full
  dispatch:
    CPU: legacy::cpu::_th_std
    CUDA: legacy::cuda::_th_std
  supports_named_tensor: True

- func: _amp_non_finite_check_and_unscale_(Tensor(a!) self, Tensor(b!) found_inf, Tensor inv_scale) -> ()
  variants: function
  dispatch:
    CUDA: _amp_non_finite_check_and_unscale_cuda_
  npu_dispatch:
    NPU: _amp_non_finite_check_and_unscale_npu_

- func: _amp_update_scale(Tensor(a!) growth_tracker, Tensor current_scale, Tensor found_inf, float scale_growth_factor, float scale_backoff_factor, int growth_interval) -> Tensor
  variants: function
  dispatch:
    CUDA: _amp_update_scale_cuda

- func: _cat(Tensor[] tensors, int dim=0) -> Tensor
  dispatch:
    CPU: _cat_cpu
    CUDA: cat_cuda
    QuantizedCPU: quantized_cat
  npu_dispatch:
    NPU: _cat_npu

- func: _cat.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)
  dispatch:
    CPU: _cat_out_cpu
    CUDA: cat_out_cuda
    QuantizedCPU: quantized_cat_out
  npu_dispatch:
    NPU: _cat_out_npu

- func: _mode(Tensor self, int dim=-1, bool keepdim=False) -> (Tensor, Tensor)
  dispatch:
    CPU: legacy::cpu::_th_mode
    CUDA: legacy::cuda::_th_mode

- func: _mode.values(Tensor self, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
  dispatch:
    CPU: legacy::cpu::_th_mode_out
    CUDA: legacy::cuda::_th_mode_out

- func: _max(Tensor self, int dim, bool keepdim=False) -> (Tensor, Tensor)
  dispatch:
    CPU: legacy::cpu::_th_max
    CUDA: legacy::cuda::_th_max
  npu_dispatch:
    NPU: _max_npu

- func: _max.max(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_indices) -> (Tensor(a!), Tensor(b!))
  dispatch:
    CPU: legacy::cpu::_th_max_out
    CUDA: legacy::cuda::_th_max_out
  npu_dispatch:
    NPU: _max_out_npu

- func: _min(Tensor self, int dim, bool keepdim=False) -> (Tensor, Tensor)
  dispatch:
    CPU: legacy::cpu::_th_min
    CUDA: legacy::cuda::_th_min
  npu_dispatch:
    NPU: _min_npu

- func: _min.min(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!), Tensor(b!))
  dispatch:
    CPU: legacy::cpu::_th_min_out
    CUDA: legacy::cuda::_th_min_out
  npu_dispatch:
    NPU: _min_out_npu

## NN wrappers

- func: mse_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  npu_dispatch:
    NPU: mse_loss_out_npu

- func: mse_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor
  use_c10_dispatcher: full
  python_module: nn
  npu_dispatch:
    NPU: mse_loss_npu

- func: mse_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: mse_loss_backward_out
    CUDA: mse_loss_backward_out
  npu_dispatch:
    NPU: mse_loss_backward_out_npu

- func: mse_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor
  use_c10_dispatcher: full
  python_module: nn
  dispatch:
    CPU: mse_loss_backward
    CUDA: mse_loss_backward
  npu_dispatch:
    NPU: mse_loss_backward_npu

- func: l1_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  npu_dispatch:
    NPU: l1_loss_out_npu

- func: l1_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor
  use_c10_dispatcher: full
  python_module: nn
  npu_dispatch:
    NPU: l1_loss_npu

- func: l1_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: l1_loss_backward_out
    CUDA: l1_loss_backward_out
  npu_dispatch:
    NPU: l1_loss_backward_out_npu

- func: l1_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor
  use_c10_dispatcher: full
  python_module: nn
  npu_dispatch:
    NPU: l1_loss_backward_npu

- func: multi_margin_loss.out(Tensor self, Tensor target, Scalar p=1, Scalar margin=1, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: multi_margin_loss_cpu_out
    CUDA: legacy::cuda::_thnn_multi_margin_loss_forward_out

- func: multi_margin_loss(Tensor self, Tensor target, Scalar p=1, Scalar margin=1, Tensor? weight=None, int reduction=Mean) -> Tensor
  python_module: nn
  dispatch:
    CPU: multi_margin_loss_cpu
    CUDA: legacy::cuda::_thnn_multi_margin_loss_forward

- func: multi_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Scalar p, Scalar margin, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: multi_margin_loss_cpu_backward_out
    CUDA: legacy::cuda::_thnn_multi_margin_loss_backward_out

- func: multi_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, Scalar p, Scalar margin, Tensor? weight=None, int reduction=Mean) -> Tensor
  python_module: nn
  dispatch:
    CPU: multi_margin_loss_cpu_backward
    CUDA: legacy::cuda::_thnn_multi_margin_loss_backward

- func: multilabel_margin_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  npu_dispatch:
    NPU: multilabel_margin_loss_out_npu

- func: multilabel_margin_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor
  use_c10_dispatcher: full
  python_module: nn
  npu_dispatch:
    NPU: multilabel_margin_loss_npu

- func: multilabel_margin_loss_forward.output(Tensor self, Tensor target, int reduction, *, Tensor(a!) output, Tensor(b!) is_target) -> (Tensor(a!), Tensor(b!))
  python_module: nn
  dispatch:
    CPU: multilabel_margin_loss_forward_out_cpu
    CUDA: legacy::cuda::_thnn_multilabel_margin_loss_forward_out
  npu_dispatch:
    NPU: multilabel_margin_loss_forward_out_npu

- func: multilabel_margin_loss_forward(Tensor self, Tensor target, int reduction) -> (Tensor output, Tensor is_target)
  python_module: nn
  dispatch:
    CPU: multilabel_margin_loss_forward_cpu
    CUDA: legacy::cuda::_thnn_multilabel_margin_loss_forward
  npu_dispatch:
    NPU: multilabel_margin_loss_forward_npu

- func: multilabel_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, Tensor is_target, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: multilabel_margin_loss_backward_cpu_out
    CUDA: legacy::cuda::_thnn_multilabel_margin_loss_backward_out

- func: multilabel_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction, Tensor is_target) -> Tensor
  use_c10_dispatcher: full
  python_module: nn
  dispatch:
    CPU: multilabel_margin_loss_backward_cpu
    CUDA: legacy::cuda::_thnn_multilabel_margin_loss_backward

- func: nll_loss.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  npu_dispatch:
    NPU: nll_loss_out_npu

- func: nll_loss(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100) -> Tensor
  python_module: nn
  npu_dispatch:
    NPU: nll_loss_npu

- func: nll_loss_forward.output(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, *, Tensor(a!) output, Tensor(b!) total_weight) -> (Tensor(a!), Tensor(b!))
  python_module: nn
  dispatch:
    CPU: nll_loss_forward_out_cpu
    CUDA: legacy::cuda::_thnn_nll_loss_forward_out
  npu_dispatch:
    NPU: nll_loss_forward_out_npu

- func: nll_loss_forward(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index) -> (Tensor output, Tensor total_weight)
  python_module: nn
  dispatch:
    CPU: nll_loss_forward_cpu
    CUDA: legacy::cuda::_thnn_nll_loss_forward
  npu_dispatch:
    NPU: nll_loss_forward_npu

- func: nll_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: nll_loss_backward_out_cpu
    CUDA: legacy::cuda::_thnn_nll_loss_backward_out
  npu_dispatch:
    NPU: nll_loss_backward_out_npu

- func: nll_loss_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight) -> Tensor
  python_module: nn
  dispatch:
    CPU: nll_loss_backward_cpu
    CUDA: legacy::cuda::_thnn_nll_loss_backward
  npu_dispatch:
    NPU: nll_loss_backward_npu

- func: nll_loss2d.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  npu_dispatch:
    NPU: nll_loss2d_out_npu

- func: nll_loss2d(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100) -> Tensor
  python_module: nn
  npu_dispatch:
    NPU: nll_loss2d_npu

- func: nll_loss2d_forward.output(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, *, Tensor(a!) output, Tensor(b!) total_weight) -> (Tensor(a!), Tensor(b!))
  python_module: nn
  dispatch:
    CPU: nll_loss2d_forward_out_cpu
    CUDA: legacy::cuda::_thnn_nll_loss2d_forward_out
  npu_dispatch:
    NPU: nll_loss2d_forward_out_npu

- func: nll_loss2d_forward(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index) -> (Tensor output, Tensor total_weight)
  python_module: nn
  dispatch:
    CPU: nll_loss2d_forward_cpu
    CUDA: legacy::cuda::_thnn_nll_loss2d_forward
  npu_dispatch:
    NPU: nll_loss2d_forward_npu

- func: nll_loss2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: nll_loss2d_backward_out_cpu
    CUDA: legacy::cuda::_thnn_nll_loss2d_backward_out
  npu_dispatch:
    NPU: nll_loss2d_backward_out_npu

- func: nll_loss2d_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight) -> Tensor
  python_module: nn
  dispatch:
    CPU: nll_loss2d_backward_cpu
    CUDA: legacy::cuda::_thnn_nll_loss2d_backward
  npu_dispatch:
    NPU: nll_loss2d_backward_npu

- func: smooth_l1_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: smooth_l1_loss_out
    CUDA: smooth_l1_loss_out
  npu_dispatch:
    NPU: smooth_l1_loss_out_npu

- func: smooth_l1_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor
  use_c10_dispatcher: full
  python_module: nn
  npu_dispatch:
    NPU: smooth_l1_loss_npu

- func: smooth_l1_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: smooth_l1_loss_backward_out
    CUDA: smooth_l1_loss_backward_out
  npu_dispatch:
    NPU: smooth_l1_loss_backward_out_npu

- func: smooth_l1_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor
  use_c10_dispatcher: full
  python_module: nn
  npu_dispatch:
    NPU: smooth_l1_loss_backward_npu

- func: soft_margin_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  npu_dispatch:
    NPU: soft_margin_loss_out_npu

- func: soft_margin_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor
  use_c10_dispatcher: full
  python_module: nn
  npu_dispatch:
    NPU: soft_margin_loss_npu

- func: soft_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  npu_dispatch:
    NPU: soft_margin_loss_backward_out_npu

- func: soft_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor
  use_c10_dispatcher: full
  python_module: nn
  npu_dispatch:
    NPU: soft_margin_loss_backward_npu

- func: elu.out(Tensor self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: elu_out
    CUDA: elu_out
    QuantizedCPU: quantized_elu_out
  npu_dispatch:
    NPU: elu_out_npu

- func: elu(Tensor self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1) -> Tensor
  use_c10_dispatcher: full
  python_module: nn
  dispatch:
    CPU: elu
    CUDA: elu
    QuantizedCPU: quantized_elu
  npu_dispatch:
    NPU: elu_npu

- func: elu_backward.grad_input(Tensor grad_output, Scalar alpha, Scalar scale, Scalar input_scale, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: elu_backward_out
    CUDA: elu_backward_out
  npu_dispatch:
    NPU: elu_backward_out_npu

- func: elu_backward(Tensor grad_output, Scalar alpha, Scalar scale, Scalar input_scale, Tensor output) -> Tensor
  use_c10_dispatcher: full
  python_module: nn
  npu_dispatch:
    NPU: elu_backward_npu

- func: elu_(Tensor(a!) self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: elu_
    CUDA: elu_
    QuantizedCPU: quantized_elu_
  npu_dispatch:
    NPU: elu_npu_

- func: glu.out(Tensor self, int dim=-1, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: glu_out
    CUDA: legacy::cuda::_thnn_glu_forward_out
  npu_dispatch:
    NPU: glu_out_npu

- func: glu(Tensor self, int dim=-1) -> Tensor
  use_c10_dispatcher: full
  python_module: nn
  dispatch:
    CPU: glu
    CUDA: legacy::cuda::_thnn_glu_forward
  npu_dispatch:
    NPU: glu_npu

- func: glu_backward.grad_input(Tensor grad_output, Tensor self, int dim, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: glu_backward_out
    CUDA: legacy::cuda::_thnn_glu_backward_out
  npu_dispatch:
    NPU: glu_backward_out_npu

- func: glu_backward(Tensor grad_output, Tensor self, int dim) -> Tensor
  use_c10_dispatcher: full
  python_module: nn
  dispatch:
    CPU: glu_backward
    CUDA: legacy::cuda::_thnn_glu_backward
  npu_dispatch:
    NPU: glu_backward_npu

- func: hardsigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  npu_dispatch:
    NPU: hardsigmoid_out_npu

- func: hardsigmoid(Tensor self) -> Tensor
  use_c10_dispatcher: full
  python_module: nn
  npu_dispatch:
    NPU: hardsigmoid_npu

- func: hardsigmoid_(Tensor(a!) self) -> Tensor(a!)
  python_module: nn
  npu_dispatch:
    NPU: hardsigmoid_npu_

- func: hardsigmoid_backward(Tensor grad_output, Tensor self) -> Tensor
  use_c10_dispatcher: full
  python_module: nn
  npu_dispatch:
    NPU: hardsigmoid_backward_npu

- func: hardtanh.out(Tensor self, Scalar min_val=-1, Scalar max_val=1, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: hardtanh_out
    CUDA: hardtanh_out
    QuantizedCPU: quantized_hardtanh_out
  npu_dispatch:
    NPU: hardtanh_out_npu

- func: hardtanh(Tensor self, Scalar min_val=-1, Scalar max_val=1) -> Tensor
  use_c10_dispatcher: full
  python_module: nn
  dispatch:
    CPU: hardtanh
    CUDA: hardtanh
    QuantizedCPU: quantized_hardtanh
  npu_dispatch:
    NPU: hardtanh_npu

- func: hardtanh_backward.grad_input(Tensor grad_output, Tensor self, Scalar min_val, Scalar max_val, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: hardtanh_backward_out
    CUDA: hardtanh_backward_out
  npu_dispatch:
    NPU: hardtanh_backward_out_npu

- func: hardtanh_backward(Tensor grad_output, Tensor self, Scalar min_val, Scalar max_val) -> Tensor
  use_c10_dispatcher: full
  python_module: nn
  npu_dispatch:
    NPU: hardtanh_backward_npu

- func: hardtanh_(Tensor(a!) self, Scalar min_val=-1, Scalar max_val=1) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: hardtanh_
    CUDA: hardtanh_
    QuantizedCPU: quantized_hardtanh_
  npu_dispatch:
    NPU: hardtanh_npu_

- func: leaky_relu.out(Tensor self, Scalar negative_slope=0.01, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: leaky_relu_out
    CUDA: leaky_relu_out
    QuantizedCPU: quantized_leaky_relu_out
  npu_dispatch:
    NPU: leaky_relu_out_npu

- func: leaky_relu(Tensor self, Scalar negative_slope=0.01) -> Tensor
  use_c10_dispatcher: full
  python_module: nn
  dispatch:
    CPU: leaky_relu
    CUDA: leaky_relu
    QuantizedCPU: quantized_leaky_relu
  npu_dispatch:
    NPU: leaky_relu_npu

- func: leaky_relu_backward(Tensor grad_output, Tensor self, Scalar negative_slope, bool self_is_result) -> Tensor
  use_c10_dispatcher: full
  python_module: nn
  npu_dispatch:
    NPU: leaky_relu_backward_npu

- func: leaky_relu_(Tensor(a!) self, Scalar negative_slope=0.01) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: leaky_relu_
    CUDA: leaky_relu_
    QuantizedCPU: quantized_leaky_relu_
  npu_dispatch:
    NPU: leaky_relu_npu_

- func: log_sigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  npu_dispatch:
    NPU: log_sigmoid_out_npu


- func: log_sigmoid(Tensor self) -> Tensor
  use_c10_dispatcher: full
  python_module: nn
  npu_dispatch:
    NPU: log_sigmoid_npu

- func: log_sigmoid_forward.output(Tensor self, *, Tensor(a!) output, Tensor(b!) buffer) -> (Tensor(a!), Tensor(b!))
  python_module: nn
  dispatch:
    CPU: log_sigmoid_forward_out_cpu
    CUDA: legacy::cuda::_thnn_log_sigmoid_forward_out
  npu_dispatch:
    NPU: log_sigmoid_forward_out_npu

- func: log_sigmoid_forward(Tensor self) -> (Tensor output, Tensor buffer)
  python_module: nn
  dispatch:
    CPU: log_sigmoid_forward_cpu
    CUDA: legacy::cuda::_thnn_log_sigmoid_forward
  npu_dispatch:
    NPU: log_sigmoid_forward_npu

- func: log_sigmoid_backward.grad_input(Tensor grad_output, Tensor self, Tensor buffer, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: log_sigmoid_backward_out_cpu
    CUDA: legacy::cuda::_thnn_log_sigmoid_backward_out
  npu_dispatch:
    NPU: log_sigmoid_backward_out_npu

- func: log_sigmoid_backward(Tensor grad_output, Tensor self, Tensor buffer) -> Tensor
  use_c10_dispatcher: full
  python_module: nn
  dispatch:
    CPU: log_sigmoid_backward_cpu
    CUDA: legacy::cuda::_thnn_log_sigmoid_backward
  npu_dispatch:
    NPU: log_sigmoid_backward_npu

- func: rrelu_with_noise.out(Tensor self, Tensor noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: rrelu_with_noise_out_cpu
    CUDA: legacy::cuda::_thnn_rrelu_with_noise_forward_out
  npu_dispatch:
    NPU: rrelu_with_noise_out_npu

- func: rrelu_with_noise(Tensor self, Tensor noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor
  python_module: nn
  dispatch:
    CPU: rrelu_with_noise_cpu
    CUDA: legacy::cuda::_thnn_rrelu_with_noise_forward
  npu_dispatch:
    NPU: rrelu_with_noise_npu

- func: rrelu_with_noise_backward(Tensor grad_output, Tensor self, Tensor noise, Scalar lower, Scalar upper, bool training, bool self_is_result) -> Tensor
  use_c10_dispatcher: full
  python_module: nn
  npu_dispatch:
    NPU: rrelu_with_noise_backward_npu

- func: rrelu_with_noise_(Tensor(a!) self, Tensor noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: rrelu_with_noise_cpu_
    CUDA: legacy::cuda::_thnn_rrelu_with_noise_forward_
  npu_dispatch:
    NPU: rrelu_with_noise_npu_

- func: softplus.out(Tensor self, Scalar beta=1, Scalar threshold=20, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  npu_dispatch:
    NPU: softplus_out_npu

- func: softplus(Tensor self, Scalar beta=1, Scalar threshold=20) -> Tensor
  use_c10_dispatcher: full
  python_module: nn
  npu_dispatch:
    NPU: softplus_npu

- func: softplus_backward.grad_input(Tensor grad_output, Tensor self, Scalar beta, Scalar threshold, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: softplus_backward_out
    CUDA: softplus_backward_out
  npu_dispatch:
    NPU: softplus_backward_out_npu

- func: softplus_backward(Tensor grad_output, Tensor self, Scalar beta, Scalar threshold, Tensor output) -> Tensor
  use_c10_dispatcher: full
  python_module: nn
  npu_dispatch:
    NPU: softplus_backward_npu

- func: softshrink.out(Tensor self, Scalar lambd=0.5, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  npu_dispatch:
    NPU: softshrink_out_npu

- func: softshrink(Tensor self, Scalar lambd=0.5) -> Tensor
  use_c10_dispatcher: full
  python_module: nn
  npu_dispatch:
    NPU: softshrink_npu

- func: softshrink_backward.grad_input(Tensor grad_output, Tensor self, Scalar lambd, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: softshrink_backward_out
    CUDA: softshrink_backward_out
  npu_dispatch:
    NPU: softshrink_backward_out_npu

- func: softshrink_backward(Tensor grad_output, Tensor self, Scalar lambd) -> Tensor
  use_c10_dispatcher: full
  python_module: nn
  npu_dispatch:
    NPU: softshrink_backward_npu

- func: adaptive_avg_pool2d.out(Tensor self, int[2] output_size, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: adaptive_avg_pool2d_out_cpu
    CUDA: adaptive_avg_pool2d_out_cuda
    MkldnnCPU: mkldnn_adaptive_avg_pool2d_out
  npu_dispatch:
    NPU: adaptive_avg_pool2d_out_npu

- func: adaptive_avg_pool2d(Tensor self, int[2] output_size) -> Tensor
  python_module: nn
  npu_dispatch:
    NPU: adaptive_avg_pool2d_npu

- func: mkldnn_adaptive_avg_pool2d(Tensor self, int[2] output_size) -> Tensor
  dispatch:
    MkldnnCPU: mkldnn_adaptive_avg_pool2d
  requires_tensor: True

- func: _adaptive_avg_pool2d(Tensor self, int[2] output_size) -> Tensor
  dispatch:
    CPU: adaptive_avg_pool2d_cpu
    CUDA: adaptive_avg_pool2d_cuda
    QuantizedCPU: quantized_adaptive_avg_pool2d
  npu_dispatch:
    NPU: _adaptive_avg_pool2d_npu

- func: _adaptive_avg_pool2d_backward(Tensor grad_output, Tensor self) -> Tensor
  use_c10_dispatcher: full
  python_module: nn
  dispatch:
    CPU: adaptive_avg_pool2d_backward_cpu
    CUDA: adaptive_avg_pool2d_backward_cuda
  npu_dispatch:
    NPU: adaptive_avg_pool2d_backward_npu

- func: adaptive_avg_pool3d.out(Tensor self, int[3] output_size, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: adaptive_avg_pool3d_out_cpu
    CUDA: adaptive_avg_pool3d_out_cuda
  npu_dispatch:
    NPU: adaptive_avg_pool3d_out_npu

- func: adaptive_avg_pool3d(Tensor self, int[3] output_size) -> Tensor
  python_module: nn
  dispatch:
    CPU: adaptive_avg_pool3d_cpu
    CUDA: adaptive_avg_pool3d_cuda
  npu_dispatch:
    NPU: adaptive_avg_pool3d_npu

- func: adaptive_avg_pool3d_backward.grad_input(Tensor grad_output, Tensor self, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: adaptive_avg_pool3d_backward_out_cpu
    CUDA: adaptive_avg_pool3d_backward_out_cuda
  npu_dispatch:
    NPU: adaptive_avg_pool3d_backward_out_npu

- func: adaptive_avg_pool3d_backward(Tensor grad_output, Tensor self) -> Tensor
  use_c10_dispatcher: full
  python_module: nn
  dispatch:
    CPU: adaptive_avg_pool3d_backward_cpu
    CUDA: adaptive_avg_pool3d_backward_cuda
  npu_dispatch:
    NPU: adaptive_avg_pool3d_backward_npu

# Return: (Tensor output, Tensor indices)
- func: adaptive_max_pool2d.out(Tensor self, int[2] output_size, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
  python_module: nn
  dispatch:
    CPU: adaptive_max_pool2d_out_cpu
    CUDA: adaptive_max_pool2d_out_cuda
  npu_dispatch:
    NPU: adaptive_max_pool2d_out_npu

# Return: (Tensor output, Tensor indices)
- func: adaptive_max_pool2d(Tensor self, int[2] output_size) -> (Tensor, Tensor)
  python_module: nn
  dispatch:
    CPU: adaptive_max_pool2d_cpu
    CUDA: adaptive_max_pool2d_cuda
  npu_dispatch:
    NPU: adaptive_max_pool2d_npu

- func: adaptive_max_pool2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: adaptive_max_pool2d_backward_out_cpu
    CUDA: adaptive_max_pool2d_backward_out_cuda
  npu_dispatch:
    NPU: adaptive_max_pool2d_backward_out_npu

- func: adaptive_max_pool2d_backward(Tensor grad_output, Tensor self, Tensor indices) -> Tensor
  use_c10_dispatcher: full
  python_module: nn
  dispatch:
    CPU: adaptive_max_pool2d_backward_cpu
    CUDA: adaptive_max_pool2d_backward_cuda
  npu_dispatch:
    NPU: adaptive_max_pool2d_backward_npu

# Return: (Tensor output, Tensor indices)
- func: adaptive_max_pool3d.out(Tensor self, int[3] output_size, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
  python_module: nn
  dispatch:
    CPU: adaptive_max_pool3d_out_cpu
    CUDA: adaptive_max_pool3d_out_cuda

# Return: (Tensor output, Tensor indices)
- func: adaptive_max_pool3d(Tensor self, int[3] output_size) -> (Tensor, Tensor)
  python_module: nn
  dispatch:
    CPU: adaptive_max_pool3d_cpu
    CUDA: adaptive_max_pool3d_cuda

- func: adaptive_max_pool3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: adaptive_max_pool3d_backward_out_cpu
    CUDA: adaptive_max_pool3d_backward_out_cuda

- func: adaptive_max_pool3d_backward(Tensor grad_output, Tensor self, Tensor indices) -> Tensor
  use_c10_dispatcher: full
  python_module: nn
  dispatch:
    CPU: adaptive_max_pool3d_backward_cpu
    CUDA: adaptive_max_pool3d_backward_cuda

- func: avg_pool2d.out(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: avg_pool2d_out_cpu
    CUDA: avg_pool2d_out_cuda
    MkldnnCPU: mkldnn_avg_pool2d_out
  npu_dispatch:
    NPU: avg_pool2d_out_npu

- func: avg_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None) -> Tensor
  python_module: nn
  dispatch:
    CPU: avg_pool2d_cpu
    CUDA: avg_pool2d_cuda
    MkldnnCPU: mkldnn_avg_pool2d
    QuantizedCPU: quantized_avg_pool2d
  npu_dispatch:
    NPU: avg_pool2d_npu

- func: avg_pool2d_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, bool ceil_mode, bool count_include_pad, int? divisor_override, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: avg_pool2d_backward_out_cpu
    CUDA: avg_pool2d_backward_out_cuda
  npu_dispatch:
    NPU: avg_pool2d_backward_out_npu

- func: avg_pool2d_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, bool ceil_mode, bool count_include_pad, int? divisor_override) -> Tensor
  python_module: nn
  dispatch:
    CPU: avg_pool2d_backward_cpu
    CUDA: avg_pool2d_backward_cuda
  npu_dispatch:
    NPU: avg_pool2d_backward_npu

- func: avg_pool3d.out(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: avg_pool3d_out_cpu
    CUDA: avg_pool3d_out_cuda
  npu_dispatch:
    NPU: avg_pool3d_out_npu

- func: avg_pool3d(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None) -> Tensor
  python_module: nn
  dispatch:
    CPU: avg_pool3d_cpu
    CUDA: avg_pool3d_cuda
    QuantizedCPU: quantized_avg_pool3d
  npu_dispatch:
    NPU: avg_pool3d_npu

- func: avg_pool3d_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, bool ceil_mode, bool count_include_pad, int? divisor_override, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: avg_pool3d_backward_out_cpu
    CUDA: avg_pool3d_backward_out_cuda
  npu_dispatch:
    NPU: avg_pool3d_backward_out_npu

- func: avg_pool3d_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, bool ceil_mode, bool count_include_pad, int? divisor_override) -> Tensor
  python_module: nn
  dispatch:
    CPU: avg_pool3d_backward_cpu
    CUDA: avg_pool3d_backward_cuda
  npu_dispatch:
    NPU: avg_pool3d_backward_npu

# Return: (Tensor output, Tensor indices)
- func: fractional_max_pool2d.output(Tensor self, int[2] kernel_size, int[2] output_size, Tensor random_samples, *, Tensor(a!) output, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
  python_module: nn
  dispatch:
    CPU: fractional_max_pool2d_out_cpu
    CUDA: fractional_max_pool2d_out_cuda

# Return: (Tensor output, Tensor indices)
- func: fractional_max_pool2d(Tensor self, int[2] kernel_size, int[2] output_size, Tensor random_samples) -> (Tensor, Tensor)
  python_module: nn
  dispatch:
    CPU: fractional_max_pool2d_cpu
    CUDA: fractional_max_pool2d_cuda

- func: fractional_max_pool2d_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] output_size, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: fractional_max_pool2d_backward_out_cpu
    CUDA: fractional_max_pool2d_backward_out_cuda

- func: fractional_max_pool2d_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] output_size, Tensor indices) -> Tensor
  python_module: nn
  dispatch:
    CPU: fractional_max_pool2d_backward_cpu
    CUDA: fractional_max_pool2d_backward_cuda

# Return: (Tensor output, Tensor indices)
- func: fractional_max_pool3d.output(Tensor self, int[3] kernel_size, int[3] output_size, Tensor random_samples, *, Tensor(a!) output, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
  python_module: nn
  dispatch:
    CPU: fractional_max_pool3d_out_cpu
    CUDA: fractional_max_pool3d_out_cuda

# Return: (Tensor output, Tensor indices)
- func: fractional_max_pool3d(Tensor self, int[3] kernel_size, int[3] output_size, Tensor random_samples) -> (Tensor, Tensor)
  python_module: nn
  dispatch:
    CPU: fractional_max_pool3d_cpu
    CUDA: fractional_max_pool3d_cuda

- func: fractional_max_pool3d_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] output_size, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: fractional_max_pool3d_backward_out_cpu
    CUDA: fractional_max_pool3d_backward_out_cuda

- func: fractional_max_pool3d_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] output_size, Tensor indices) -> Tensor
  python_module: nn
  dispatch:
    CPU: fractional_max_pool3d_backward_cpu
    CUDA: fractional_max_pool3d_backward_cuda

# Return: (Tensor output, Tensor indices)
- func: max_pool2d_with_indices.out(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
  python_module: nn
  dispatch:
    CPU: max_pool2d_with_indices_out_cpu
    CUDA: max_pool2d_with_indices_out_cuda
  npu_dispatch:
    NPU: max_pool2d_with_indices_out_npu

# Return: (Tensor output, Tensor indices)
- func: max_pool2d_with_indices(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> (Tensor, Tensor)
  python_module: nn
  dispatch:
    CPU: max_pool2d_with_indices_cpu
    CUDA: max_pool2d_with_indices_cuda
  npu_dispatch:
    NPU: max_pool2d_with_indices_npu
  supports_named_tensor: True

- func: max_pool2d_with_indices_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool ceil_mode, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: max_pool2d_with_indices_backward_out_cpu
    CUDA: max_pool2d_with_indices_backward_out_cuda
  npu_dispatch:
    NPU: max_pool2d_with_indices_backward_out_npu

- func: max_pool2d_with_indices_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool ceil_mode, Tensor indices) -> Tensor
  python_module: nn
  dispatch:
    CPU: max_pool2d_with_indices_backward_cpu
    CUDA: max_pool2d_with_indices_backward_cuda
  npu_dispatch:
    NPU: max_pool2d_with_indices_backward_npu

# Return: (Tensor output, Tensor indices)
- func: max_pool3d_with_indices.out(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
  python_module: nn
  dispatch:
    CPU: max_pool3d_with_indices_out_cpu
    CUDA: max_pool3d_with_indices_out_cuda
  npu_dispatch:
    NPU: max_pool3d_with_indices_out_npu

# Return: (Tensor output, Tensor indices)
- func: max_pool3d_with_indices(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False) -> (Tensor, Tensor)
  python_module: nn
  dispatch:
    CPU: max_pool3d_with_indices_cpu
    CUDA: max_pool3d_with_indices_cuda
  npu_dispatch:
    NPU: max_pool3d_with_indices_npu
  supports_named_tensor: True

- func: max_pool3d_with_indices_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool ceil_mode, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: max_pool3d_with_indices_backward_out_cpu
    CUDA: max_pool3d_with_indices_backward_out_cuda
  npu_dispatch:
    NPU: max_pool3d_with_indices_backward_out_npu

- func: max_pool3d_with_indices_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool ceil_mode, Tensor indices) -> Tensor
  python_module: nn
  dispatch:
    CPU: max_pool3d_with_indices_backward_cpu
    CUDA: max_pool3d_with_indices_backward_cuda
  npu_dispatch:
    NPU: max_pool3d_with_indices_backward_npu


- func: max_unpool2d.out(Tensor self, Tensor indices, int[2] output_size, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: max_unpooling2d_forward_out_cpu
    CUDA: max_unpooling2d_forward_out_cuda
  npu_dispatch:
    NPU: max_unpool2d_out_npu

- func: max_unpool2d(Tensor self, Tensor indices, int[2] output_size) -> Tensor
  python_module: nn
  dispatch:
    CPU: max_unpooling2d_forward_cpu
    CUDA: max_unpooling2d_forward_cuda
  npu_dispatch:
    NPU: max_unpool2d_npu

- func: max_unpool2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, int[2] output_size, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: max_unpooling2d_backward_out_cpu
    CUDA: max_unpooling2d_backward_out_cuda
  npu_dispatch:
    NPU: max_unpool2d_backward_out_npu

- func: max_unpool2d_backward(Tensor grad_output, Tensor self, Tensor indices, int[2] output_size) -> Tensor
  python_module: nn
  dispatch:
    CPU: max_unpooling2d_backward_cpu
    CUDA: max_unpooling2d_backward_cuda
  npu_dispatch:
    NPU: max_unpool2d_backward_npu

- func: max_unpool3d.out(Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: max_unpooling3d_forward_out_cpu
    CUDA: max_unpooling3d_forward_out_cuda
  npu_dispatch:
    NPU: max_unpool3d_out_npu

- func: max_unpool3d(Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding) -> Tensor
  python_module: nn
  dispatch:
    CPU: max_unpooling3d_forward_cpu
    CUDA: max_unpooling3d_forward_cuda
  npu_dispatch:
    NPU: max_unpool3d_npu

- func: max_unpool3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: max_unpooling3d_backward_out_cpu
    CUDA: max_unpooling3d_backward_out_cuda
  npu_dispatch:
    NPU: max_unpool3d_backward_out_npu

- func: max_unpool3d_backward(Tensor grad_output, Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding) -> Tensor
  python_module: nn
  dispatch:
    CPU: max_unpooling3d_backward_cpu
    CUDA: max_unpooling3d_backward_cuda
  npu_dispatch:
    NPU: max_unpool3d_backward_npu

- func: reflection_pad1d.out(Tensor self, int[2] padding, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: reflection_pad1d_out_cpu
    CUDA: reflection_pad1d_out_cuda
  npu_dispatch:
    NPU: reflection_pad1d_out_npu   

- func: reflection_pad1d(Tensor self, int[2] padding) -> Tensor
  python_module: nn
  dispatch:
    CPU: reflection_pad1d_cpu
    CUDA: reflection_pad1d_cuda
  npu_dispatch:
    NPU: reflection_pad1d_npu   

- func: reflection_pad1d_backward.grad_input(Tensor grad_output, Tensor self, int[2] padding, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: reflection_pad1d_backward_out_cpu
    CUDA: reflection_pad1d_backward_out_cuda

- func: reflection_pad1d_backward(Tensor grad_output, Tensor self, int[2] padding) -> Tensor
  python_module: nn
  dispatch:
    CPU: reflection_pad1d_backward_cpu
    CUDA: reflection_pad1d_backward_cuda

- func: reflection_pad2d.out(Tensor self, int[4] padding, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: reflection_pad2d_out_cpu
    CUDA: reflection_pad2d_out_cuda
  npu_dispatch:
    NPU: reflection_pad2d_out_npu

- func: reflection_pad2d(Tensor self, int[4] padding) -> Tensor
  python_module: nn
  dispatch:
    CPU: reflection_pad2d_cpu
    CUDA: reflection_pad2d_cuda
  npu_dispatch:
    NPU: reflection_pad2d_npu

- func: reflection_pad2d_backward.grad_input(Tensor grad_output, Tensor self, int[4] padding, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: reflection_pad2d_backward_out_cpu
    CUDA: reflection_pad2d_backward_out_cuda
  npu_dispatch:
    NPU: reflection_pad2d_backward_out_npu

- func: reflection_pad2d_backward(Tensor grad_output, Tensor self, int[4] padding) -> Tensor
  python_module: nn
  dispatch:
    CPU: reflection_pad2d_backward_cpu
    CUDA: reflection_pad2d_backward_cuda
  npu_dispatch:
    NPU: reflection_pad2d_backward_npu

- func: replication_pad1d.out(Tensor self, int[2] padding, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: replication_pad1d_out_cpu
    CUDA: replication_pad1d_out_cuda
  npu_dispatch:
    NPU: replication_pad1d_out_npu

- func: replication_pad1d(Tensor self, int[2] padding) -> Tensor
  python_module: nn
  dispatch:
    CPU: replication_pad1d_cpu
    CUDA: replication_pad1d_cuda
  npu_dispatch:
    NPU: replication_pad1d_npu

- func: replication_pad1d_backward.grad_input(Tensor grad_output, Tensor self, int[2] padding, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: replication_pad1d_backward_out_cpu
    CUDA: replication_pad1d_backward_out_cuda

- func: replication_pad1d_backward(Tensor grad_output, Tensor self, int[2] padding) -> Tensor
  python_module: nn
  dispatch:
    CPU: replication_pad1d_backward_cpu
    CUDA: replication_pad1d_backward_cuda

- func: replication_pad2d.out(Tensor self, int[4] padding, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: replication_pad2d_out_cpu
    CUDA: replication_pad2d_out_cuda
  npu_dispatch:
    NPU: replication_pad2d_out_npu

- func: replication_pad2d(Tensor self, int[4] padding) -> Tensor
  python_module: nn
  dispatch:
    CPU: replication_pad2d_cpu
    CUDA: replication_pad2d_cuda
  npu_dispatch:
    NPU: replication_pad2d_npu

- func: replication_pad2d_backward.grad_input(Tensor grad_output, Tensor self, int[4] padding, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: replication_pad2d_backward_out_cpu
    CUDA: replication_pad2d_backward_out_cuda
  npu_dispatch:
    NPU: replication_pad2d_backward_out_npu

- func: replication_pad2d_backward(Tensor grad_output, Tensor self, int[4] padding) -> Tensor
  python_module: nn
  dispatch:
    CPU: replication_pad2d_backward_cpu
    CUDA: replication_pad2d_backward_cuda
  npu_dispatch:
    NPU: replication_pad2d_backward_npu

- func: replication_pad3d.out(Tensor self, int[6] padding, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: replication_pad3d_out_cpu
    CUDA: replication_pad3d_out_cuda

- func: replication_pad3d(Tensor self, int[6] padding) -> Tensor
  python_module: nn
  dispatch:
    CPU: replication_pad3d_cpu
    CUDA: replication_pad3d_cuda

- func: replication_pad3d_backward.grad_input(Tensor grad_output, Tensor self, int[6] padding, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: replication_pad3d_backward_out_cpu
    CUDA: replication_pad3d_backward_out_cuda

- func: replication_pad3d_backward(Tensor grad_output, Tensor self, int[6] padding) -> Tensor
  python_module: nn
  dispatch:
    CPU: replication_pad3d_backward_cpu
    CUDA: replication_pad3d_backward_cuda

- func: upsample_linear1d.out(Tensor self, int[1] output_size, bool align_corners, float? scales=None, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: upsample_linear1d_out_cpu
    CUDA: upsample_linear1d_out_cuda
  npu_dispatch:
    NPU: upsample_linear1d_out_npu

- func: upsample_linear1d(Tensor self, int[1] output_size, bool align_corners, float? scales=None) -> Tensor
  python_module: nn
  dispatch:
    CPU: upsample_linear1d_cpu
    CUDA: upsample_linear1d_cuda
  npu_dispatch:
    NPU: upsample_linear1d_npu

- func: upsample_linear1d_backward.grad_input(Tensor grad_output, int[1] output_size, int[3] input_size, bool align_corners, float? scales=None, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: upsample_linear1d_backward_out_cpu
    CUDA: upsample_linear1d_backward_out_cuda

- func: upsample_linear1d_backward(Tensor grad_output, int[1] output_size, int[3] input_size, bool align_corners, float? scales=None) -> Tensor
  python_module: nn
  dispatch:
    CPU: upsample_linear1d_backward_cpu
    CUDA: upsample_linear1d_backward_cuda
  npu_dispatch:
    NPU: upsample_linear1d_backward_npu

- func: upsample_bilinear2d.out(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: upsample_bilinear2d_out_cpu
    CUDA: upsample_bilinear2d_out_cuda
  npu_dispatch:
    NPU: upsample_bilinear2d_out_npu

- func: upsample_bilinear2d(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor
  python_module: nn
  dispatch:
    CPU: upsample_bilinear2d_cpu
    CUDA: upsample_bilinear2d_cuda
    QuantizedCPU: quantized_upsample_bilinear2d_cpu
  npu_dispatch:
    NPU: upsample_bilinear2d_npu

- func: upsample_bilinear2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: upsample_bilinear2d_backward_out_cpu
    CUDA: upsample_bilinear2d_backward_out_cuda
  npu_dispatch:
    NPU: upsample_bilinear2d_backward_out_npu

- func: upsample_bilinear2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor
  python_module: nn
  dispatch:
    CPU: upsample_bilinear2d_backward_cpu
    CUDA: upsample_bilinear2d_backward_cuda
  npu_dispatch:
    NPU: upsample_bilinear2d_backward_npu

- func: upsample_bicubic2d.out(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: upsample_bicubic2d_out_cpu
    CUDA: upsample_bicubic2d_out_cuda
  npu_dispatch:
    NPU: upsample_bicubic2d_out_npu

- func: upsample_bicubic2d(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor
  python_module: nn
  dispatch:
    CPU: upsample_bicubic2d_cpu
    CUDA: upsample_bicubic2d_cuda
  npu_dispatch:
    NPU: upsample_bicubic2d_npu

- func: upsample_bicubic2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: upsample_bicubic2d_backward_out_cpu
    CUDA: upsample_bicubic2d_backward_out_cuda
  npu_dispatch:
    NPU: upsample_bicubic2d_backward_out_npu

- func: upsample_bicubic2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor
  python_module: nn
  dispatch:
    CPU: upsample_bicubic2d_backward_cpu
    CUDA: upsample_bicubic2d_backward_cuda
  npu_dispatch:
    NPU: upsample_bicubic2d_backward_npu

- func: upsample_trilinear3d.out(Tensor self, int[3] output_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: upsample_trilinear3d_out_cpu
    CUDA: upsample_trilinear3d_out_cuda
  npu_dispatch:
    NPU: upsample_trilinear3d_out_npu

- func: upsample_trilinear3d(Tensor self, int[3] output_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor
  python_module: nn
  dispatch:
    CPU: upsample_trilinear3d_cpu
    CUDA: upsample_trilinear3d_cuda
  npu_dispatch:
    NPU: upsample_trilinear3d_npu

- func: upsample_trilinear3d_backward.grad_input(Tensor grad_output, int[3] output_size, int[5] input_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: upsample_trilinear3d_backward_out_cpu
    CUDA: upsample_trilinear3d_backward_out_cuda
  npu_dispatch:
    NPU: upsample_trilinear3d_backward_out_npu

- func: upsample_trilinear3d_backward(Tensor grad_output, int[3] output_size, int[5] input_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor
  python_module: nn
  dispatch:
    CPU: upsample_trilinear3d_backward_cpu
    CUDA: upsample_trilinear3d_backward_cuda
  npu_dispatch:
    NPU: upsample_trilinear3d_backward_npu

- func: upsample_nearest1d.out(Tensor self, int[1] output_size, float? scales=None, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: upsample_nearest1d_out_cpu
    CUDA: upsample_nearest1d_out_cuda
  npu_dispatch:
    NPU: upsample_nearest1d_out_npu

- func: upsample_nearest1d(Tensor self, int[1] output_size, float? scales=None) -> Tensor
  python_module: nn
  dispatch:
    CPU: upsample_nearest1d_cpu
    CUDA: upsample_nearest1d_cuda
  npu_dispatch:
    NPU: upsample_nearest1d_npu

- func: upsample_nearest1d_backward.grad_input(Tensor grad_output, int[1] output_size, int[3] input_size, float? scales=None, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: upsample_nearest1d_backward_out_cpu
    CUDA: upsample_nearest1d_backward_out_cuda
  npu_dispatch:
    NPU: upsample_nearest1d_backward_out_npu

- func: upsample_nearest1d_backward(Tensor grad_output, int[1] output_size, int[3] input_size, float? scales=None) -> Tensor
  python_module: nn
  dispatch:
    CPU: upsample_nearest1d_backward_cpu
    CUDA: upsample_nearest1d_backward_cuda
  npu_dispatch:
    NPU: upsample_nearest1d_backward_npu

- func: upsample_nearest2d.out(Tensor self, int[2] output_size, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: upsample_nearest2d_out_cpu
    CUDA: upsample_nearest2d_out_cuda
  npu_dispatch:
    NPU: upsample_nearest2d_out_npu

- func: upsample_nearest2d(Tensor self, int[2] output_size, float? scales_h=None, float? scales_w=None) -> Tensor
  python_module: nn
  dispatch:
    CPU: upsample_nearest2d_cpu
    CUDA: upsample_nearest2d_cuda
    QuantizedCPU: quantized_upsample_nearest2d_cpu
  npu_dispatch:
    NPU: upsample_nearest2d_npu

- func: upsample_nearest2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: upsample_nearest2d_backward_out_cpu
    CUDA: upsample_nearest2d_backward_out_cuda
  npu_dispatch:
    NPU: upsample_nearest2d_backward_out_npu

- func: upsample_nearest2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size, float? scales_h=None, float? scales_w=None) -> Tensor
  python_module: nn
  dispatch:
    CPU: upsample_nearest2d_backward_cpu
    CUDA: upsample_nearest2d_backward_cuda
  npu_dispatch:
    NPU: upsample_nearest2d_backward_npu

- func: upsample_nearest3d.out(Tensor self, int[3] output_size, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: upsample_nearest3d_out_cpu
    CUDA: upsample_nearest3d_out_cuda
  npu_dispatch:
    NPU: upsample_nearest3d_out_npu

- func: upsample_nearest3d(Tensor self, int[3] output_size, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor
  python_module: nn
  dispatch:
    CPU: upsample_nearest3d_cpu
    CUDA: upsample_nearest3d_cuda
    QuantizedCPU: quantized_upsample_nearest3d_cpu
  npu_dispatch:
    NPU: upsample_nearest3d_npu

- func: upsample_nearest3d_backward.grad_input(Tensor grad_output, int[3] output_size, int[5] input_size, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: upsample_nearest3d_backward_out_cpu
    CUDA: upsample_nearest3d_backward_out_cuda
  npu_dispatch:
    NPU: upsample_nearest3d_backward_out_npu

- func: upsample_nearest3d_backward(Tensor grad_output, int[3] output_size, int[5] input_size, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor
  python_module: nn
  dispatch:
    CPU: upsample_nearest3d_backward_cpu
    CUDA: upsample_nearest3d_backward_cuda
  npu_dispatch:
    NPU: upsample_nearest3d_backward_npu

- func: sigmoid_backward.grad_input(Tensor grad_output, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: sigmoid_backward_out
    CUDA: sigmoid_backward_out
  npu_dispatch:
    NPU: sigmoid_backward_out_npu

- func: sigmoid_backward(Tensor grad_output, Tensor output) -> Tensor
  use_c10_dispatcher: full
  python_module: nn
  npu_dispatch:
    NPU: sigmoid_backward_npu

- func: tanh_backward.grad_input(Tensor grad_output, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: tanh_backward_out
    CUDA: tanh_backward_out
  npu_dispatch:
    NPU: tanh_backward_out_npu

- func: tanh_backward(Tensor grad_output, Tensor output) -> Tensor
  use_c10_dispatcher: full
  python_module: nn
  npu_dispatch:
    NPU: tanh_backward_npu

# What's a thnn_conv_ versus a slow_conv_?
#
# Historically, we have inefficient implementations of convolutions
# coming from the THNN/THCUNN library.  These convolutions typically
# operated by computing the Toeplitz matrix and then doing a matrix
# multiply with the input; this is very memory inefficient!  However,
# occasionally, we really don't have anything better, so it's helpful
# to have these fallbacks when there is no more optimized implementation
# in cudnn or mkldnn, etc.  Both thnn_ and slow_ convolutions fall
# into this bucket.
#
# The difference between these two designations, is that thnn_ refers
# to a convolution that is still written in the "legacy" style; that is,
# C code in the THNN/ or THCUNN/ directory.  A slow_ convolution is
# one that is written in the native style: modern C++.  Algorithmically,
# these are the same thing, but we give them different prefixes to
# make the operational distinction clear.

- func: slow_conv_transpose2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] output_padding=0, int[2] dilation=1, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: slow_conv_transpose2d_out_cpu
    CUDA: slow_conv_transpose2d_out_cuda
  npu_dispatch:
    NPU: slow_conv_transpose2d_out_npu

- func: slow_conv_transpose2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] output_padding=0, int[2] dilation=1) -> Tensor
  python_module: nn
  dispatch:
    CPU: slow_conv_transpose2d_cpu
    CUDA: slow_conv_transpose2d_cuda
  npu_dispatch:
    NPU: slow_conv_transpose2d_npu

- func: slow_conv_transpose2d_backward.grad_output(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] output_padding, int[2] dilation, Tensor columns, Tensor ones, *, Tensor(a!)? grad_input, Tensor(b!)? grad_weight, Tensor(c!)? grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))
  python_module: nn
  dispatch:
    CPU: slow_conv_transpose2d_backward_out_cpu
    CUDA: slow_conv_transpose2d_backward_out_cuda
  npu_dispatch:
    NPU: slow_conv_transpose2d_backward_out_npu

- func: slow_conv_transpose2d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] output_padding, int[2] dilation, Tensor columns, Tensor ones, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)
  python_module: nn
  dispatch:
    CPU: slow_conv_transpose2d_backward_cpu
    CUDA: slow_conv_transpose2d_backward_cuda
  npu_dispatch:
    NPU: slow_conv_transpose2d_backward_npu

- func: slow_conv_transpose3d.out(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] output_padding=0, int[3] dilation=1, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: slow_conv_transpose3d_out_cpu
    CUDA: slow_conv_transpose3d_out_cuda

- func: slow_conv_transpose3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] output_padding=0, int[3] dilation=1) -> Tensor
  python_module: nn
  dispatch:
    CPU: slow_conv_transpose3d_cpu
    CUDA: slow_conv_transpose3d_cuda

- func: slow_conv_transpose3d_backward.grad_output(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, int[3] output_padding, int[3] dilation, Tensor finput, Tensor fgrad_input, *, Tensor(a!)? grad_input, Tensor(b!)? grad_weight, Tensor(c!)? grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))
  python_module: nn
  dispatch:
    CPU: slow_conv_transpose3d_backward_out_cpu
    CUDA: slow_conv_transpose3d_backward_out_cuda

- func: slow_conv_transpose3d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, int[3] output_padding, int[3] dilation, Tensor finput, Tensor fgrad_input, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)
  python_module: nn
  dispatch:
    CPU: slow_conv_transpose3d_backward_cpu
    CUDA: slow_conv_transpose3d_backward_cuda

- func: thnn_conv2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  npu_dispatch:
    NPU: thnn_conv2d_out_npu

- func: thnn_conv2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0) -> Tensor
  python_module: nn
  npu_dispatch:
    NPU: thnn_conv2d_npu

- func: thnn_conv2d_forward.output(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, *, Tensor(a!) output, Tensor(b!) finput, Tensor(c!) fgrad_input) -> (Tensor(a!), Tensor(b!), Tensor(c!))
  python_module: nn
  dispatch:
    CPU: slow_conv2d_forward_out_cpu
    CUDA: legacy::cuda::_thnn_conv2d_forward_out
  npu_dispatch:
    NPU: thnn_conv2d_forward_out_npu

- func: thnn_conv2d_forward(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding) -> (Tensor output, Tensor finput, Tensor fgrad_input)
  python_module: nn
  dispatch:
    CPU: slow_conv2d_forward_cpu
    CUDA: legacy::cuda::_thnn_conv2d_forward
  npu_dispatch:
    NPU: thnn_conv2d_forward_npu

- func: thnn_conv2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, Tensor finput, Tensor fgrad_input, *, Tensor(a!)? grad_input, Tensor(b!)? grad_weight, Tensor(c!)? grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))
  python_module: nn
  dispatch:
    CPU: slow_conv2d_backward_out_cpu
    CUDA: legacy::cuda::_thnn_conv2d_backward_out

- func: thnn_conv2d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, Tensor finput, Tensor fgrad_input, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)
  python_module: nn
  dispatch:
    CPU: slow_conv2d_backward_cpu
    CUDA: legacy::cuda::_thnn_conv2d_backward
  npu_dispatch:
    NPU: thnn_conv2d_backward_npu

- func: thnn_conv_depthwise2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  npu_dispatch:
    NPU: thnn_conv_depthwise2d_out_npu

- func: thnn_conv_depthwise2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1) -> Tensor
  python_module: nn
  npu_dispatch:
    NPU: thnn_conv_depthwise2d_npu

- func: thnn_conv_depthwise2d_forward.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, int[2] dilation, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    CUDA: legacy::cuda::_thnn_conv_depthwise2d_forward_out
  npu_dispatch:
    NPU: thnn_conv_depthwise2d_forward_out_npu

- func: thnn_conv_depthwise2d_forward(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, int[2] dilation) -> Tensor
  python_module: nn
  dispatch:
    CUDA: legacy::cuda::_thnn_conv_depthwise2d_forward
  npu_dispatch:
    NPU: thnn_conv_depthwise2d_forward_npu

- func: thnn_conv_depthwise2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, *, Tensor(a!)? grad_input, Tensor(b!)? grad_weight) -> (Tensor(a!), Tensor(b!))
  python_module: nn
  dispatch:
    CUDA: legacy::cuda::_thnn_conv_depthwise2d_backward_out
  npu_dispatch:
    NPU: thnn_conv_depthwise2d_backward_out_npu

- func: thnn_conv_depthwise2d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool[2] output_mask) -> (Tensor grad_input, Tensor grad_weight)
  python_module: nn
  dispatch:
    CUDA: legacy::cuda::_thnn_conv_depthwise2d_backward
  npu_dispatch:
    NPU: thnn_conv_depthwise2d_backward_npu

- func: slow_conv3d.out(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  npu_dispatch:
    NPU: slow_conv3d_out_npu

- func: slow_conv3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0) -> Tensor
  python_module: nn
  npu_dispatch:
    NPU: slow_conv3d_npu

- func: slow_conv3d_forward.output(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias, int[3] stride, int[3] padding, *, Tensor(a!) output, Tensor(b!) finput, Tensor(c!) fgrad_input) -> (Tensor(a!), Tensor(b!), Tensor(c!))
  python_module: nn
  dispatch:
    CPU: slow_conv3d_forward_out_cpu
  npu_dispatch:
    NPU: slow_conv3d_forward_out_npu

- func: slow_conv3d_forward(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias, int[3] stride, int[3] padding) -> (Tensor output, Tensor finput, Tensor fgrad_input)
  python_module: nn
  dispatch:
    CPU: slow_conv3d_forward_cpu
  npu_dispatch:
    NPU: slow_conv3d_forward_npu

- func: slow_conv3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, Tensor finput, Tensor fgrad_input, *, Tensor(a!)? grad_input, Tensor(b!)? grad_weight, Tensor(c!)? grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))
  python_module: nn
  dispatch:
    CPU: slow_conv3d_backward_out_cpu

- func: slow_conv3d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, Tensor finput, Tensor fgrad_input, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)
  python_module: nn
  dispatch:
    CPU: slow_conv3d_backward_cpu

- func: slow_conv_dilated2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1) -> Tensor
  python_module: nn
  dispatch:
    CPU: slow_conv_dilated2d_cpu
    CUDA: slow_conv_dilated2d_cuda
  npu_dispatch:
    NPU: slow_conv_dilated2d_npu

- func: slow_conv_dilated2d_backward(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)
  python_module: nn
  dispatch:
    CPU: slow_conv_dilated2d_backward_cpu
    CUDA: slow_conv_dilated2d_backward_cuda
  npu_dispatch:
    NPU: slow_conv_dilated2d_backward_npu

- func: slow_conv_dilated3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] dilation=1) -> Tensor
  python_module: nn
  dispatch:
    CPU: slow_conv_dilated3d_cpu
    CUDA: slow_conv_dilated3d_cuda

- func: slow_conv_dilated3d_backward(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)
  python_module: nn
  dispatch:
    CPU: slow_conv_dilated3d_backward_cpu
    CUDA: slow_conv_dilated3d_backward_cuda

- func: col2im.out(Tensor self, int[2] output_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: col2im_out_cpu
    CUDA: col2im_out_cuda
  npu_dispatch:
     NPU: im2col_backward_out_npu

- func: col2im(Tensor self, int[2] output_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor
  python_module: nn
  dispatch:
    CPU: col2im_cpu
    CUDA: col2im_cuda
  npu_dispatch:
     NPU: im2col_backward_npu

- func: col2im_backward.grad_input(Tensor grad_output, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: col2im_backward_out_cpu
    CUDA: col2im_backward_out_cuda
  npu_dispatch:
     NPU: im2col_out_npu

- func: col2im_backward(Tensor grad_output, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor
  python_module: nn
  dispatch:
    CPU: col2im_backward_cpu
    CUDA: col2im_backward_cuda
  npu_dispatch:
     NPU: im2col_npu

- func: im2col.out(Tensor self, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) out) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: im2col_out_cpu
    CUDA: im2col_out_cuda
  npu_dispatch:
    NPU: im2col_out_npu

- func: im2col(Tensor self, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor
  python_module: nn
  dispatch:
    CPU: im2col_cpu
    CUDA: im2col_cuda
  npu_dispatch:
    NPU: im2col_npu

- func: im2col_backward.grad_input(Tensor grad_output, int[2] input_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) grad_input) -> Tensor(a!)
  python_module: nn
  dispatch:
    CPU: im2col_backward_out_cpu
    CUDA: im2col_backward_out_cuda
  npu_dispatch:
     NPU: im2col_backward_out_npu

- func: im2col_backward(Tensor grad_output, int[2] input_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor
  python_module: nn
  dispatch:
    CPU: im2col_backward_cpu
    CUDA: im2col_backward_cuda
  npu_dispatch:
     NPU: im2col_backward_npu

- func: isfinite(Tensor self) -> Tensor
  use_c10_dispatcher: full
  variants: function
  device_guard: False
  supports_named_tensor: True
  npu_dispatch:
    NPU: isfinite_npu

- func: isinf(Tensor self) -> Tensor
  use_c10_dispatcher: full
  variants: function
  device_guard: False
  supports_named_tensor: True

- func: get_npu_format(Tensor self) -> int
  variants: function, method
  npu_dispatch_only:
    NPU: get_npu_format
    
- func: npu_format_cast(Tensor self, int acl_format) -> Tensor
  variants: function, method
  npu_dispatch_only:
    NPU: format_cast_npu

- func: npu_format_cast.Tensor(Tensor self, Tensor dst) -> Tensor
  variants: function, method
  npu_dispatch_only:
    NPU: format_cast_npu

- func: npu_format_cast_.acl_format(Tensor(a!) self, int acl_format) -> Tensor(a!)
  variants: method
  npu_dispatch_only:
    NPU: format_cast_npu_

- func: npu_format_cast_.src(Tensor(a!) self, Tensor src) -> Tensor(a!)
  variants: method
  npu_dispatch_only:
    NPU: format_cast_npu_

- func: npu_transpose_to_contiguous(Tensor self) -> Tensor
  variants: function, method
  npu_dispatch_only:
    NPU: transpose_to_contiguous_npu

- func: npu_transpose(Tensor self, int[] perm) -> Tensor
  variants: function, method
  npu_dispatch_only:
    NPU: transpose_npu

- func: npu_transpose.out(Tensor self, int[] perm, *, Tensor(a!) out) -> Tensor(a!)
  npu_dispatch_only:
    NPU: transpose_out_npu

- func: npu_broadcast(Tensor self, int[] size) -> Tensor
  variants: function, method
  npu_dispatch_only:
    NPU: broadcast_npu

- func: npu_broadcast.out(Tensor self, int[] size, *, Tensor(a!) out) -> Tensor(a!)
  npu_dispatch_only:
    NPU: broadcast_out_npu

- func: npu_dtype_cast(Tensor self, ScalarType dtype) -> Tensor
  variants: function, method
  npu_dispatch_only:
    NPU: dtype_cast_npu

- func: npu_dtype_cast_.Tensor(Tensor(a!) self, Tensor src) -> Tensor(a!)
  variants: method
  npu_dispatch_only:
    NPU: dtype_cast_npu_

- func: npu_roi_alignbk(Tensor self, Tensor rois, int[] xdiff_shape, int pooled_width, int pooled_height, float spatial_scale, int sample_num, int? roi_end_mode=None) -> Tensor
  variants: function, method
  npu_dispatch_only:
    NPU: roi_align_backward_npu

- func: empty_with_format(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, int acl_format=2) -> Tensor
  npu_dispatch_only:
    NPU: empty_with_format_npu

- func: empty_with_format.names(int[] size, Dimname[]? names, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, int acl_format=2) -> Tensor
  npu_dispatch_only:
    NPU: empty_with_format_npu

- func: copy_memory_(Tensor(a!) self, Tensor src, bool non_blocking=False) -> Tensor(a!)
  use_c10_dispatcher: unboxed_only
  variants: method
  device_guard: False
  npu_dispatch_only:
    NPU: copy_memory_npu_

- func: npu_one_hot(Tensor self, int num_classes=-1, int depth=1, Scalar on_value=1, Scalar off_value=0) -> Tensor
  variants: function, method
  npu_dispatch_only:
    NPU: one_hot_npu

- func: npu_stride_add(Tensor self, Tensor other, Scalar offset1, Scalar offset2, Scalar c1_len) -> Tensor
  variants: function, method
  npu_dispatch_only:
    NPU: stride_add_npu

- func: npu_softmax_cross_entropy_with_logits(Tensor self, Tensor labels) -> Tensor
  variants: function, method
  npu_dispatch_only:
    NPU: softmax_cross_entropy_with_logits_npu

- func: npu_softmax_cross_entropy_with_logits_backward(Tensor grad, Tensor self, Tensor labels) -> Tensor
  variants: function, method
  npu_dispatch_only:
    NPU: softmax_cross_entropy_with_logits_backward_npu

- func: npu_ps_roi_pooling(Tensor self, Tensor rois, float spatial_scale, int group_size, int output_dim) -> Tensor
  variants: function, method
  npu_dispatch_only:
    NPU: ps_roi_pooling_npu

- func: npu_ps_roi_pooling_backward(Tensor output_grad, Tensor rois, float spatial_scale, int group_size, int output_dim, int[] input_size) -> Tensor
  variants: function, method
  npu_dispatch_only:
    NPU: ps_roi_pooling_backward_npu

- func: npu_roi_align(Tensor self, Tensor rois, float spatial_scale, int pooled_height, int pooled_width, int sample_num, int roi_end_mode) -> Tensor
  variants: function, method
  npu_dispatch_only:
    NPU: roi_align_npu

- func: npu_nms_v4(Tensor self, Tensor scores, Scalar max_output_size, Tensor iou_threshold, Tensor scores_threshold, bool pad_to_max_output_size=False) -> (Tensor, Tensor)
  variants: function, method
  npu_dispatch_only:
    NPU: nms_v4_npu
    
- func: npu_nms_rotated(Tensor self, Tensor scores, float iou_threshold, float scores_threshold=0, int max_output_size=-1, int mode=0) -> (Tensor, Tensor)
  variants: function, method
  npu_dispatch_only:
    NPU: nms_rotated_npu

- func: npu_lstm(Tensor input, Tensor weight, Tensor bias, Tensor seqMask, Tensor h, Tensor c, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first, bool flagSeq, bool direction) -> (Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor)
  variants: function
  npu_dispatch_only:
    NPU: lstm_npu

- func: npu_lstm_backward(Tensor? grady, Tensor? gradh, Tensor? gradc, Tensor input, Tensor weight, Tensor bias, Tensor hx, Tensor cx,  Tensor y_output, Tensor h_output, Tensor c_output, Tensor i, Tensor j, Tensor f, Tensor o, Tensor tanhc) -> (Tensor, Tensor, Tensor, Tensor, Tensor)
  npu_dispatch_only:
    NPU: lstm_backward_npu

- func: npu_iou(Tensor bboxes, Tensor gtboxes, int mode=0) -> Tensor
  npu_dispatch_only:
    NPU: iou_npu

- func: npu_ptiou(Tensor bboxes, Tensor gtboxes, int mode=0) -> Tensor
  npu_dispatch_only:
    NPU: ptiou_npu

- func: npu_nms_with_mask(Tensor input, Scalar iou_threshold) -> (Tensor, Tensor, Tensor)
  variants: function
  npu_dispatch_only:
    NPU: nms_with_mask_npu

- func: npu_pad(Tensor input, int[] paddings) -> Tensor
  npu_dispatch_only:
    NPU: pad_npu

- func: npu_bounding_box_encode(Tensor anchor_box, Tensor ground_truth_box, float means0, float means1, float means2, float means3, float stds0, float stds1, float stds2, float stds3) -> Tensor
  npu_dispatch_only:
    NPU: bounding_box_encode_npu

- func: npu_bounding_box_decode(Tensor rois, Tensor deltas, float means0, float means1, float means2, float means3, float stds0, float stds1, float stds2, float stds3, int[1] max_shape, float wh_ratio_clip) -> Tensor
  npu_dispatch_only:
    NPU: bounding_box_decode_npu

- func: npu_gru(Tensor input, Tensor hx, Tensor weight_input, Tensor weight_hidden, Tensor bias_input, Tensor bias_hidden, Tensor seq_length, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor, Tensor, Tensor, Tensor, Tensor)
  npu_dispatch_only:
    NPU: gru_npu

- func: npu_gru_backward(Tensor? grady, Tensor? gradh, Tensor input, Tensor weight_input, Tensor weight_hidden, Tensor bias_input, Tensor bias_hidden, Tensor seq_length, Tensor hx, Tensor y_output, Tensor h_output, Tensor output_updata, Tensor output_reset, Tensor output_new, Tensor hidden_new) -> (Tensor, Tensor, Tensor, Tensor, Tensor, Tensor)
  npu_dispatch_only:
    NPU: gru_backward_npu

- func: npu_set_.source_Storage_storage_offset_format(Tensor(a!) self, Storage source, int storage_offset, int npu_format, int[] size, int[] stride=[]) -> Tensor(a!)
  variants: method
  device_guard: False
  npu_dispatch_only:
    NPU: set_npu_

- func: npu_random_choice_with_mask(Tensor x, int count=256, int seed=0, int seed2=0) -> (Tensor, Tensor)
  npu_dispatch_only:
    NPU: random_choice_with_mask_npu

- func: npu_batch_nms(Tensor self, Tensor scores, float score_threshold, float iou_threshold, int max_size_per_class, int max_total_size, bool change_coordinate_frame=False, bool transpose_box=False) -> (Tensor, Tensor, Tensor, Tensor)
  variants: function
  npu_dispatch_only:
    NPU: batch_nms_npu

- func: npu_slice(Tensor self, int[] offsets, int[] size) -> Tensor
  variants: function, method
  npu_dispatch_only:
    NPU: slice_npu

- func: npu_slice.out(Tensor self, int[] offsets, int[] size, *, Tensor(a!) out) -> Tensor(a!)
  npu_dispatch_only:
    NPU: slice_out_npu

- func: npu_dropoutV2(Tensor self, Tensor(a!) seed, float p) -> (Tensor, Tensor, Tensor(a!))
  npu_dispatch_only:
    NPU: dropout_v2_npu

- func: npu_dropoutV2_backward(Tensor grad_output, Tensor mask, float p) -> Tensor
  npu_dispatch_only:
    NPU: dropout_v2_backward_npu

- func: _npu_dropout(Tensor self, float p) -> (Tensor, Tensor)
  npu_dispatch_only:
    NPU: _dropout_npu

- func: _npu_dropout_inplace(Tensor(a!) result, float p) -> (Tensor(a!), Tensor)
  npu_dispatch_only:
    NPU: _dropout_npu_inplace

- func: npu_dropout_backward(Tensor grad_output, Tensor mask, float p) -> Tensor
  npu_dispatch_only:
    NPU: dropout_backward_npu

- func: npu_indexing(Tensor self, int[] begin, int[] end, int[] strides, int begin_mask=0, int end_mask=0, int ellipsis_mask=0, int new_axis_mask=0, int shrink_axis_mask=0) -> Tensor
  variants: function, method
  npu_dispatch_only:
    NPU: indexing_npu

- func: npu_indexing.out(Tensor self, int[] begin, int[] end, int[] strides, int begin_mask=0, int end_mask=0, int ellipsis_mask=0, int new_axis_mask=0, int shrink_axis_mask=0, *, Tensor(a!) out) -> Tensor(a!)
  npu_dispatch_only:
    NPU: indexing_out_npu

- func: npu_ifmr(Tensor data, Tensor data_min, Tensor data_max, Tensor cumsum, float min_percentile, float max_percentile, float search_start, float search_end, float search_step, bool with_offset) -> (Tensor, Tensor)
  npu_dispatch_only:
    NPU: ifmr_npu

- func: npu_max.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)
  npu_dispatch_only:
    NPU: max_v1_npu

- func: npu_max.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)
  npu_dispatch_only:
    NPU: max_v1_npu

- func: npu_min.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)
  npu_dispatch_only:
    NPU: min_v1_npu

- func: npu_min.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)
  npu_dispatch_only:
    NPU: min_v1_npu

- func: npu_scatter(Tensor self, Tensor indices, Tensor updates, int dim) -> Tensor
  variants: function, method
  npu_dispatch_only:
    NPU: scatter_npu

- func: npu_max_backward(Tensor grad, int dim, Tensor indices, int[] sizes, bool keepdim=False) -> Tensor
  npu_dispatch_only:
    NPU: max_backward_npu

- func: npu_min_backward(Tensor grad, int dim, Tensor indices, int[] sizes, bool keepdim=False) -> Tensor
  npu_dispatch_only:
    NPU: min_backward_npu

- func: npu_apply_adam.old(Tensor(a!) var, Tensor(b!) m, Tensor(c!) v, Scalar beta1_power, Scalar beta2_power, Scalar lr, Scalar beta1, Scalar beta2, Scalar epsilon, Tensor grad, bool? use_locking, bool? use_nesterov) -> (Tensor(a!), Tensor(b!), Tensor(c!))
  npu_dispatch_only:
    NPU: apply_adam_npu

- func: npu_apply_adam(Scalar beta1_power, Scalar beta2_power, Scalar lr, Scalar beta1, Scalar beta2, Scalar epsilon, Tensor grad, bool? use_locking, bool? use_nesterov) -> (Tensor var, Tensor m, Tensor v)
  npu_dispatch_only:
    NPU: npu_apply_adam

- func: npu_apply_adam.out(Scalar beta1_power, Scalar beta2_power, Scalar lr, Scalar beta1, Scalar beta2, Scalar epsilon, Tensor grad, bool? use_locking, bool? use_nesterov, *, Tensor(a!) var, Tensor(b!) m, Tensor(c!) v) -> (Tensor(a!), Tensor(b!), Tensor(c!))
  npu_dispatch_only:
    NPU: apply_adam_out_npu

- func: npu_layer_norm_eval(Tensor input, int[] normalized_shape, Tensor? weight=None, Tensor? bias=None, float eps=1e-05) -> Tensor
  npu_dispatch_only:
    NPU: layer_norm_eval_npu

- func: npu_alloc_float_status(Tensor self) -> Tensor
  variants: function, method
  npu_dispatch_only:
    NPU: alloc_float_status_npu

- func: npu_get_float_status(Tensor self) -> Tensor
  variants: function, method
  npu_dispatch_only:
    NPU: get_float_status_npu

- func: npu_clear_float_status(Tensor self) -> Tensor
  variants: function, method
  npu_dispatch_only:
    NPU: clear_float_status_npu

- func: npu_confusion_transpose(Tensor self, int[] perm, int[] shape, bool transpose_first) -> Tensor
  variants: function, method
  npu_dispatch_only:
    NPU: confusion_transpose_npu

- func: npu_confusion_transpose_backward(Tensor grad, int[] perm, int[] shape, bool transpose_first) -> Tensor
  npu_dispatch_only:
    NPU: confusion_transpose_backward_npu

- func: npu_bmmV2(Tensor self, Tensor mat2, int[] output_sizes) -> Tensor
  variants: function, method
  npu_dispatch_only:
    NPU: bmm_v2_npu

- func: fast_gelu(Tensor self) -> Tensor
  variants: function, method
  npu_dispatch_only:
    NPU: fast_gelu_npu

- func: fast_gelu_backward(Tensor grad, Tensor self) -> Tensor
  variants: function, method
  npu_dispatch_only:
    NPU: fast_gelu_backward_npu

- func: npu_sub_sample(Tensor self, int per_images, float positive_fraction) -> Tensor
  variants: function, method
  npu_dispatch_only:
    NPU: sub_sample_npu

- func: npu_deformable_conv2d(Tensor input, Tensor weight, Tensor offset, Tensor? bias, int[2] kernel_size, int[] stride, int[] padding, int[] dilation=[1,1,1,1], int groups=1, int deformable_groups=1, bool modulated=True) -> (Tensor, Tensor)
  npu_dispatch_only:
    NPU: deformable_conv2d_npu

- func: npu_deformable_conv2dbk(Tensor input, Tensor grad_output, Tensor offset_out, Tensor weight, Tensor offset, int[2] kernel_size, int[] stride, int[] padding, int[] dilation=[1,1,1,1], int groups=1, int deformable_groups=1, bool modulated=True) -> (Tensor, Tensor, Tensor, Tensor)
  npu_dispatch_only:
    NPU: deformable_conv2d_backward_npu

- func: npu_mish(Tensor self) -> Tensor
  variants: function, method
  npu_dispatch_only:
    NPU: mish_npu

- func: npu_anchor_response_flags(Tensor self, int[2] featmap_size, int[2] stride, int num_base_anchors) -> Tensor
  variants: function, method
  npu_dispatch_only:
    NPU: anchor_response_flags_npu

- func: npu_yolo_boxes_encode(Tensor self, Tensor gt_bboxes, Tensor stride, bool performance_mode=False) -> Tensor
  variants: function, method
  npu_dispatch_only:
    NPU: yolo_boxes_encode_npu
    
- func: npu_rotated_box_encode(Tensor self, Tensor gt_bboxes, Tensor weight) -> Tensor
  variants: function
  npu_dispatch_only:
    NPU: rotated_box_encode_npu
    
- func: npu_rotated_box_decode(Tensor self, Tensor deltas, Tensor weight) -> Tensor
  variants: function
  npu_dispatch_only:
    NPU: rotated_box_decode_npu

- func: npu_grid_assign_positive(Tensor self, Tensor overlaps, Tensor box_responsible_flags, Tensor max_overlaps, Tensor argmax_overlaps, Tensor gt_max_overlaps, Tensor gt_argmax_overlaps, int num_gts, float pos_iou_thr, float min_pos_iou, bool gt_max_assign_all) -> Tensor
  variants: function, method
  npu_dispatch_only:
    NPU: grid_assign_positive_npu

- func: npu_mish_backward(Tensor grad, Tensor input) -> Tensor
  npu_dispatch_only:
    NPU: mish_backward_npu

- func: npu_normalize_batch(Tensor self, Tensor seq_len, int normalize_type=0) -> Tensor
  variants: function, method
  npu_dispatch_only:
    NPU: normalize_batch_npu

- func: npu_masked_fill_range(Tensor self, Tensor start, Tensor end, Tensor value, int axis=-1) -> Tensor
  variants: function, method
  npu_dispatch_only:
    NPU: masked_fill_range_npu

- func: npu_linear(Tensor input, Tensor weight, Tensor? bias=None) -> Tensor
  npu_dispatch_only:
    NPU: linear_npu

- func: npu_linear_backward(Tensor grad, Tensor input, Tensor weight) -> (Tensor, Tensor)
  npu_dispatch_only:
    NPU: linear_backward_npu

- func: npu_bert_apply_adam.old(Tensor(a!) var, Tensor(b!) m, Tensor(c!) v, Scalar lr, Scalar beta1, Scalar beta2, Scalar epsilon, Tensor grad, Scalar max_grad_norm, Scalar global_grad_norm, Scalar weight_decay, Scalar? step_size=None, int adam_mode=0) -> (Tensor(a!), Tensor(b!), Tensor(c!))
  npu_dispatch_only:
    NPU: bert_apply_adam_npu

- func: npu_bert_apply_adam(Scalar lr, Scalar beta1, Scalar beta2, Scalar epsilon, Tensor grad, Scalar max_grad_norm, Scalar global_grad_norm, Scalar weight_decay, Scalar? step_size=None, int adam_mode=0) -> (Tensor var, Tensor m, Tensor v)
  npu_dispatch_only:
    NPU: npu_bert_apply_adam

- func: npu_bert_apply_adam.out(Scalar lr, Scalar beta1, Scalar beta2, Scalar epsilon, Tensor grad, Scalar max_grad_norm, Scalar global_grad_norm, Scalar weight_decay, Scalar? step_size=None, int adam_mode=0, *, Tensor(a!) var, Tensor(b!) m, Tensor(c!) v) -> (Tensor(a!), Tensor(b!), Tensor(c!))
  npu_dispatch_only:
    NPU: bert_apply_adam_out_npu

- func: npu_giou(Tensor self, Tensor gtboxes, bool trans=False, bool is_cross=False, int mode=0) -> Tensor
  npu_dispatch_only:
    NPU: giou_npu

- func: npu_giou_backward(Tensor grad, Tensor bboxes, Tensor gtboxes, bool trans=False, bool is_cross=False, int mode=0) -> (Tensor, Tensor)
  npu_dispatch_only:
    NPU: giou_backward_npu

- func: npu_silu(Tensor self) -> Tensor
  npu_dispatch_only:
    NPU: silu_npu

- func: npu_silu_(Tensor(a!) self) -> Tensor(a!)
  npu_dispatch_only:
    NPU: silu_npu_

- func: npu_silu_backward(Tensor grad_output, Tensor x0, Tensor x1) -> Tensor
  npu_dispatch_only:
    NPU: silu_backward_npu

- func: npu_reshape(Tensor self, int[] shape, bool can_refresh=False) -> Tensor
  variants: function, method
  npu_dispatch_only:
    NPU: reshape_npu

- func: npu_reshape.out(Tensor self, int[] shape, bool can_refresh=False, *, Tensor(a!) out) -> Tensor(a!)
  npu_dispatch_only:
    NPU: reshape_out_npu
    
- func: npu_rotated_overlaps(Tensor self, Tensor query_boxes, bool trans=False) -> Tensor
  npu_dispatch_only:
    NPU: rotated_overlaps_npu
  
- func: npu_rotated_iou(Tensor self, Tensor query_boxes, bool trans=False, int mode=0, bool is_cross=True, float v_threshold=0.0, float e_threshold=0.0) -> Tensor
  npu_dispatch_only:
    NPU: rotated_iou_npu

- func: npu_hcom_allreduce.out(Tensor self, str reduction, str group, int fusion, int fusion_id, float alpha, float beta, Tensor(a!) out, int? hccl_comm) -> Tensor(a!)
  npu_dispatch_only:
    NPU: hcom_allreduce_npu

- func: npu_stride_copy(Tensor self, int[] shape, int[] stride, Scalar storage_offset) -> Tensor
  variants: function, method
  npu_dispatch_only:
    NPU: stride_copy_npu

- func: npu_stride_copy.out(Tensor self, int[] shape, int[] stride, Scalar storage_offset, *, Tensor(a!) out) -> Tensor(a!)
  npu_dispatch_only:
    NPU: stride_copy_out_npu

- func: dropout_with_byte_mask(Tensor self, float p, bool train) -> Tensor

- func: dropout_with_byte_mask_(Tensor(a!) self, float p, bool train) -> Tensor(a!)

- func: _dropout_with_byte_mask(Tensor self, float p) -> (Tensor, Tensor)
  npu_dispatch_only:
    NPU: _dropout_with_byte_mask_npu

- func: _dropout_with_byte_mask_inplace(Tensor(a!) result, float p) -> (Tensor(a!), Tensor)
  npu_dispatch_only:
    NPU: _dropout_with_byte_mask_npu_inplace

- func: _dropout_with_byte_mask_backward(Tensor grad_output, Tensor mask, float p) -> Tensor
  npu_dispatch_only:
    NPU: dropout_with_byte_mask_backward_npu

- func: npu_dropout_with_add_softmax(Tensor self, Tensor x1, Scalar alpha, float prob, int dim) -> (Tensor, Tensor, Tensor)
  variants: function, method
  npu_dispatch_only:
    NPU: dropout_with_add_softmax_npu

- func: npu_dropout_with_add_softmax_backward(Tensor grad, Tensor mask, Tensor softmax_out, Scalar alpha, float prob, int dim) -> (Tensor, Tensor)
  variants: function, method
  npu_dispatch_only:
    NPU: dropout_with_add_softmax_backward_npu

- func: npu_multi_head_attention(Tensor query, Tensor key, Tensor value, Tensor query_weight, Tensor key_weight, Tensor value_weight, Tensor attn_mask, Tensor out_proj_weight, Tensor? query_bias, Tensor? key_bias, Tensor? value_bias, Tensor? out_proj_bias, Tensor? dropout_mask, int attn_head_num, int attn_dim_per_head, int src_len, int tgt_len, float dropout_prob, bool softmax_use_float) -> (Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor)
  npu_dispatch_only:
    NPU: multi_head_attention_npu

- func: npu_multi_head_attention_backward(Tensor query, Tensor key, Tensor value, Tensor query_weight, Tensor key_weight, Tensor value_weight, Tensor out_proj_weight, Tensor? query_bias, Tensor? key_bias, Tensor? value_bias, Tensor? out_proj_bias, Tensor query_res, Tensor key_res, Tensor value_res, Tensor attn_scores, Tensor attn_res, Tensor context, Tensor y_grad, Tensor dropout_mask, int attn_head_num, int attn_dim_per_head, int src_len, int tgt_len, float dropout_prob, bool softmax_use_float) -> (Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor)
  npu_dispatch_only:
    NPU: multi_head_attention_backward_npu

- func: npu_lstm_cell(Tensor input, Tensor w_ih, Tensor w_hh, Tensor bias, Tensor h, Tensor c) -> (Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor)
  variants: function
  npu_dispatch_only:
    NPU: lstm_cell_npu

- func: npu_dropout_gen_mask(int[] size, float p, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
  npu_dispatch_only:
    NPU: dropout_gen_mask_impl

- func: npu_dropout_do_mask(Tensor self, Tensor mask, float p) -> (Tensor, Tensor)
  npu_dispatch_only:
    NPU: dropout_do_mask_impl